!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	qmd5file.h	/^		uint32_t A;$/;"	m	struct:QMD5File::_md5_struct
ACCEPT_REQUEST	qhttpserver.h	27;"	d
AL_START_HEAD	qadlist.h	74;"	d
AL_START_TAIL	qadlist.h	75;"	d
ATTRIBUTE_NAME	tinyxml2.h	/^        ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon9
ATTRIBUTE_VALUE	tinyxml2.h	/^        ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon9
ATTRIBUTE_VALUE_LEAVE_ENTITIES	tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon9
Accept	tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment
Accept	tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration
Accept	tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument
Accept	tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement
Accept	tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText
Accept	tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown
Alloc	tinyxml2.h	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT
AscendingOrder	qglobal.h	/^enum SortOrder {NoSort=0x00, AscendingOrder, DescendingOrder};$/;"	e	enum:SortOrder
Attribute	tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement
B	qmd5file.h	/^		uint32_t B;$/;"	m	struct:QMD5File::_md5_struct
BAD_GATEWAY	qhttpserver.h	57;"	d
BAD_REQUEST	qhttpserver.h	38;"	d
BITMAP_MASK	qbitmap.cc	/^const unsigned char QBitMap::BITMAP_MASK[SLOT_SIZE]={0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};$/;"	m	class:QBitMap	file:
BITMAP_MASK	qbitmap.h	/^		static const unsigned char BITMAP_MASK[SLOT_SIZE];$/;"	m	class:QBitMap
BLACK	qredblacktree.h	/^enum NODE_COLOR {RED=0, BLACK};$/;"	e	enum:NODE_COLOR
BSD	qglobal.h	81;"	d
BUFSIZ_10M	qglobal.h	290;"	d
BUFSIZ_128	qglobal.h	275;"	d
BUFSIZ_16	qglobal.h	272;"	d
BUFSIZ_1G	qglobal.h	291;"	d
BUFSIZ_1K	qglobal.h	279;"	d
BUFSIZ_1M	qglobal.h	284;"	d
BUFSIZ_256	qglobal.h	276;"	d
BUFSIZ_2K	qglobal.h	280;"	d
BUFSIZ_2M	qglobal.h	285;"	d
BUFSIZ_32	qglobal.h	273;"	d
BUFSIZ_3M	qglobal.h	286;"	d
BUFSIZ_4K	qglobal.h	281;"	d
BUFSIZ_512	qglobal.h	277;"	d
BUFSIZ_5M	qglobal.h	287;"	d
BUFSIZ_64	qglobal.h	274;"	d
BUFSIZ_8K	qglobal.h	282;"	d
BUFSIZ_8M	qglobal.h	288;"	d
BUF_SIZE	tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon15
BUF_SIZE	tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon12
BUF_SIZE	tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon14
BigEndian	qglobal.h	/^enum ByteOrder {BigEndian, LittleEndian};$/;"	e	enum:ByteOrder
Block	tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT
BoolAttribute	tinyxml2.h	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement
BoolValue	tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
ByteOrder	qglobal.h	/^enum ByteOrder {BigEndian, LittleEndian};$/;"	g
ByteOrderMark	qstring.h	/^			ByteOrderMark = 0xfeff,$/;"	e	enum:QChar::SpecialCharacter
ByteOrderSwapped	qstring.h	/^			ByteOrderSwapped = 0xfffe,$/;"	e	enum:QChar::SpecialCharacter
C	qmd5file.h	/^		uint32_t C;$/;"	m	struct:QMD5File::_md5_struct
CARRIAGE_RETURN	tinyxml2.cpp	/^static const char CARRIAGE_RETURN		= (char)0x0d;			\/\/ CR gets filtered out$/;"	v	file:
CData	tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText
CLOSED	tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon13
CLOSING	tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon13
CLUSTER_CPU_RATIO	qlbcluster.h	/^		} CLUSTER_CPU_RATIO;$/;"	t	class:QLBCluster	typeref:struct:QLBCluster::__cluster_cpu_ratio
CODE_TYPE_ASCII	qwordtokenizer.h	/^	CODE_TYPE_ASCII,	\/\/ ASCII$/;"	e	enum:CodeType
CODE_TYPE_BIG5	qwordtokenizer.h	/^	CODE_TYPE_BIG5		\/\/ BIG5$/;"	e	enum:CodeType
CODE_TYPE_GBK	qwordtokenizer.h	/^	CODE_TYPE_GBK,		\/\/ GB2312, GBK, GB10380$/;"	e	enum:CodeType
CODE_TYPE_UNKNOWN	qwordtokenizer.h	/^	CODE_TYPE_UNKNOWN,	\/\/ unknown type$/;"	e	enum:CodeType
CODE_TYPE_UTF8	qwordtokenizer.h	/^	CODE_TYPE_UTF8,		\/\/ UTF-8$/;"	e	enum:CodeType
COLLAPSE_WHITESPACE	tinyxml2.h	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
COMMENT	tinyxml2.h	/^        COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon9
CONFLICT_ERROR	qhttpserver.h	46;"	d
CONNECT	qhttpserver.h	/^	CONNECT		= 0x08,				\/\/ 用于代理服务器, 请求连接转化为一个安全隧道$/;"	e	enum:method_t
CONTINUE	qhttpserver.h	23;"	d
COUNT	tinyxml2.h	/^    enum { COUNT = (4*1024)\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon11
CR	qglobal.h	299;"	d
CR	tinyxml2.cpp	/^static const char CR = CARRIAGE_RETURN;$/;"	v	file:
CREATED_REQUEST	qhttpserver.h	26;"	d
CRLF	qglobal.h	300;"	d
CStr	tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter
CStrSize	tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter
Capacity	tinyxml2.h	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray
CarriageReturn	qstring.h	/^			CarriageReturn = 0x000d,$/;"	e	enum:QChar::SpecialCharacter
CaseInsensitive	qglobal.h	/^enum CaseSensitivity {CaseInsensitive, CaseSensitive};$/;"	e	enum:CaseSensitivity
CaseSensitive	qglobal.h	/^enum CaseSensitivity {CaseInsensitive, CaseSensitive};$/;"	e	enum:CaseSensitivity
CaseSensitivity	qglobal.h	/^enum CaseSensitivity {CaseInsensitive, CaseSensitive};$/;"	g
ChainNode	qhashmap.h	/^	ChainNode(ChainNode<T_KEY, T>* l=NULL): link(l) {}$/;"	f	struct:ChainNode
ChainNode	qhashmap.h	/^	ChainNode(const T_KEY& key, const T& val, ChainNode<T_KEY, T>* l=NULL): mKey(key), mValue(val), link(l) {}$/;"	f	struct:ChainNode
ChainNode	qhashmap.h	/^struct ChainNode {$/;"	s
CheckSum	qglobal.h	/^	WORD CheckSum;$/;"	m	struct:HeadTCP
ChkSum	qglobal.h	/^	WORD ChkSum;$/;"	m	struct:HeadICMP
ChkSum	qglobal.h	/^	WORD ChkSum;$/;"	m	struct:HeadUDP
Chunk	tinyxml2.h	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT
Clear	tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument
Clear	tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray
Clear	tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::MemPoolT
ClearBuffer	tinyxml2.h	/^    void ClearBuffer() {$/;"	f	class:tinyxml2::XMLPrinter
CloseElement	tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
ClosingType	tinyxml2.h	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement
Code	qglobal.h	/^	BYTE Code;$/;"	m	struct:HeadICMP
CodeType	qwordtokenizer.h	/^enum CodeType {$/;"	g
CollapseWhitespace	tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair
CompactMode	tinyxml2.h	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }$/;"	f	class:tinyxml2::XMLPrinter
Compare	qsimhasher.cc	/^bool QSimHasher::Compare(const std::pair<std::string, double>& lhs, const std::pair<std::string, double>& rhs)$/;"	f	class:QSimHasher
Compare_1K	qalgorithm.h	/^static int32_t Compare_1K(T_KEY_1 key_1_1, T_KEY_1 key_1_2)$/;"	f
Compare_1K_Ascending	qalgorithm.h	/^static int32_t Compare_1K_Ascending(T_KEY_1 key_1_1, T_KEY_1 key_1_2)$/;"	f
Compare_1K_Ascending_S	qalgorithm.h	/^static int32_t Compare_1K_Ascending_S(T_KEY_1 key_1_1, T_KEY_1 key_1_2, int32_t pos_1, int32_t pos_2)$/;"	f
Compare_1K_Descending	qalgorithm.h	/^static int32_t Compare_1K_Descending(T_KEY_1 key_1_1, T_KEY_1 key_1_2)$/;"	f
Compare_1K_Descending_S	qalgorithm.h	/^static int32_t Compare_1K_Descending_S(T_KEY_1 key_1_1, T_KEY_1 key_1_2, int32_t pos_1, int32_t pos_2)$/;"	f
Compare_2K	qalgorithm.h	/^static int32_t Compare_2K(T_KEY_1 key_1_1, T_KEY_1 key_1_2, T_KEY_2 key_2_1, T_KEY_2 key_2_2)$/;"	f
Compare_3K	qalgorithm.h	/^static int32_t Compare_3K(T_KEY_1 key_1_1, T_KEY_1 key_1_2, T_KEY_2 key_2_1, T_KEY_2 key_2_2, T_KEY_3 key_3_1, T_KEY_3 key_3_2)$/;"	f
Compare_Key_Default	qalgorithm.h	/^static int32_t Compare_Key_Default(T_KEY tKey1, T_KEY tKey2)$/;"	f
ConfirmNo	qglobal.h	/^	DWORD ConfirmNo;$/;"	m	struct:HeadTCP
ConstructHead	qmailsender.h	/^		bool ConstructHead(const std::string& strSubject, const std::string& strContent)$/;"	f	class:QMailSender
ConvertUTF32ToUTF8	tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil
CurrentAllocs	tinyxml2.h	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT
D	qmd5file.h	/^		uint32_t D;$/;"	m	struct:QMD5File::_md5_struct
DEBUG	qglobal.h	48;"	d
DEBUG	tinyxml2.h	54;"	d
DEBUG_FUNC	qglobal.h	50;"	d
DEBUG_FUNC	qglobal.h	52;"	d
DEFAULT_BUCKET_SIZE	qdiskcache.h	18;"	d
DEFAULT_BUFFER_SIZE	qglobal.h	/^		enum {DEFAULT_BUFFER_SIZE=1<<10};$/;"	e	enum:QStringBuffer::__anon4
DEFAULT_CACHE_INTERVAL	qdiskcache.h	19;"	d
DEFAULT_DISK_CACHE_FILE	qdiskcache.h	20;"	d
DEFAULT_DISK_SWAP_FILE	qdiskcache.h	21;"	d
DEFAULT_ERROR_SIZE	qshinyxml.h	20;"	d
DEFAULT_LATENCY_EVENTID	qlatency.h	20;"	d
DEFAULT_LATENCY_FSIZE	qlatency.h	24;"	d
DEFAULT_LATENCY_MAX	qlatency.h	21;"	d
DEFAULT_LATENCY_MAX_SAMPLES	qlatency.h	22;"	d
DEFAULT_LATENCY_REPORT	qlatency.h	23;"	d
DEFAULT_LATENCY_STAT_COLUMN	qlatency.h	25;"	d
DEFAULT_LOG_MESSAGE_SIZE	qlogger.h	31;"	d
DEFAULT_LOG_PATH	qlogger.h	28;"	d
DEFAULT_LOG_PATH_SIZE	qlogger.h	25;"	d
DEFAULT_LOG_PREFIX	qlogger.h	30;"	d
DEFAULT_LOG_PREFIX_SIZE	qlogger.h	26;"	d
DEFAULT_MALLOC_SIZE	qbuffer.h	/^		static const int16_t DEFAULT_MALLOC_SIZE=1<<8;$/;"	m	class:QBuffer
DEFAULT_QSTRING_SIZE	qstring.h	/^		enum {DEFAULT_QSTRING_SIZE=128};$/;"	e	enum:QString::__anon8
DEFAULT_REDIS_HOST	qredisclient.h	20;"	d
DEFAULT_REDIS_PORT	qredisclient.h	21;"	d
DEFAULT_REGEX_POS_SIZE	qregexp.h	/^enum {DEFAULT_REGEX_POS_SIZE=1<<7};$/;"	e	enum:__anon7
DEFAULT_SHINY_ELEMENT_SIZE	qshinyxml.h	19;"	d
DELETE	qhttpclient.h	/^			DELETE,		\/\/ 删除某个资源$/;"	e	enum:QHttpRequestHeader::Method
DELETE	qhttpserver.h	/^	DELETE		= 0x05,				\/\/ 删除某个资源$/;"	e	enum:method_t
DICT_AUTHOR	qdictcreator.h	26;"	d
DICT_END_MARK	qdictcreator.h	27;"	d
DICT_ERR	qdictcreator.h	22;"	d
DICT_LIB_VERSION	qdictcreator.h	25;"	d
DICT_MAGIC_NUMBER	qdictcreator.h	24;"	d
DICT_OK	qdictcreator.h	21;"	d
DIR_DEFAULT_PATH	qdir.h	18;"	d
DIR_DEFAULT_PATH_SIZE	qdir.h	19;"	d
DIR_TRAVEL_HANDLE	qdir.h	/^		} DIR_TRAVEL_HANDLE;$/;"	t	class:QDir	typeref:struct:QDir::dir_travel_handle
DOUBLE_COST_MAX	qadjgraph.h	19;"	d
DOUBLE_QUOTE	tinyxml2.cpp	/^static const char DOUBLE_QUOTE			= '\\"';$/;"	v	file:
DayOfWeek	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	g
DePort	qglobal.h	/^	WORD DePort;$/;"	m	struct:HeadTCP
DePort	qglobal.h	/^	WORD DePort;$/;"	m	struct:HeadUDP
Decode	qmd5.h	/^	void Decode (UINT4 *output, unsigned char *input, unsigned int len)$/;"	f	class:QMD5
DefaultHash	qhashmap.h	/^		DefaultHash(uint32_t numBuckets=251)$/;"	f	class:DefaultHash
DefaultHash	qhashmap.h	/^class DefaultHash {$/;"	c
DefaultHash	qhashmap.h	/^class DefaultHash<std::string> {$/;"	c
DeleteAttribute	tinyxml2.cpp	/^void XMLElement::DeleteAttribute( XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLElement
DeleteAttribute	tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
DeleteChild	tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode
DeleteChildren	tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode
DeleteFixup	qredblacktree.h	/^		int32_t DeleteFixup(RBTreeNode* node)$/;"	f	class:QRedBlackTree
DeleteNode	tinyxml2.cpp	/^void XMLDocument::DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument
DeleteNode	tinyxml2.cpp	/^void XMLNode::DeleteNode( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode
DescendingOrder	qglobal.h	/^enum SortOrder {NoSort=0x00, AscendingOrder, DescendingOrder};$/;"	e	enum:SortOrder
DestinationHashing	qlbcluster.h	/^	DestinationHashing,		\/\/ 目标地址散列调度算法$/;"	e	enum:QScheduling
Destroy	qredblacktree.h	/^		int32_t Destroy()$/;"	f	class:QRedBlackTree
Destroy	qredblacktree.h	/^		int32_t Destroy(RBTreeNode* root)$/;"	f	class:QRedBlackTree
Dijkstra	qadjgraph.h	/^		std::vector<int32_t> Dijkstra(const int32_t sourceVertex, const int32_t destVertex)$/;"	f	class:QAdjGraph
DijkstraPrint	qadjgraph.h	/^		void DijkstraPrint(int32_t sourceVertex, int32_t destVertex, std::vector<int32_t>& prevVertexArray, std::vector<int32_t>& shortestPath)$/;"	f	class:QAdjGraph
DoubleAttribute	tinyxml2.h	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement
DoubleValue	tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute
DynArray	tinyxml2.h	/^    DynArray() {$/;"	f	class:tinyxml2::DynArray
DynArray	tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
ENTITY_ERROR	qhttpserver.h	50;"	d
ENTITY_RANGE	tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon15
EPOLL_EVENT_MAX	qhttpserver.h	65;"	d
EXPAND_MULTIPLE	qbuffer.h	/^		static const int8_t EXPAND_MULTIPLE=1;$/;"	m	class:QBuffer
EXPECT_ERROR	qhttpserver.h	54;"	d
Edge	qadjgraph.h	/^	Edge() {}$/;"	f	struct:Edge
Edge	qadjgraph.h	/^	Edge(const int32_t inVertex, const Token<Type>& inToken): dest(inVertex), token(inToken), link(NULL) {}$/;"	f	struct:Edge
Edge	qadjgraph.h	/^struct Edge {$/;"	s
Empty	tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray
Empty	tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair
Encode	qmd5.h	/^	void Encode (unsigned char *output, UINT4 *input, unsigned int len)$/;"	f	class:QMD5
EnsureCapacity	tinyxml2.h	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray
Entity	tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
EntryMap	qhashmap.h	/^		typedef std::map<T_KEY, T> EntryMap;$/;"	t	class:QHashMap2
Error	tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument
ErrorID	tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument
ErrorName	tinyxml2.cpp	/^const char* XMLDocument::ErrorName() const$/;"	f	class:tinyxml2::XMLDocument
F	qmd5.h	56;"	d
F	qmd5file.h	22;"	d
FF	qmd5.h	65;"	d
FIRST_YEAR	qdatetime.h	/^static const int32_t FIRST_YEAR		= 1752;		\/\/ wrong for many countries$/;"	v
FORBID_REQUEST	qhttpserver.h	40;"	d
FOUND_REQUEST	qhttpserver.h	32;"	d
FindAttribute	tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
FindAttribute	tinyxml2.h	/^    XMLAttribute* FindAttribute( const char* name ) {$/;"	f	class:tinyxml2::XMLElement
FindOrCreateAttribute	tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
FirstAttribute	tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement
FirstChild	tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle
FirstChild	tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode
FirstChild	tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle
FirstChild	tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	tinyxml2.h	/^    XMLElement* FirstChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	tinyxml2.h	/^    XMLHandle FirstChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle
FirstChildElement	tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle
Flag	qglobal.h	/^	BYTE Flag;$/;"	m	struct:HeadTCP
FloatAttribute	tinyxml2.h	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement
FloatValue	tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
Free	tinyxml2.h	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT
Friday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
G	qmd5.h	57;"	d
G	qmd5file.h	23;"	d
GATEWAY_TIMEOUT	qhttpserver.h	59;"	d
GB	qglobal.h	295;"	d
GET	qhttpclient.h	/^			GET=0,		\/\/ GET请求$/;"	e	enum:QHttpRequestHeader::Method
GET	qhttpserver.h	/^	GET		= 0x01,				\/\/ GET请求$/;"	e	enum:method_t
GG	qmd5.h	68;"	d
GONE_ERROR	qhttpserver.h	47;"	d
GRAM_DEFAULT_FILE	qgramtree.h	22;"	d
GRAM_ERR	qgramtree.h	20;"	d
GRAM_OK	qgramtree.h	19;"	d
GetCharacterRef	tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil
GetDocument	tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode
GetDocument	tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode
GetErrorStr1	tinyxml2.h	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument
GetErrorStr2	tinyxml2.h	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument
GetLabel	qshinyxml.h	/^		const char* GetLabel() const$/;"	f	class:ShinyNode
GetLabelLength	qshinyxml.h	/^		int32_t GetLabelLength() const$/;"	f	class:ShinyNode
GetStr	tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair
GetText	qshinyxml.h	/^		const char* GetText() const$/;"	f	class:ShinyNode
GetText	tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement
GetTextLength	qshinyxml.h	/^		int32_t GetTextLength() const$/;"	f	class:ShinyNode
GetTreeSize	qredblacktree.h	/^		int32_t GetTreeSize()$/;"	f	class:QRedBlackTree
GetTreeSize	qredblacktree.h	/^		void GetTreeSize(RBTreeNode* node)$/;"	f	class:QRedBlackTree
H	qmd5.h	58;"	d
H	qmd5file.h	24;"	d
HEAD	qhttpclient.h	/^			HEAD,		\/\/ HEAD请求$/;"	e	enum:QHttpRequestHeader::Method
HEAD	qhttpserver.h	/^	HEAD		= 0x03,				\/\/ HEAD请求$/;"	e	enum:method_t
HEADICMP	qglobal.h	/^} HEADICMP;$/;"	t	typeref:struct:HeadICMP
HEADIP	qglobal.h	/^} HEADIP;$/;"	t	typeref:struct:HeadIP
HEADTCP	qglobal.h	/^} HEADTCP;$/;"	t	typeref:struct:HeadTCP
HEADUDP	qglobal.h	/^} HEADUDP;$/;"	t	typeref:struct:HeadUDP
HH	qmd5.h	71;"	d
HTTP_1_0	qhttpserver.h	/^	HTTP_1_0	= 0x00,				\/\/ HTTP协议1.0$/;"	e	enum:version_t
HTTP_1_1	qhttpserver.h	/^	HTTP_1_1	= 0x01				\/\/ HTTP协议1.1$/;"	e	enum:version_t
HTTP_CLOSE	qhttpserver.h	/^	HTTP_CLOSE	= 0x00,				\/\/ HTTP协议短连接$/;"	e	enum:connection_t
HTTP_KEEP_ALIVE	qhttpserver.h	/^	HTTP_KEEP_ALIVE	= 0x01				\/\/ HTTP协议连接复用$/;"	e	enum:connection_t
HTTP_WEB_SERVER	qhttpserver.h	67;"	d
HasBOM	tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument
HeadICMP	qglobal.h	/^typedef struct HeadICMP {$/;"	s
HeadIP	qglobal.h	/^typedef struct HeadIP {$/;"	s
HeadLen	qglobal.h	/^	BYTE HeadLen;$/;"	m	struct:HeadTCP
HeadTCP	qglobal.h	/^typedef struct HeadTCP {$/;"	s
HeadUDP	qglobal.h	/^typedef struct HeadUDP {$/;"	s
Horizontal	qglobal.h	/^enum Orientation {Horizontal=0x01, Vertical};$/;"	e	enum:Orientation
I	qmd5.h	59;"	d
I	qmd5file.h	25;"	d
II	qmd5.h	74;"	d
IMAGE_GIF	qhttpserver.h	/^	IMAGE_GIF	= 0x08				\/\/ image\/gif$/;"	e	enum:content_type_t
IMAGE_JPEG	qhttpserver.h	/^	IMAGE_JPEG	= 0x06,				\/\/ image\/jpeg$/;"	e	enum:content_type_t
IMAGE_PNG	qhttpserver.h	/^	IMAGE_PNG	= 0x07,				\/\/ image\/png$/;"	e	enum:content_type_t
INTERNAL_ERROR	qhttpserver.h	55;"	d
INVALID_INDEX	qbitmap.h	/^		static const uint32_t INVALID_INDEX=0xFFFFFFFF;$/;"	m	class:QBitMap
INVALID_SOCKET	qhttpserver.h	62;"	d
IPADDR_MAX_LEN	qhttpserver.h	63;"	d
I_PROC_CPU_MARK	qcpu.h	/^		uint64_t	I_PROC_CPU_MARK;	\/\/ CPU请求唯一标识$/;"	m	class:QCPU
I_PROC_CPU_MARK	qlbcluster.h	/^		uint64_t		I_PROC_CPU_MARK;	\/\/ CPU请求信息标识头信息$/;"	m	class:QLBCluster
I_STORE_BEGIN_MARK	qdenseindexmanager.h	/^		uint64_t	I_STORE_BEGIN_MARK;	\/\/ 数据文件记录头标识符$/;"	m	class:QDenseIndexManager
I_STORE_BEGIN_MARK	qstoremanager.h	/^		uint64_t	I_STORE_BEGIN_MARK;	\/\/ 数据文件存储头标识符$/;"	m	class:QStoreManager
I_STORE_END_MARK	qdenseindexmanager.h	/^		uint64_t	I_STORE_END_MARK;	\/\/ 数据文件记录尾标识符$/;"	m	class:QDenseIndexManager
I_STORE_END_MARK	qstoremanager.h	/^		uint64_t	I_STORE_END_MARK;	\/\/ 数据文件存储尾标识符$/;"	m	class:QStoreManager
I_STORE_FILE_MARK	qstoremanager.h	/^		uint64_t	I_STORE_FILE_MARK;	\/\/ 散列文件存储标识符$/;"	m	class:QStoreManager
I_STORE_INDEX_MARK	qdenseindexmanager.h	/^		uint64_t	I_STORE_INDEX_MARK;	\/\/ 索引文件标识符$/;"	m	class:QDenseIndexManager
Identify	tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument
InsertAfterChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertChildPreamble	tinyxml2.cpp	/^void XMLNode::InsertChildPreamble( XMLNode* insertThis ) const$/;"	f	class:tinyxml2::XMLNode
InsertEndChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertFirstChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertFixup	qredblacktree.h	/^		int32_t InsertFixup(RBTreeNode* node)$/;"	f	class:QRedBlackTree
IntAttribute	tinyxml2.h	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement
IntValue	tinyxml2.h	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
IsNameChar	tinyxml2.h	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil
IsNameStartChar	tinyxml2.h	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil
IsUTF8Continuation	tinyxml2.h	/^    inline static bool IsUTF8Continuation( char p ) {$/;"	f	class:tinyxml2::XMLUtil
IsWhiteSpace	tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil
ItemSize	tinyxml2.h	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT
KB	qglobal.h	293;"	d
LENGTH_ERROR	qhttpserver.h	48;"	d
LEVEL_ALERT	qlogger.h	21;"	d
LEVEL_DEBUG	qlogger.h	19;"	d
LEVEL_ERROR	qlogger.h	23;"	d
LEVEL_INFO	qlogger.h	20;"	d
LEVEL_WARNING	qlogger.h	22;"	d
LF	qglobal.h	298;"	d
LF	tinyxml2.cpp	/^static const char LF = LINE_FEED;$/;"	v	file:
LINE_FEED	tinyxml2.cpp	/^static const char LINE_FEED				= (char)0x0a;			\/\/ all line endings are normalized to LF$/;"	v	file:
LINUX	qglobal.h	83;"	d
LastChild	tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle
LastChild	tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode
LastChild	tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle
LastChild	tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode
LastChildElement	tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
LastChildElement	tinyxml2.h	/^    XMLElement* LastChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode
LastChildElement	tinyxml2.h	/^    XMLHandle LastChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle
LastChildElement	tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle
LastValidCodePoint	qstring.h	/^			LastValidCodePoint = 0x10ffff$/;"	e	enum:QChar::SpecialCharacter
LeastConnection	qlbcluster.h	/^	LeastConnection,		\/\/ 最小连接调度算法$/;"	e	enum:QScheduling
LeftRotate	qredblacktree.h	/^		void LeftRotate(RBTreeNode* sub_root)$/;"	f	class:QRedBlackTree
Len	qglobal.h	/^	WORD Len;$/;"	m	struct:HeadUDP
LineFeed	qstring.h	/^			LineFeed = 0x000a,$/;"	e	enum:QChar::SpecialCharacter
LineSeparator	qstring.h	/^			LineSeparator = 0x2028,$/;"	e	enum:QChar::SpecialCharacter
LinkEndChild	tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode
ListNode	qqueue.h	/^			ListNode() :$/;"	f	struct:QListQueue::ListNode
ListNode	qqueue.h	/^			ListNode(T_TYPE d, ListNode* next=NULL) :$/;"	f	struct:QListQueue::ListNode
ListNode	qqueue.h	/^		struct ListNode$/;"	s	class:QListQueue
ListType	qhashmap.h	/^		typedef std::list<value_type> ListType;$/;"	t	class:QHashMap
LittleEndian	qglobal.h	/^enum ByteOrder {BigEndian, LittleEndian};$/;"	e	enum:ByteOrder
LoadFile	tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument
LoadFile	tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument
LocalityBasedLeastConnection	qlbcluster.h	/^	LocalityBasedLeastConnection,	\/\/ 基于局部性的最少链接调度算法$/;"	e	enum:QScheduling
MAX_ERROR_MSG_LEN	qbytearray.h	/^				static const uint32_t MAX_ERROR_MSG_LEN=256;$/;"	m	class:QByteArray::out_of_range
MAX_GBK_COUNT	qchinesespelling.h	22;"	d
MAX_INT16	qglobal.h	252;"	d
MAX_INT32	qglobal.h	253;"	d
MAX_INT64	qglobal.h	254;"	d
MAX_INT8	qglobal.h	251;"	d
MAX_SPELLING_LEN	qchinesespelling.h	20;"	d
MAX_SPELLING_NUM	qchinesespelling.h	21;"	d
MAX_TREE_SIZE	qredblacktree.h	/^static const int32_t MAX_TREE_SIZE=400000;$/;"	v
MAX_UINT16	qglobal.h	257;"	d
MAX_UINT32	qglobal.h	258;"	d
MAX_UINT64	qglobal.h	259;"	d
MAX_UINT8	qglobal.h	256;"	d
MB	qglobal.h	294;"	d
MD5Bits128	qmd5.h	/^	void MD5Bits128(unsigned char output[], unsigned char * input, unsigned int inputLen)$/;"	f	class:QMD5
MD5Bits32	qmd5.h	/^	UINT4 MD5Bits32(unsigned char * input, unsigned int inputLen)$/;"	f	class:QMD5
MD5Bits64	qmd5.h	/^	UINT8 MD5Bits64(unsigned char * input, unsigned int inputLen)$/;"	f	class:QMD5
MD5Final	qmd5.h	/^	void MD5Final (unsigned char digest[16], MD5_CTX *context)$/;"	f	class:QMD5
MD5Init	qmd5.h	/^	void MD5Init (MD5_CTX *context)$/;"	f	class:QMD5
MD5Transform	qmd5.h	/^	void MD5Transform (UINT4 state[4], unsigned char block[64])$/;"	f	class:QMD5
MD5Update	qmd5.h	/^	void MD5Update (MD5_CTX *context, unsigned char *input, unsigned int inputLen)$/;"	f	class:QMD5
MD5_CTX	qmd5.h	/^	} MD5_CTX;	$/;"	t	class:QMD5	typeref:struct:QMD5::__anon6
MD5_STRUCT	qmd5file.h	/^	} MD5_STRUCT;$/;"	t	class:QMD5File	typeref:struct:QMD5File::_md5_struct
MD5_memcpy	qmd5.h	/^	void MD5_memcpy(POINTER output, POINTER input, unsigned int len)$/;"	f	class:QMD5
MD5_memset	qmd5.h	/^	void MD5_memset (POINTER output, int value, unsigned int len)$/;"	f	class:QMD5
MEDIATYPE_ERROR	qhttpserver.h	52;"	d
METHOD_ERROR	qhttpserver.h	42;"	d
MIN_INT16	qglobal.h	262;"	d
MIN_INT32	qglobal.h	263;"	d
MIN_INT64	qglobal.h	264;"	d
MIN_INT8	qglobal.h	261;"	d
MIN_UINT16	qglobal.h	267;"	d
MIN_UINT32	qglobal.h	268;"	d
MIN_UINT64	qglobal.h	269;"	d
MIN_UINT8	qglobal.h	266;"	d
MONITOR_ERR	qremotemonitor.h	18;"	d
MONITOR_OK	qremotemonitor.h	17;"	d
MOVED_REQUEST	qhttpserver.h	31;"	d
MSECS_PER_DAY	qdatetime.h	/^static const int32_t MSECS_PER_DAY	= 86400000;$/;"	v
MSECS_PER_HOUR	qdatetime.h	/^static const uint32_t MSECS_PER_HOUR	= 3600000;$/;"	v
MSECS_PER_MIN	qdatetime.h	/^static const uint32_t MSECS_PER_MIN	= 60000;$/;"	v
MULTI_PERFORM_HANG_TIMEOUT	qmailsender.h	20;"	d
Mem	tinyxml2.h	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray
Mem	tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray
MemPool	tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool
MemPool	tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
MemPoolT	tinyxml2.h	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT
MemPoolT	tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2
Method	qhttpclient.h	/^		enum Method {$/;"	g	class:QHttpRequestHeader
Monday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
NEEDS_DELETE	tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon10
NEEDS_ENTITY_PROCESSING	tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon9
NEEDS_FLUSH	tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon10
NEEDS_NEWLINE_NORMALIZATION	tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon9
NEEDS_WHITESPACE_COLLAPSING	tinyxml2.h	/^        NEEDS_WHITESPACE_COLLAPSING     = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon9
NET_DEFAULT_REDIRECTIONS	qnetworkaccessmanager.h	40;"	d
NET_DEFAULT_TIMEOUT	qnetworkaccessmanager.h	41;"	d
NET_DEFAULT_USERAGENT	qnetworkaccessmanager.h	43;"	d
NET_ERR	qnetworkaccessmanager.h	22;"	d
NET_ERR_FILE_OPEN	qnetworkaccessmanager.h	36;"	d
NET_ERR_PAGE_TOO_LARGE	qnetworkaccessmanager.h	38;"	d
NET_ERR_PERFORM	qnetworkaccessmanager.h	35;"	d
NET_ERR_SET_HEADER	qnetworkaccessmanager.h	28;"	d
NET_ERR_SET_HTTPGET	qnetworkaccessmanager.h	25;"	d
NET_ERR_SET_NOBODY	qnetworkaccessmanager.h	29;"	d
NET_ERR_SET_NOSIGNAL	qnetworkaccessmanager.h	33;"	d
NET_ERR_SET_POST	qnetworkaccessmanager.h	26;"	d
NET_ERR_SET_POSTFIELDS	qnetworkaccessmanager.h	27;"	d
NET_ERR_SET_TIMEOUT_MS	qnetworkaccessmanager.h	30;"	d
NET_ERR_SET_URL	qnetworkaccessmanager.h	24;"	d
NET_ERR_SET_VERBOSE	qnetworkaccessmanager.h	34;"	d
NET_ERR_SET_WRITEDATA	qnetworkaccessmanager.h	32;"	d
NET_ERR_SET_WRITEFUNCTION	qnetworkaccessmanager.h	31;"	d
NET_ERR_TIMEOUT	qnetworkaccessmanager.h	37;"	d
NET_OK	qnetworkaccessmanager.h	21;"	d
NODE_COLOR	qredblacktree.h	/^enum NODE_COLOR {RED=0, BLACK};$/;"	g
NOT_ACCEPTABLE	qhttpserver.h	43;"	d
NOT_IMPLEMENTED	qhttpserver.h	56;"	d
NOT_MODIFIED	qhttpserver.h	34;"	d
NO_CONTENT	qhttpserver.h	28;"	d
NO_RESOURCE	qhttpserver.h	41;"	d
NUM_ENTITIES	tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
Name	tinyxml2.cpp	/^const char* XMLAttribute::Name() const $/;"	f	class:tinyxml2::XMLAttribute
Name	tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement
Nbsp	qstring.h	/^			Nbsp = 0x00a0,$/;"	e	enum:QChar::SpecialCharacter
NewComment	tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewDeclaration	tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewElement	tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument
NewText	tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewUnknown	tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument
Next	tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute
NextSibling	tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle
NextSibling	tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode
NextSibling	tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle
NextSibling	tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* name = 0 )					{$/;"	f	class:tinyxml2::XMLHandle
NextSiblingElement	tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* name = 0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle
NoChildren	tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode
NoSort	qglobal.h	/^enum SortOrder {NoSort=0x00, AscendingOrder, DescendingOrder};$/;"	e	enum:SortOrder
NodeInfo	qlist.h	/^			NodeInfo(NodeInfo *left=NULL, NodeInfo *right=NULL) :$/;"	f	struct:QList::NodeInfo
NodeInfo	qlist.h	/^			NodeInfo(NodeInfo* next=NULL) :$/;"	f	struct:QForwardList::NodeInfo
NodeInfo	qlist.h	/^			NodeInfo(T_TYPE key, NodeInfo *next=NULL) :$/;"	f	struct:QForwardList::NodeInfo
NodeInfo	qlist.h	/^			NodeInfo(T_TYPE value, NodeInfo *left=NULL, NodeInfo *right=NULL) :$/;"	f	struct:QList::NodeInfo
NodeInfo	qlist.h	/^		struct NodeInfo {$/;"	s	class:QForwardList
NodeInfo	qlist.h	/^		struct NodeInfo {$/;"	s	class:QList
Null	qstring.h	/^			Null = 0x0000,$/;"	e	enum:QChar::SpecialCharacter
NullTime	qdatetime.h	/^		enum TimeFlag {NullTime=-1};$/;"	e	enum:QTime::TimeFlag
OK_REQUEST	qhttpserver.h	25;"	d
OPEN	tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon13
OPTIONS	qhttpserver.h	/^	OPTIONS		= 0x07,				\/\/ 查看服务器对URL支持的请求方法$/;"	e	enum:method_t
ORG_INFO	qalgorithm.h	/^		} ORG_INFO;$/;"	t	class:QQSParallel	typeref:struct:QQSParallel::__org_info
ObjectReplacementCharacter	qstring.h	/^			ObjectReplacementCharacter = 0xfffc,$/;"	e	enum:QChar::SpecialCharacter
OpenElement	tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
Orientation	qglobal.h	/^enum Orientation {Horizontal=0x01, Vertical};$/;"	g
OutputHeight	qredblacktree.h	/^		void OutputHeight(RBTreeNode* root, int32_t height)$/;"	f	class:QRedBlackTree
PADDING	qmd5.h	/^	unsigned char PADDING[64];$/;"	m	class:QMD5
PARSE_ERR	qgramparser.h	20;"	d
PARSE_OK	qgramparser.h	19;"	d
PARTIAL_CONTENT	qhttpserver.h	30;"	d
PATCH	qhttpclient.h	/^			PATCH		\/\/ 对某个资源做部分修改$/;"	e	enum:QHttpRequestHeader::Method
PATCH	qhttpserver.h	/^	PATCH		= 0x09				\/\/ 对某个资源做部分修改$/;"	e	enum:method_t
POINTER	qmd5.h	/^	typedef unsigned char* POINTER;$/;"	t	class:QMD5
POST	qhttpclient.h	/^			POST,		\/\/ POST请求$/;"	e	enum:QHttpRequestHeader::Method
POST	qhttpserver.h	/^	POST		= 0x02,				\/\/ POST请求$/;"	e	enum:method_t
PRECOND_ERROR	qhttpserver.h	49;"	d
PREFIX_SIZE	qglobal.h	653;"	d
PREFIX_SIZE	qglobal.h	655;"	d
PRESERVE_WHITESPACE	tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
PROXY_ERROR	qhttpserver.h	44;"	d
PUT	qhttpclient.h	/^			PUT,		\/\/ 上传某个资源$/;"	e	enum:QHttpRequestHeader::Method
PUT	qhttpserver.h	/^	PUT		= 0x04,				\/\/ 上传某个资源$/;"	e	enum:method_t
ParagraphSeparator	qstring.h	/^			ParagraphSeparator = 0x2029,$/;"	e	enum:QChar::SpecialCharacter
Parent	tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode
Parent	tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode
Parse	tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument
Parse	tinyxml2.cpp	/^void XMLDocument::Parse()$/;"	f	class:tinyxml2::XMLDocument
ParseAttributes	tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement
ParseDeep	tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute
ParseDeep	tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment
ParseDeep	tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration
ParseDeep	tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement
ParseDeep	tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode
ParseDeep	tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText
ParseDeep	tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown
ParseName	tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair
ParseText	tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair
Paused	qglobal.h	/^enum State {Stopped=0x00, Paused, Running};$/;"	e	enum:State
PeekTop	tinyxml2.h	/^    const T& PeekTop() const            {$/;"	f	class:tinyxml2::DynArray
Pop	tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray
PopArr	tinyxml2.h	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray
PreviousSibling	tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle
PreviousSibling	tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode
PreviousSibling	tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle
PreviousSibling	tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* name = 0 ) {$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* name = 0 )				{$/;"	f	class:tinyxml2::XMLHandle
PreviousSiblingElement	tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* name = 0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle
Print	tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument
Print	tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter
PrintError	tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument
PrintSpace	tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter
PrintString	tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter
ProcessEntities	tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument
Push	tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray
PushArr	tinyxml2.h	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter
PushComment	tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter
PushDeclaration	tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter
PushHeader	tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter
PushUnknown	tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter
QAdjGraph	qadjgraph.h	/^		explicit QAdjGraph(const int32_t vertexNum) :$/;"	f	class:QAdjGraph
QAdjGraph	qadjgraph.h	/^class QAdjGraph {$/;"	c
QAllocator	qallocator.h	/^		inline QAllocator(int64_t maxBlockNum=2000, int64_t maxBlockLen=1<<20) : $/;"	f	class:QAllocator
QAllocator	qallocator.h	/^class QAllocator: public noncopyable {$/;"	c
QBITS16	qbitmap.h	/^		inline QBITS16(uint16_t init=0) :$/;"	f	class:QBITS16
QBITS16	qbitmap.h	/^class QBITS16 {$/;"	c
QBitMap	qbitmap.h	/^		inline QBitMap(const QBitMap& rhs)$/;"	f	class:QBitMap
QBitMap	qbitmap.h	/^		inline QBitMap(const bool set_flag=false)$/;"	f	class:QBitMap
QBitMap	qbitmap.h	/^		inline QBitMap(const uint32_t item_count, const bool set_flag)$/;"	f	class:QBitMap
QBitMap	qbitmap.h	/^class QBitMap {$/;"	c
QBitMap2	qbitmap.h	/^		inline QBitMap2(uint32_t size=1<<20) :$/;"	f	class:QBitMap2
QBitMap2	qbitmap.h	/^class QBitMap2 {$/;"	c
QBuffer	qbuffer.h	/^		inline QBuffer() :$/;"	f	class:QBuffer
QBuffer	qbuffer.h	/^class QBuffer {$/;"	c
QByteArray	qbytearray.h	/^		explicit QByteArray() :$/;"	f	class:QByteArray
QByteArray	qbytearray.h	/^		explicit QByteArray(const QByteArray& rhs): data_(NULL), size_(0), position_(0), own_(true)$/;"	f	class:QByteArray
QByteArray	qbytearray.h	/^		explicit QByteArray(uint32_t size): data_(NULL), size_(size), position_(0), own_(true)$/;"	f	class:QByteArray
QByteArray	qbytearray.h	/^class QByteArray {$/;"	c
QCPU	qcpu.h	/^		QCPU() :$/;"	f	class:QCPU
QCPU	qcpu.h	/^class QCPU {$/;"	c
QChar	qstring.h	/^		QChar() :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(SpecialCharacter s) :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(char c) :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(int16_t rc) :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(int32_t rc) :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(uint16_t rc) :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(uint32_t rc) :$/;"	f	class:QChar
QChar	qstring.h	/^		QChar(uint8_t c) :$/;"	f	class:QChar
QChar	qstring.h	/^class QChar {$/;"	c
QChineseSpelling	qchinesespelling.h	/^		QChineseSpelling() :$/;"	f	class:QChineseSpelling
QChineseSpelling	qchinesespelling.h	/^class QChineseSpelling {$/;"	c
QClientSocket	qsocketpool.h	/^		QClientSocket() :$/;"	f	class:QClientSocket
QClientSocket	qsocketpool.h	/^class QClientSocket {$/;"	c
QConfigReader	qconfigreader.h	/^		inline QConfigReader() :$/;"	f	class:QConfigReader
QConfigReader	qconfigreader.h	/^class QConfigReader {$/;"	c
QDataStream	qdatastream.h	/^		explicit QDataStream(const int64_t length)$/;"	f	class:QDataStream
QDataStream	qdatastream.h	/^		inline QDataStream()$/;"	f	class:QDataStream
QDataStream	qdatastream.h	/^class QDataStream {$/;"	c
QDate	qdatetime.h	/^		inline QDate()$/;"	f	class:QDate
QDate	qdatetime.h	/^		inline QDate(int32_t y, int32_t m, int32_t d)$/;"	f	class:QDate
QDate	qdatetime.h	/^class QDate {$/;"	c
QDateTime	qdatetime.h	/^		QDateTime(const QDate& date, const QTime& time) :$/;"	f	class:QDateTime
QDateTime	qdatetime.h	/^		QDateTime(int32_t timestamp)$/;"	f	class:QDateTime
QDateTime	qdatetime.h	/^		explicit QDateTime(const QDate& date) :$/;"	f	class:QDateTime
QDateTime	qdatetime.h	/^		inline QDateTime()$/;"	f	class:QDateTime
QDateTime	qdatetime.h	/^class QDateTime {$/;"	c
QDenseIndexManager	qdenseindexmanager.h	/^		QDenseIndexManager() :$/;"	f	class:QDenseIndexManager
QDenseIndexManager	qdenseindexmanager.h	/^class QDenseIndexManager {$/;"	c
QDictCreator	qdictcreator.h	/^class QDictCreator {$/;"	c
QDir	qdir.cc	/^QDir::QDir(const char* path) :$/;"	f	class:QDir
QDir	qdir.h	/^class QDir: public noncopyable {$/;"	c
QDiskCache	qdiskcache.h	/^		inline QDiskCache() :$/;"	f	class:QDiskCache
QDiskCache	qdiskcache.h	/^class QDiskCache {$/;"	c
QDistance	qdistance.h	/^class QDistance {$/;"	c
QFile	qfile.h	/^		inline QFile() :$/;"	f	class:QFile
QFile	qfile.h	/^		inline QFile(const char* file_name) :$/;"	f	class:QFile
QFile	qfile.h	/^class QFile {$/;"	c
QForwardList	qlist.h	/^		QForwardList() :$/;"	f	class:QForwardList
QForwardList	qlist.h	/^class QForwardList {$/;"	c
QGramParser	qgramparser.cc	/^QGramParser::QGramParser() :$/;"	f	class:QGramParser
QGramParser	qgramparser.h	/^class QGramParser {$/;"	c
QGramTree	qgramtree.cc	/^QGramTree::QGramTree()$/;"	f	class:QGramTree
QGramTree	qgramtree.h	/^class QGramTree {$/;"	c
QHashMap	qhashmap.h	/^		explicit QHashMap(const Hash& hash=Hash(), const Compare& comp=Compare())$/;"	f	class:QHashMap
QHashMap	qhashmap.h	/^class QHashMap {$/;"	c
QHashMap2	qhashmap.h	/^		QHashMap2(const Hash& hash=Hash(), const Compare& comp=Compare())$/;"	f	class:QHashMap2
QHashMap2	qhashmap.h	/^class QHashMap2 {$/;"	c
QHashSearch	qhashsearch.h	/^		inline QHashSearch() :$/;"	f	class:QHashSearch
QHashSearch	qhashsearch.h	/^class QHashSearch {$/;"	c
QHttpClient	qhttpclient.h	/^		inline QHttpClient() :$/;"	f	class:QHttpClient
QHttpClient	qhttpclient.h	/^class QHttpClient {$/;"	c
QHttpReplyHeader	qhttpclient.h	/^		QHttpReplyHeader() :$/;"	f	class:QHttpReplyHeader
QHttpReplyHeader	qhttpclient.h	/^class QHttpReplyHeader {$/;"	c
QHttpRequestHeader	qhttpclient.h	/^		explicit QHttpRequestHeader(const char* url=NULL, Method method=GET)$/;"	f	class:QHttpRequestHeader
QHttpRequestHeader	qhttpclient.h	/^class QHttpRequestHeader {$/;"	c
QHttpServer	qhttpserver.h	/^		inline QHttpServer() :$/;"	f	class:QHttpServer
QHttpServer	qhttpserver.h	/^class QHttpServer: public noncopyable {$/;"	c
QIPv4Addr	qipv4.h	/^		inline QIPv4Addr() : $/;"	f	class:QIPv4Addr
QIPv4Addr	qipv4.h	/^		inline QIPv4Addr(const QIPv4Addr& ip_)$/;"	f	class:QIPv4Addr
QIPv4Addr	qipv4.h	/^		inline QIPv4Addr(const char* ip_)$/;"	f	class:QIPv4Addr
QIPv4Addr	qipv4.h	/^		inline QIPv4Addr(uint32_t ldata_) : $/;"	f	class:QIPv4Addr
QIPv4Addr	qipv4.h	/^class QIPv4Addr$/;"	c
QIPv4Peer	qipv4.h	/^		QIPv4Peer(QIPv4Addr ip, const char* host, int32_t port) :$/;"	f	class:QIPv4Peer
QIPv4Peer	qipv4.h	/^		inline QIPv4Peer() :$/;"	f	class:QIPv4Peer
QIPv4Peer	qipv4.h	/^class QIPv4Peer: public noncopyable$/;"	c
QJaccardSimilarity	qjaccardsimilarity.h	/^class QJaccardSimilarity {$/;"	c
QLBCluster	qlbcluster.h	/^		QLBCluster() :$/;"	f	class:QLBCluster
QLBCluster	qlbcluster.h	/^class QLBCluster: public noncopyable {$/;"	c
QLatency	qlatency.h	/^		inline QLatency() :$/;"	f	class:QLatency
QLatency	qlatency.h	/^class QLatency {$/;"	c
QLinearHash	qhashmap.h	/^		QLinearHash(int32_t size=101) : $/;"	f	class:QLinearHash
QLinearHash	qhashmap.h	/^class QLinearHash {$/;"	c
QList	qlist.h	/^		inline QList() :$/;"	f	class:QList
QList	qlist.h	/^		inline QList(const T_TYPE uniqueVal) :$/;"	f	class:QList
QList	qlist.h	/^class QList {$/;"	c
QListQueue	qqueue.h	/^		QListQueue(int32_t size=1024) :$/;"	f	class:QListQueue
QListQueue	qqueue.h	/^class QListQueue {$/;"	c
QLogger	qlogger.cc	/^QLogger::QLogger() : $/;"	f	class:QLogger
QLogger	qlogger.h	/^class QLogger: public noncopyable {$/;"	c
QLoggerInfo	qlogger.h	/^struct QLoggerInfo {$/;"	s
QLogicalParser	qlogicalparser.cc	/^QLogicalParser::QLogicalParser()$/;"	f	class:QLogicalParser
QLogicalParser	qlogicalparser.h	/^class QLogicalParser: public noncopyable {$/;"	c
QMD5	qmd5.h	/^	QMD5()$/;"	f	class:QMD5
QMD5	qmd5.h	/^class QMD5$/;"	c
QMD5File	qmd5file.h	/^class QMD5File$/;"	c
QMailSender	qmailsender.h	/^		explicit QMailSender(const std::string& user="", const std::string& passwd="", const std::string& smtpServer="", int32_t port=25, const std::string& mailFrom="")$/;"	f	class:QMailSender
QMailSender	qmailsender.h	/^class QMailSender {$/;"	c
QMarkovModel	qmarkovmodel.h	/^		QMarkovModel()$/;"	f	class:QMarkovModel
QMarkovModel	qmarkovmodel.h	/^class QMarkovModel {$/;"	c
QMaxHeap	qheap.h	/^		explicit QMaxHeap(int32_t size=100) :$/;"	f	class:QMaxHeap
QMaxHeap	qheap.h	/^class QMaxHeap {$/;"	c
QMemcachedClient	qmemcachedclient.h	/^		inline QMemcachedClient() :$/;"	f	class:QMemcachedClient
QMemcachedClient	qmemcachedclient.h	/^class QMemcachedClient: public noncopyable {$/;"	c
QMinHeap	qheap.h	/^		explicit QMinHeap(int32_t size=100) :$/;"	f	class:QMinHeap
QMinHeap	qheap.h	/^class QMinHeap {$/;"	c
QMutexLock	qglobal.h	/^		inline QMutexLock()$/;"	f	class:QMutexLock
QMutexLock	qglobal.h	/^class QMutexLock: public noncopyable$/;"	c
QMySQLClient	qmysqlclient.cc	/^QMySQLClient::QMySQLClient(const std::string& url, const std::string& user, const std::string& passwd, int32_t maxSize)$/;"	f	class:QMySQLClient
QMySQLClient	qmysqlclient.h	/^class QMySQLClient: public noncopyable {$/;"	c
QNeologismRecognizer	qneologismrecognizer.h	/^		QNeologismRecognizer()$/;"	f	class:QNeologismRecognizer
QNeologismRecognizer	qneologismrecognizer.h	/^class QNeologismRecognizer {$/;"	c
QNetworkAccessManager	qnetworkaccessmanager.cc	/^QNetworkAccessManager::QNetworkAccessManager() :$/;"	f	class:QNetworkAccessManager
QNetworkAccessManager	qnetworkaccessmanager.h	/^class QNetworkAccessManager {$/;"	c
QObjectPool	qobjectpool.h	/^		QObjectPool(uint32_t chunkSize=101)$/;"	f	class:QObjectPool
QObjectPool	qobjectpool.h	/^class QObjectPool {$/;"	c
QOcrManager	qocrmanager.h	/^		inline QOcrManager() :$/;"	f	class:QOcrManager
QOcrManager	qocrmanager.h	/^class QOcrManager {$/;"	c
QPoolAllocator	qallocator.h	/^		inline QPoolAllocator() :$/;"	f	class:QPoolAllocator
QPoolAllocator	qallocator.h	/^class QPoolAllocator: public noncopyable {$/;"	c
QPriorityQueue	qqueue.h	/^		inline QPriorityQueue() :$/;"	f	class:QPriorityQueue
QPriorityQueue	qqueue.h	/^class QPriorityQueue {$/;"	c
QQSParallel	qalgorithm.h	/^		QQSParallel() :$/;"	f	class:QQSParallel
QQSParallel	qalgorithm.h	/^class QQSParallel {$/;"	c
QQueue	qqueue.h	/^		inline QQueue() :$/;"	f	class:QQueue
QQueue	qqueue.h	/^class QQueue {$/;"	c
QRWLock	qglobal.h	/^		inline QRWLock()$/;"	f	class:QRWLock
QRWLock	qglobal.h	/^class QRWLock: public noncopyable$/;"	c
QRWLockFunc	qglobal.h	/^class QRWLockFunc: protected QMutexLock$/;"	c
QRandom	qglobal.h	/^		inline QRandom()$/;"	f	class:QRandom
QRandom	qglobal.h	/^class QRandom: public noncopyable$/;"	c
QRedBlackTree	qredblacktree.h	/^		inline QRedBlackTree()$/;"	f	class:QRedBlackTree
QRedBlackTree	qredblacktree.h	/^class QRedBlackTree {$/;"	c
QRedisClient	qredisclient.h	/^		inline QRedisClient() :$/;"	f	class:QRedisClient
QRedisClient	qredisclient.h	/^class QRedisClient: public noncopyable {$/;"	c
QRegExp	qregexp.h	/^		explicit QRegExp(const char* pattern) :$/;"	f	class:QRegExp
QRegExp	qregexp.h	/^		inline QRegExp() :$/;"	f	class:QRegExp
QRegExp	qregexp.h	/^class QRegExp {$/;"	c
QRegExp2	qregexp.h	/^		inline QRegExp2() :$/;"	f	class:QRegExp2
QRegExp2	qregexp.h	/^class QRegExp2 {$/;"	c
QRegExp3	qregexp.h	/^		inline QRegExp3()$/;"	f	class:QRegExp3
QRegExp3	qregexp.h	/^class QRegExp3 {$/;"	c
QRemoteMonitor	qremotemonitor.h	/^		QRemoteMonitor()$/;"	f	class:QRemoteMonitor
QRemoteMonitor	qremotemonitor.h	/^class QRemoteMonitor : public noncopyable {$/;"	c
QScheduling	qlbcluster.h	/^enum QScheduling$/;"	g
QScopeMutex	qglobal.h	/^		QScopeMutex(QMutexLock& mutex) : $/;"	f	class:QScopeMutex
QScopeMutex	qglobal.h	/^class QScopeMutex: public noncopyable$/;"	c
QScopeRead	qglobal.h	/^		QScopeRead(QRWLock& irw) :$/;"	f	class:QScopeRead
QScopeRead	qglobal.h	/^class QScopeRead: public noncopyable$/;"	c
QScopeSpin	qglobal.h	/^		QScopeSpin(QSpinLock& spinlock) : $/;"	f	class:QScopeSpin
QScopeSpin	qglobal.h	/^class QScopeSpin: public noncopyable$/;"	c
QScopeWrite	qglobal.h	/^		QScopeWrite(QRWLock& irw):$/;"	f	class:QScopeWrite
QScopeWrite	qglobal.h	/^class QScopeWrite: public noncopyable$/;"	c
QSerialization	qserialization.h	/^class QSerialization {$/;"	c
QService	qservice.cc	/^QService::QService()$/;"	f	class:QService
QService	qservice.h	/^class QService {$/;"	c
QShinyXML	qshinyxml.h	/^		explicit QShinyXML(int32_t __size=DEFAULT_SHINY_ELEMENT_SIZE) :$/;"	f	class:QShinyXML
QShinyXML	qshinyxml.h	/^class QShinyXML: public noncopyable {$/;"	c
QSimHasher	qsimhasher.cc	/^QSimHasher::QSimHasher()$/;"	f	class:QSimHasher
QSimHasher	qsimhasher.h	/^class QSimHasher {$/;"	c
QSocketPool	qsocketpool.h	/^		explicit QSocketPool(const char* server_ip, uint16_t server_port, int32_t timeout=3000, int32_t now_size=8, int32_t max_size=100) :$/;"	f	class:QSocketPool
QSocketPool	qsocketpool.h	/^class QSocketPool {$/;"	c
QSpinLock	qglobal.h	/^		inline QSpinLock()$/;"	f	class:QSpinLock
QSpinLock	qglobal.h	/^class QSpinLock: public noncopyable$/;"	c
QStack	qstack.h	/^		inline QStack(int32_t size=1<<7) :$/;"	f	class:QStack
QStack	qstack.h	/^class QStack {$/;"	c
QStopwatch	qglobal.h	/^class QStopwatch: public noncopyable$/;"	c
QStoreManager	qstoremanager.h	/^		inline QStoreManager() :$/;"	f	class:QStoreManager
QStoreManager	qstoremanager.h	/^class QStoreManager {$/;"	c
QStrIDAllocator	qstridallocator.h	/^		QStrIDAllocator()$/;"	f	class:QStrIDAllocator
QStrIDAllocator	qstridallocator.h	/^class QStrIDAllocator {$/;"	c
QString	qstring.h	/^		inline QString(const QChar* qchar, int32_t len)$/;"	f	class:QString
QString	qstring.h	/^		inline QString(const QString& object)$/;"	f	class:QString
QString	qstring.h	/^		inline QString(const char* str, int32_t len=-1)$/;"	f	class:QString
QString	qstring.h	/^		inline QString(int32_t size=DEFAULT_QSTRING_SIZE) :$/;"	f	class:QString
QString	qstring.h	/^class QString {$/;"	c
QStringBuffer	qglobal.h	/^		QStringBuffer(const char* str, int32_t len=-1)$/;"	f	class:QStringBuffer
QStringBuffer	qglobal.h	/^		QStringBuffer(int32_t size=DEFAULT_BUFFER_SIZE) :$/;"	f	class:QStringBuffer
QStringBuffer	qglobal.h	/^class QStringBuffer {$/;"	c
QTcpClient	qtcpsocket.cc	/^QTcpClient::QTcpClient()$/;"	f	class:QTcpClient
QTcpClient	qtcpsocket.h	/^class QTcpClient : public noncopyable {$/;"	c
QTcpServer	qtcpsocket.cc	/^QTcpServer::QTcpServer()$/;"	f	class:QTcpServer
QTcpServer	qtcpsocket.h	/^class QTcpServer : public noncopyable {$/;"	c
QTextCodec	qtextcodec.h	/^class QTextCodec: public noncopyable$/;"	c
QThread	qthread.h	/^		inline QThread(bool iautofree=false) :$/;"	f	class:QThread
QThread	qthread.h	/^class QThread {$/;"	c
QTime	qdatetime.h	/^		inline QTime() :$/;"	f	class:QTime
QTime	qdatetime.h	/^		inline QTime(int32_t h, int32_t m, int32_t s, int32_t ms=0)$/;"	f	class:QTime
QTime	qdatetime.h	/^class QTime {$/;"	c
QTimedSem	qglobal.h	/^		QTimedSem(int32_t val=0)$/;"	f	class:QTimedSem
QTimedSem	qglobal.h	/^class QTimedSem: public noncopyable$/;"	c
QTrieNode	qtrietree.h	/^	QTrieNode(const uint16_t& ucs) :$/;"	f	struct:QTrieNode
QTrieNode	qtrietree.h	/^struct QTrieNode {$/;"	s
QTrieTree	qtrietree.cc	/^QTrieTree::QTrieTree() :$/;"	f	class:QTrieTree
QTrieTree	qtrietree.h	/^class QTrieTree {$/;"	c
QTrigger	qglobal.h	/^		inline QTrigger(bool autoreset=true, bool state=false)$/;"	f	class:QTrigger
QTrigger	qglobal.h	/^class QTrigger: public noncopyable$/;"	c
QUdpClient	qudpsocket.h	/^class QUdpClient {$/;"	c
QUdpServer	qudpsocket.h	/^class QUdpServer {$/;"	c
QVector	qvector.h	/^		inline explicit QVector(int32_t size=100)$/;"	f	class:QVector
QVector	qvector.h	/^class QVector {$/;"	c
QWatchdog	qglobal.h	/^		QWatchdog(int32_t now=0, int32_t interval=20000) :$/;"	f	class:QWatchdog
QWatchdog	qglobal.h	/^class QWatchdog: public noncopyable$/;"	c
QWordTokenizer	qwordtokenizer.cc	/^QWordTokenizer::QWordTokenizer() :$/;"	f	class:QWordTokenizer
QWordTokenizer	qwordtokenizer.h	/^class QWordTokenizer {$/;"	c
QZlibManager	qzlibmanager.h	/^		QZlibManager() :$/;"	f	class:QZlibManager
QZlibManager	qzlibmanager.h	/^class QZlibManager {$/;"	c
Q_ASSERT	qglobal.h	400;"	d
Q_ASSERT_X	qglobal.h	/^static inline void Q_ASSERT_X(bool conditional, const char* file, int32_t line, const char* function, const char* format, ...)$/;"	f
Q_AUTHOR_EMAIL	qglobal.h	43;"	d
Q_AUTHOR_NAME	qglobal.h	42;"	d
Q_BEGIN_NAMESPACE	qglobal.h	24;"	d
Q_BEGIN_NAMESPACE	qglobal.h	31;"	d
Q_Binary_Search_Custom	qalgorithm.h	/^static int32_t Q_Binary_Search_Custom(int32_t lBegin, int32_t lEnd, T_KEY* tpLibrary, T_KEY tKey, int32_t (*Compare_Key)(T_KEY, T_KEY)=Compare_Key_Default)$/;"	f
Q_Binary_Search_Default	qalgorithm.h	/^static int32_t Q_Binary_Search_Default(int32_t lBegin, int32_t lEnd, T_KEY* tpLibrary, T_KEY tKey)$/;"	f
Q_Binary_Search_Recursion	qalgorithm.h	/^static int32_t Q_Binary_Search_Recursion(int32_t lBegin, int32_t lEnd, T_KEY* tpLibrary, T_KEY tKey)$/;"	f
Q_Bubble_Sort_Improved	qalgorithm.h	/^static int32_t Q_Bubble_Sort_Improved(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
Q_CATCH	qglobal.h	331;"	d
Q_CHECK_PTR	qglobal.h	414;"	d
Q_CONST_CAST	qglobal.h	320;"	d
Q_CONST_EXPR	qglobal.h	315;"	d
Q_DEBUG	qglobal.h	/^static inline void Q_DEBUG(const char* format, ...)$/;"	f
Q_DECL_NOTHROW	qglobal.h	333;"	d
Q_DISABLE_COPY	qglobal.h	417;"	d
Q_DYNAMIC_CAST	qglobal.h	321;"	d
Q_END_NAMESPACE	qglobal.h	25;"	d
Q_END_NAMESPACE	qglobal.h	32;"	d
Q_EXPLICIT_EXPR	qglobal.h	316;"	d
Q_FASTCALL	qglobal.h	308;"	d
Q_FASTCALL	qglobal.h	311;"	d
Q_FATAL	qglobal.h	/^static inline void Q_FATAL(const char* format, ...)$/;"	f
Q_FOREVER	qglobal.h	338;"	d
Q_FORWARD_CLASS	qglobal.h	325;"	d
Q_FORWARD_STRUCT	qglobal.h	326;"	d
Q_Heap_Sort	qalgorithm.h	/^static int32_t Q_Heap_Sort(T_KEY* v, int32_t size)$/;"	f
Q_INFO	qglobal.h	/^static inline void Q_INFO(const char* format, ...)$/;"	f
Q_INLINE_EXPR	qglobal.h	317;"	d
Q_Insert_Sort	qalgorithm.h	/^static int32_t Q_Insert_Sort(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
Q_JUST_BREAK	qglobal.h	424;"	d
Q_JUST_CONTINUE	qglobal.h	421;"	d
Q_JUST_RETURN	qglobal.h	427;"	d
Q_LOG	qlogger.h	36;"	d
Q_LOGGER	qlogger.h	33;"	d
Q_LOG_ALERT	qlogger.h	40;"	d
Q_LOG_DEBUG	qlogger.h	38;"	d
Q_LOG_ERROR	qlogger.h	42;"	d
Q_LOG_INFO	qlogger.h	39;"	d
Q_LOG_LEVEL	qlogger.h	34;"	d
Q_LOG_WARNING	qlogger.h	41;"	d
Q_Merge_Sort	qalgorithm.h	/^static int32_t Q_Merge_Sort(T_KEY* v1, T_KEY* v2, int32_t lBegin, int32_t lEnd)$/;"	f
Q_NAMESPACE	qglobal.h	20;"	d
Q_NAMESPACE	qglobal.h	30;"	d
Q_NEW	qglobal.h	750;"	d
Q_NORETURN	qglobal.h	309;"	d
Q_NORETURN	qglobal.h	312;"	d
Q_NOTUSED	qglobal.h	328;"	d
Q_Quick_Sort	qalgorithm.h	/^static int32_t Q_Quick_Sort(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
Q_Quick_Sort_3	qalgorithm.h	/^static int32_t Q_Quick_Sort_3(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
Q_REINTERPRET_CAST	qglobal.h	322;"	d
Q_Recursion_1K	qalgorithm.h	/^static int32_t Q_Recursion_1K(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1)$/;"	f
Q_Recursion_1K_1P	qalgorithm.h	/^static int32_t Q_Recursion_1K_1P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2)$/;"	f
Q_Recursion_1K_2P	qalgorithm.h	/^static int32_t Q_Recursion_1K_2P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3)$/;"	f
Q_Recursion_1K_3P	qalgorithm.h	/^static int32_t Q_Recursion_1K_3P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4)$/;"	f
Q_Recursion_1K_Custom	qalgorithm.h	/^static int32_t Q_Recursion_1K_Custom(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, int32_t (*Compare_Key)(T_KEY_1, T_KEY_1)=Compare_1K)$/;"	f
Q_Recursion_1K_Custom_S	qalgorithm.h	/^static int32_t Q_Recursion_1K_Custom_S(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, int32_t (*Compare_Key)(T_KEY_1, T_KEY_1, int32_t, int32_t)=Compare_1K_Ascending_S)$/;"	f
Q_Recursion_2K	qalgorithm.h	/^static int32_t Q_Recursion_2K(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2)$/;"	f
Q_Recursion_2K_1P	qalgorithm.h	/^static int32_t Q_Recursion_2K_1P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3)$/;"	f
Q_Recursion_2K_2P	qalgorithm.h	/^static int32_t Q_Recursion_2K_2P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4)$/;"	f
Q_Recursion_2K_3P	qalgorithm.h	/^static int32_t Q_Recursion_2K_3P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4, T_KEY_5* tKey_5)$/;"	f
Q_Recursion_3K_1P	qalgorithm.h	/^static int32_t Q_Recursion_3K_1P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4)$/;"	f
Q_Recursion_3K_2P	qalgorithm.h	/^static int32_t Q_Recursion_3K_2P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4, T_KEY_5* tKey_5)$/;"	f
Q_SOCKET_T	qglobal.h	1343;"	d
Q_SOCKET_T	qglobal.h	1345;"	d
Q_STATIC_ASSERT	qglobal.h	411;"	d
Q_STATIC_CAST	qglobal.h	323;"	d
Q_STATIC_EXPR	qglobal.h	318;"	d
Q_STRINGIFY	qglobal.h	340;"	d
Q_Sequential_Search_Custom	qalgorithm.h	/^static int32_t Q_Sequential_Search_Custom(int32_t lBegin, int32_t lEnd, T_KEY* tpLibrary, T_KEY tKey, int32_t (*Compare_Key)(T_KEY, T_KEY)=Compare_Key_Default)$/;"	f
Q_Sequential_Search_Default	qalgorithm.h	/^static int32_t Q_Sequential_Search_Default(int32_t lBegin, int32_t lEnd, T_KEY* tpLibrary, T_KEY tKey)$/;"	f
Q_Shell_Sort	qalgorithm.h	/^static int32_t Q_Shell_Sort(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
Q_Slect_Sort	qalgorithm.h	/^static int32_t Q_Slect_Sort(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
Q_THREAD_T	qglobal.h	1174;"	d
Q_THREAD_T	qglobal.h	1176;"	d
Q_THROW	qglobal.h	332;"	d
Q_TRY	qglobal.h	330;"	d
Q_USING_NAMESPACE	qglobal.h	26;"	d
Q_USING_NAMESPACE	qglobal.h	33;"	d
Q_Unrecursion_1K	qalgorithm.h	/^static int32_t Q_Unrecursion_1K(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1)$/;"	f
Q_Unrecursion_1K_1P	qalgorithm.h	/^static int32_t Q_Unrecursion_1K_1P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2)$/;"	f
Q_Unrecursion_1K_2P	qalgorithm.h	/^static int32_t Q_Unrecursion_1K_2P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3)$/;"	f
Q_Unrecursion_1K_3P	qalgorithm.h	/^static int32_t Q_Unrecursion_1K_3P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4)$/;"	f
Q_Unrecursion_1K_Custom	qalgorithm.h	/^static int32_t Q_Unrecursion_1K_Custom(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, int32_t (*Compare_Key)(T_KEY_1, T_KEY_1)=Compare_1K)$/;"	f
Q_Unrecursion_1K_Custom_S	qalgorithm.h	/^static int32_t Q_Unrecursion_1K_Custom_S(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, int32_t (*Compare_Key)(T_KEY_1, T_KEY_1, int32_t, int32_t)=Compare_1K_Ascending_S)$/;"	f
Q_Unrecursion_2K	qalgorithm.h	/^static int32_t Q_Unrecursion_2K(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2)$/;"	f
Q_Unrecursion_2K_1P	qalgorithm.h	/^static int32_t Q_Unrecursion_2K_1P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3)$/;"	f
Q_Unrecursion_2K_2P	qalgorithm.h	/^static int32_t Q_Unrecursion_2K_2P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4)$/;"	f
Q_Unrecursion_2K_3P	qalgorithm.h	/^static int32_t Q_Unrecursion_2K_3P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4, T_KEY_5* tKey_5)$/;"	f
Q_Unrecursion_3K_1P	qalgorithm.h	/^static int32_t Q_Unrecursion_3K_1P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4)$/;"	f
Q_Unrecursion_3K_2P	qalgorithm.h	/^static int32_t Q_Unrecursion_3K_2P(int32_t lBegin, int32_t lEnd, T_KEY_1* tKey_1, T_KEY_2* tKey_2, T_KEY_3* tKey_3, T_KEY_4* tKey_4, T_KEY_5* tKey_5)$/;"	f
Q_VERSION	qglobal.h	39;"	d
Q_VERSION_CHECK	qglobal.h	40;"	d
Q_VERSION_STR	qglobal.h	38;"	d
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryBoolAttribute	tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement
QueryBoolText	tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement
QueryBoolValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryDoubleAttribute	tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement
QueryDoubleText	tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement
QueryDoubleValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryFloatAttribute	tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement
QueryFloatText	tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement
QueryFloatValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryIntAttribute	tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement
QueryIntText	tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement
QueryIntValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryUnsignedAttribute	tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedText	tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute
RANGE_ERROR	qhttpserver.h	53;"	d
RBNode	qredblacktree.h	/^	RBNode() {$/;"	f	struct:RBNode
RBNode	qredblacktree.h	/^	RBNode(T_KEY k, T v) {$/;"	f	struct:RBNode
RBNode	qredblacktree.h	/^struct RBNode$/;"	s
RED	qredblacktree.h	/^enum NODE_COLOR {RED=0, BLACK};$/;"	e	enum:NODE_COLOR
REGEXP_INFO	qregexp.h	/^} REGEXP_INFO;$/;"	t	typeref:struct:__regexp_info
RESET_CONTENT	qhttpserver.h	29;"	d
ROTATE_LEFT	qmd5.h	62;"	d
ReadBOM	tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil
ReplacementCharacter	qstring.h	/^			ReplacementCharacter = 0xfffd,$/;"	e	enum:QChar::SpecialCharacter
Reset	tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair
RightRotate	qredblacktree.h	/^		void RightRotate(RBTreeNode* sub_root)$/;"	f	class:QRedBlackTree
RootElement	tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument
RootElement	tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument
RoundRobin	qlbcluster.h	/^	RoundRobin,			\/\/ 轮询调度算法$/;"	e	enum:QScheduling
Running	qglobal.h	/^enum State {Stopped=0x00, Paused, Running};$/;"	e	enum:State
S11	qmd5.h	38;"	d
S12	qmd5.h	39;"	d
S13	qmd5.h	40;"	d
S14	qmd5.h	41;"	d
S21	qmd5.h	42;"	d
S22	qmd5.h	43;"	d
S23	qmd5.h	44;"	d
S24	qmd5.h	45;"	d
S31	qmd5.h	46;"	d
S32	qmd5.h	47;"	d
S33	qmd5.h	48;"	d
S34	qmd5.h	49;"	d
S41	qmd5.h	50;"	d
S42	qmd5.h	51;"	d
S43	qmd5.h	52;"	d
S44	qmd5.h	53;"	d
SECS_PER_DAY	qdatetime.h	/^static const int32_t SECS_PER_DAY	= 86400;$/;"	v
SECS_PER_HOUR	qdatetime.h	/^static const uint32_t SECS_PER_HOUR	= 3600;$/;"	v
SECS_PER_MIN	qdatetime.h	/^static const uint32_t SECS_PER_MIN	= 60;$/;"	v
SEE_OTHER	qhttpserver.h	33;"	d
SERVER_CPU_INFO	qlbcluster.h	/^		} SERVER_CPU_INFO;$/;"	t	class:QLBCluster	typeref:struct:QLBCluster::__server_cpu_info
SERVER_INFO	qlbcluster.h	/^} SERVER_INFO;$/;"	t	typeref:struct:__server_info
SERVICE_ERROR	qhttpserver.h	58;"	d
SERVICE_PIDFILE	qservice.h	23;"	d
SERVICE_PREFIX	qservice.h	17;"	d
SERVICE_TYPE_COMMON	qservice.h	19;"	d
SERVICE_TYPE_MASTER	qservice.h	20;"	d
SERVICE_TYPE_WORKER	qservice.h	21;"	d
SHINY_CDATA_BEGIN	qshinyxml.h	22;"	d
SHINY_CDATA_BEGIN_LEN	qshinyxml.h	24;"	d
SHINY_CDATA_END	qshinyxml.h	23;"	d
SHINY_CDATA_END_LEN	qshinyxml.h	25;"	d
SHRINK_BUFFER_SIZE	qbuffer.h	/^		static const int16_t SHRINK_BUFFER_SIZE=2<<10;$/;"	m	class:QBuffer
SIM_ERR	qsimhasher.h	23;"	d
SIM_OK	qsimhasher.h	22;"	d
SINGLE_QUOTE	tinyxml2.cpp	/^static const char SINGLE_QUOTE			= '\\'';$/;"	v	file:
SLOT_SIZE	qbitmap.h	/^		static const uint32_t SLOT_SIZE=8*sizeof(char);$/;"	m	class:QBitMap
SOLARIS	qglobal.h	85;"	d
SORT_INFO	qalgorithm.h	/^		} SORT_INFO;$/;"	t	class:QQSParallel	typeref:struct:QQSParallel::__sort_info
SPELLING_INFO	qchinesespelling.h	/^} SPELLING_INFO;$/;"	t	typeref:struct:__spelling_info
SPELLING_NODE	qchinesespelling.h	/^} SPELLING_NODE;$/;"	t	typeref:struct:__spelling_node
STATUS_LINE_LEN	qhttpserver.h	64;"	d
STAT_ERR	qglobal.h	304;"	d
STAT_OK	qglobal.h	303;"	d
SWITCH_PROTOCOL	qhttpserver.h	24;"	d
SWITCH_PROXY	qhttpserver.h	36;"	d
Saturday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
SaveFile	tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument
SaveFile	tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument
SealElementIfJustOpened	tinyxml2.cpp	/^void XMLPrinter::SealElementIfJustOpened()$/;"	f	class:tinyxml2::XMLPrinter
SequenceNo	qglobal.h	/^	DWORD SequenceNo;$/;"	m	struct:HeadTCP
Set	tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement
SetBOM	tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument
SetCData	tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText
SetError	tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument
SetInternedStr	tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair
SetName	tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute
SetName	tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement
SetStr	tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair
SetText	tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement
SetText	tinyxml2.cpp	/^void XMLElement::SetText( bool v ) $/;"	f	class:tinyxml2::XMLElement
SetText	tinyxml2.cpp	/^void XMLElement::SetText( double v ) $/;"	f	class:tinyxml2::XMLElement
SetText	tinyxml2.cpp	/^void XMLElement::SetText( float v ) $/;"	f	class:tinyxml2::XMLElement
SetText	tinyxml2.cpp	/^void XMLElement::SetText( int v ) $/;"	f	class:tinyxml2::XMLElement
SetText	tinyxml2.cpp	/^void XMLElement::SetText( unsigned v ) $/;"	f	class:tinyxml2::XMLElement
SetTracked	tinyxml2.h	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT
SetValue	tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument
ShallowEqual	tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment
ShallowEqual	tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration
ShallowEqual	tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement
ShallowEqual	tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText
ShallowEqual	tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument
ShinyNode	qshinyxml.h	/^		inline ShinyNode() :$/;"	f	class:ShinyNode
ShinyNode	qshinyxml.h	/^class ShinyNode {$/;"	c
Size	tinyxml2.h	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray
SkipWhiteSpace	tinyxml2.h	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil
SkipWhiteSpace	tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil
SoftHyphen	qstring.h	/^			SoftHyphen = 0x00ad,$/;"	e	enum:QChar::SpecialCharacter
SortOrder	qglobal.h	/^enum SortOrder {NoSort=0x00, AscendingOrder, DescendingOrder};$/;"	g
SourceHashing	qlbcluster.h	/^	SourceHashing			\/\/ 源地址散列调度算法$/;"	e	enum:QScheduling
SourcePort	qglobal.h	/^	WORD SourcePort;$/;"	m	struct:HeadTCP
SourcePort	qglobal.h	/^	WORD SourcePort;$/;"	m	struct:HeadUDP
Space	qstring.h	/^			Space = 0x0020,$/;"	e	enum:QChar::SpecialCharacter
SpecialCharacter	qstring.h	/^		enum SpecialCharacter {$/;"	g	class:QChar
State	qglobal.h	/^enum State {Stopped=0x00, Paused, Running};$/;"	g
StaticAssert	qglobal.h	/^template <bool> struct StaticAssert {};$/;"	s
Stopped	qglobal.h	/^enum State {Stopped=0x00, Paused, Running};$/;"	e	enum:State
StrPair	tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair
StrPair	tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
StringEqual	tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil
Sunday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
TCP_DEFAULT_BUFFER_SIZE	qtcpsocket.h	74;"	d
TCP_DEFAULT_COMMAND_TYPE	qtcpsocket.h	69;"	d
TCP_DEFAULT_CONFIG_FILE	qtcpsocket.h	60;"	d
TCP_DEFAULT_HEADER_SIZE	qtcpsocket.h	80;"	d
TCP_DEFAULT_HZ	qtcpsocket.h	55;"	d
TCP_DEFAULT_INVALID_SOCKET	qtcpsocket.h	72;"	d
TCP_DEFAULT_IP_SIZE	qtcpsocket.h	82;"	d
TCP_DEFAULT_LOG_PATH	qtcpsocket.h	86;"	d
TCP_DEFAULT_LOG_PREFIX	qtcpsocket.h	87;"	d
TCP_DEFAULT_LOG_SCREEN	qtcpsocket.h	89;"	d
TCP_DEFAULT_LOG_SIZE	qtcpsocket.h	88;"	d
TCP_DEFAULT_MAX_HZ	qtcpsocket.h	57;"	d
TCP_DEFAULT_MIN_HZ	qtcpsocket.h	56;"	d
TCP_DEFAULT_MONITOR_PORT	qtcpsocket.h	64;"	d
TCP_DEFAULT_NAME_SIZE	qtcpsocket.h	83;"	d
TCP_DEFAULT_OPERATE_TYPE	qtcpsocket.h	70;"	d
TCP_DEFAULT_PATH_SIZE	qtcpsocket.h	84;"	d
TCP_DEFAULT_PIDFILE	qtcpsocket.h	59;"	d
TCP_DEFAULT_PROTOCOL_TYPE	qtcpsocket.h	67;"	d
TCP_DEFAULT_QUEUE_SIZE	qtcpsocket.h	77;"	d
TCP_DEFAULT_REPLY_SIZE	qtcpsocket.h	79;"	d
TCP_DEFAULT_REQUEST_SIZE	qtcpsocket.h	78;"	d
TCP_DEFAULT_SERVER_IP	qtcpsocket.h	62;"	d
TCP_DEFAULT_SERVER_PORT	qtcpsocket.h	63;"	d
TCP_DEFAULT_SERVER_TIMEOUT	qtcpsocket.h	65;"	d
TCP_DEFAULT_SOURCE_TYPE	qtcpsocket.h	68;"	d
TCP_DEFAULT_THREAD_NUM	qtcpsocket.h	73;"	d
TCP_DEFAULT_THREAD_TIMEOUT	qtcpsocket.h	75;"	d
TCP_ERR	qtcpsocket.h	33;"	d
TCP_ERR_BUFFER_SIZE	qtcpsocket.h	51;"	d
TCP_ERR_COMMAND_TYPE	qtcpsocket.h	50;"	d
TCP_ERR_DATA_LENGTH	qtcpsocket.h	53;"	d
TCP_ERR_HEAP_ALLOC	qtcpsocket.h	35;"	d
TCP_ERR_OPERATE_TYPE	qtcpsocket.h	52;"	d
TCP_ERR_PACKET_HEADER	qtcpsocket.h	43;"	d
TCP_ERR_PACKET_LENGTH	qtcpsocket.h	44;"	d
TCP_ERR_PROTOCOL_TYPE	qtcpsocket.h	48;"	d
TCP_ERR_SOCKET_ACCEPT	qtcpsocket.h	40;"	d
TCP_ERR_SOCKET_CONNECTION	qtcpsocket.h	38;"	d
TCP_ERR_SOCKET_INIT	qtcpsocket.h	37;"	d
TCP_ERR_SOCKET_RECV	qtcpsocket.h	42;"	d
TCP_ERR_SOCKET_SEND	qtcpsocket.h	45;"	d
TCP_ERR_SOCKET_TIMEOUT	qtcpsocket.h	41;"	d
TCP_ERR_SOCKET_VERSION	qtcpsocket.h	47;"	d
TCP_ERR_SOURCE_TYPE	qtcpsocket.h	49;"	d
TCP_HEADER_VERSION	qtcpsocket.h	91;"	d
TCP_OK	qtcpsocket.h	32;"	d
TCP_TAILER_FILE_MARK	qtcpsocket.h	92;"	d
TEMP_REDIRECT	qhttpserver.h	37;"	d
TEXT_CSS	qhttpserver.h	/^	TEXT_CSS	= 0x03,				\/\/ text\/css$/;"	e	enum:content_type_t
TEXT_ELEMENT	tinyxml2.h	/^        TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon9
TEXT_ELEMENT_LEAVE_ENTITIES	tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon9
TEXT_HTML	qhttpserver.h	/^	TEXT_HTML	= 0x01,				\/\/ text\/html$/;"	e	enum:content_type_t
TEXT_JAVASCRIPT	qhttpserver.h	/^	TEXT_JAVASCRIPT	= 0x04,				\/\/ text\/javascript$/;"	e	enum:content_type_t
TEXT_PLAIN	qhttpserver.h	/^	TEXT_PLAIN	= 0x05,				\/\/ text\/plain$/;"	e	enum:content_type_t
TEXT_XML	qhttpserver.h	/^	TEXT_XML	= 0x02,				\/\/ text\/xml$/;"	e	enum:content_type_t
TIMEOUT_ERROR	qhttpserver.h	45;"	d
TINYXML2_INCLUDED	tinyxml2.h	25;"	d
TINYXML2_LIB	tinyxml2.h	65;"	d
TINYXML2_LIB	tinyxml2.h	67;"	d
TINYXML2_LIB	tinyxml2.h	69;"	d
TINYXML2_LIB	tinyxml2.h	72;"	d
TIXML2_MAJOR_VERSION	tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 3;$/;"	v
TIXML2_MINOR_VERSION	tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	v
TIXML2_PATCH_VERSION	tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 0;$/;"	v
TIXMLASSERT	tinyxml2.h	79;"	d
TIXMLASSERT	tinyxml2.h	82;"	d
TIXMLASSERT	tinyxml2.h	85;"	d
TIXMLASSERT	tinyxml2.h	88;"	d
TIXML_SNPRINTF	tinyxml2.cpp	/^	static inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f	file:
TIXML_SNPRINTF	tinyxml2.cpp	63;"	d	file:
TIXML_SNPRINTF	tinyxml2.cpp	92;"	d	file:
TIXML_SSCANF	tinyxml2.cpp	100;"	d	file:
TIXML_SSCANF	tinyxml2.cpp	60;"	d	file:
TIXML_SSCANF	tinyxml2.cpp	65;"	d	file:
TIXML_UTF_LEAD_0	tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	file:
TIXML_UTF_LEAD_1	tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	file:
TIXML_UTF_LEAD_2	tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	file:
TIXML_VSCPRINTF	tinyxml2.cpp	/^		static inline int TIXML_VSCPRINTF( const char* format, va_list va )$/;"	f	file:
TIXML_VSCPRINTF	tinyxml2.cpp	/^	static inline int TIXML_VSCPRINTF( const char* format, va_list va )$/;"	f	file:
TIXML_VSCPRINTF	tinyxml2.cpp	59;"	d	file:
TIXML_VSCPRINTF	tinyxml2.cpp	68;"	d	file:
TIXML_VSNPRINTF	tinyxml2.cpp	/^	static inline int TIXML_VSNPRINTF( char* buffer, size_t size, const char* format, va_list va )$/;"	f	file:
TIXML_VSNPRINTF	tinyxml2.cpp	64;"	d	file:
TIXML_VSNPRINTF	tinyxml2.cpp	93;"	d	file:
TOKEN_AUTHOR	qwordtokenizer.h	26;"	d
TOKEN_DEFAULT_BUCKET_SIZE	qwordtokenizer.h	30;"	d
TOKEN_DEFAULT_BUFFER_SIZE	qwordtokenizer.h	29;"	d
TOKEN_DEFAULT_LIB_FILE	qwordtokenizer.h	32;"	d
TOKEN_DEFAULT_POS_FILE	qwordtokenizer.h	33;"	d
TOKEN_DEFAULT_POS_SEP	qwordtokenizer.h	39;"	d
TOKEN_DEFAULT_TOKEN_SEP	qwordtokenizer.h	38;"	d
TOKEN_DEFAULT_UBYTES	qwordtokenizer.h	35;"	d
TOKEN_DEFAULT_WEIGHT	qwordtokenizer.h	36;"	d
TOKEN_END_MARK	qwordtokenizer.h	27;"	d
TOKEN_ERR	qwordtokenizer.h	22;"	d
TOKEN_LIB_VERSION	qwordtokenizer.h	25;"	d
TOKEN_MAGIC_NUMBER	qwordtokenizer.h	24;"	d
TOKEN_OK	qwordtokenizer.h	21;"	d
TRACE	qhttpserver.h	/^	TRACE		= 0x06,				\/\/ 要求服务器返回原始HTTP请求内容$/;"	e	enum:method_t
TRIE_DEFAULT_UNICODE	qtrietree.h	20;"	d
TRIE_ERR	qtrietree.h	17;"	d
TRIE_LEAST_HASH_SIZE	qtrietree.h	19;"	d
TRIE_OK	qtrietree.h	16;"	d
Tabulation	qstring.h	/^			Tabulation = 0x0009,$/;"	e	enum:QChar::SpecialCharacter
Thursday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
TimeFlag	qdatetime.h	/^		enum TimeFlag {NullTime=-1};$/;"	g	class:QTime
ToBool	tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil
ToComment	tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode
ToComment	tinyxml2.h	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment
ToComment	tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode
ToComment	tinyxml2.h	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment
ToDeclaration	tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle
ToDeclaration	tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle
ToDeclaration	tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration
ToDeclaration	tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	tinyxml2.h	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration
ToDocument	tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode
ToDocument	tinyxml2.h	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument
ToDocument	tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode
ToDocument	tinyxml2.h	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument
ToDouble	tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil
ToElement	tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle
ToElement	tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle
ToElement	tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode
ToElement	tinyxml2.h	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement
ToElement	tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode
ToElement	tinyxml2.h	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement
ToFloat	tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil
ToInt	tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil
ToNode	tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle
ToNode	tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToText	tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle
ToText	tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle
ToText	tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode
ToText	tinyxml2.h	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText
ToText	tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode
ToText	tinyxml2.h	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText
ToUnknown	tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle
ToUnknown	tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle
ToUnknown	tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode
ToUnknown	tinyxml2.h	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown
ToUnknown	tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode
ToUnknown	tinyxml2.h	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown
ToUnsigned	tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil
Token	qadjgraph.h	/^	Token(const Type& d, const double weight=1.0): data(d), cost(weight) {}$/;"	f	struct:Token
Token	qadjgraph.h	/^	Token(const double weight=1.0): cost(weight) {}$/;"	f	struct:Token
Token	qadjgraph.h	/^struct Token {$/;"	s
Trace	tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT
TransferTo	tinyxml2.cpp	/^void StrPair::TransferTo( StrPair* other )$/;"	f	class:tinyxml2::StrPair
TreeMap	qgramtree.h	/^		typedef std::map< uint64_t, std::vector<std::string> > TreeMap;$/;"	t	class:QGramTree
TreeMapIter	qgramtree.h	/^		typedef std::map< uint64_t, std::vector<std::string> >::iterator TreeMapIter;$/;"	t	class:QGramTree
Tuesday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
Type	qglobal.h	/^	BYTE Type;$/;"	m	struct:HeadICMP
UINT2	qmd5.h	/^	typedef unsigned short UINT2;$/;"	t	class:QMD5
UINT4	qmd5.h	/^	typedef unsigned int UINT4;$/;"	t	class:QMD5
UINT8	qmd5.h	/^	typedef unsigned __int64 UINT8;$/;"	t	class:QMD5
UINT8	qmd5.h	/^	typedef unsigned long long UINT8;$/;"	t	class:QMD5
UNAUTH_REQUEST	qhttpserver.h	39;"	d
UNIX	qglobal.h	89;"	d
UNKNOWN	qhttpserver.h	/^	UNKNOWN		= 0x00,				\/\/ 位置类型$/;"	e	enum:content_type_t
UNKOWN	qhttpserver.h	/^	UNKOWN		= 0x00,				\/\/ 位置请求$/;"	e	enum:method_t
URI_ERROR	qhttpserver.h	51;"	d
USE_PROXY	qhttpserver.h	35;"	d
Unlink	tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode
UnsignedAttribute	tinyxml2.h	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement
UnsignedValue	tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute
Untracked	tinyxml2.h	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT
UrgPtr	qglobal.h	/^	WORD UrgPtr;$/;"	m	struct:HeadTCP
VERSION_ERROR	qhttpserver.h	60;"	d
Value	tinyxml2.cpp	/^const char* XMLAttribute::Value() const $/;"	f	class:tinyxml2::XMLAttribute
Value	tinyxml2.cpp	/^const char* XMLNode::Value() const $/;"	f	class:tinyxml2::XMLNode
Vertex	qadjgraph.h	/^struct Vertex {$/;"	s
Vertical	qglobal.h	/^enum Orientation {Horizontal=0x01, Vertical};$/;"	e	enum:Orientation
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter
VisitEnter	tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter
VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
WIN32	qglobal.h	75;"	d
WIN32	qglobal.h	76;"	d
WIN64	qglobal.h	72;"	d
WIN64	qglobal.h	73;"	d
Wednesday	qglobal.h	/^enum DayOfWeek {Monday=1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday};$/;"	e	enum:DayOfWeek
WeightedLeastConnection	qlbcluster.h	/^	WeightedLeastConnection,	\/\/ 加权最小连接调度算法$/;"	e	enum:QScheduling
WeightedRoundRobin	qlbcluster.h	/^	WeightedRoundRobin,		\/\/ 加权轮询调度算法$/;"	e	enum:QScheduling
Whitespace	tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
WhitespaceMode	tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument
WndSize	qglobal.h	/^	WORD WndSize;$/;"	m	struct:HeadTCP
XMLAttribute	tinyxml2.h	/^    XMLAttribute() : _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute
XMLAttribute	tinyxml2.h	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
XMLComment	tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment
XMLComment	tinyxml2.h	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2
XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	tinyxml2.h	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
XMLDeclaration	tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration
XMLDeclaration	tinyxml2.h	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2
XMLDocument	tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument
XMLDocument	tinyxml2.h	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2
XMLElement	tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement
XMLElement	tinyxml2.h	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2
XMLError	tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
XMLHandle	tinyxml2.h	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	tinyxml2.h	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	tinyxml2.h	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	tinyxml2.h	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
XMLNode	tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode
XMLNode	tinyxml2.h	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
XMLPrinter	tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter
XMLPrinter	tinyxml2.h	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2
XMLText	tinyxml2.h	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText
XMLText	tinyxml2.h	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2
XMLUnknown	tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown
XMLUnknown	tinyxml2.h	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2
XMLUtil	tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	tinyxml2.h	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_COUNT	tinyxml2.h	/^	XML_ERROR_COUNT$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	tinyxml2.h	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	tinyxml2.h	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ERROR	tinyxml2.h	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	tinyxml2.h	/^    XML_NO_TEXT_NODE,$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
_GCC_VER	qglobal.h	60;"	d
__DARWIN__	qglobal.h	87;"	d
__FF	qmd5file.h	30;"	d
__GG	qmd5file.h	31;"	d
__HH	qmd5file.h	32;"	d
__II	qmd5file.h	33;"	d
__PP	qmd5file.h	28;"	d
__QADJGRAPH_H_	qadjgraph.h	13;"	d
__QADLIST_H_	qadlist.h	13;"	d
__QALGORITHM_H_	qalgorithm.h	13;"	d
__QALLOCATOR_H_	qallocator.h	13;"	d
__QASCIILOGO_H_	qasciilogo.h	13;"	d
__QBITMAP_H_	qbitmap.h	13;"	d
__QBUFFER_H_	qbuffer.h	13;"	d
__QBYTEARRAY_H_	qbytearray.h	13;"	d
__QCHINESESPELLING_H_	qchinesespelling.h	13;"	d
__QCONFIGREADER_H_	qconfigreader.h	13;"	d
__QCPU_H_	qcpu.h	13;"	d
__QCRC_H_	qcrc.h	13;"	d
__QDATASTREAM_H_	qdatastream.h	13;"	d
__QDATETIME_H_	qdatetime.h	13;"	d
__QDENSEINDEXMANAGER_H_	qdenseindexmanager.h	13;"	d
__QDICTCREATOR_H_	qdictcreator.h	13;"	d
__QDIR_H_	qdir.h	13;"	d
__QDISKCACHE_H_	qdiskcache.h	13;"	d
__QDISTANCE_H_	qdistance.h	13;"	d
__QFILE_H_	qfile.h	13;"	d
__QFUNC_H_	qfunc.h	13;"	d
__QGLOBAL_H_	qglobal.h	13;"	d
__QGRAMPARSER_H_	qgramparser.h	12;"	d
__QGRAMTREE_H_	qgramtree.h	12;"	d
__QHASHMAP_H_	qhashmap.h	13;"	d
__QHASHSEARCH_H_	qhashsearch.h	13;"	d
__QHEAP_H_	qheap.h	13;"	d
__QHTTPCLIENT_H_	qhttpclient.h	13;"	d
__QHTTPSERVER_H_	qhttpserver.h	13;"	d
__QIPV4_H_	qipv4.h	13;"	d
__QJACCARDSIMILARITY_H_	qjaccardsimilarity.h	13;"	d
__QLATENCY_H_	qlatency.h	13;"	d
__QLBCLUSTER_H_	qlbcluster.h	13;"	d
__QLIST_H_	qlist.h	13;"	d
__QLOGGER_H_	qlogger.h	13;"	d
__QLOGICALPARSER_H_	qlogicalparser.h	13;"	d
__QMAILSENDER_H_	qmailsender.h	13;"	d
__QMARKOVMODEL_H_	qmarkovmodel.h	13;"	d
__QMD5FILE_H_	qmd5file.h	13;"	d
__QMD5_H_	qmd5.h	12;"	d
__QMEMCACHEDCLIENT_H_	qmemcachedclient.h	13;"	d
__QMYSQLCLIENT_H_	qmysqlclient.h	13;"	d
__QNEOLOGISMRECOGNIZER_H_	qneologismrecognizer.h	13;"	d
__QNETWORKACCESSMANAGER_H_	qnetworkaccessmanager.h	13;"	d
__QOBJECTPOOL_H_	qobjectpool.h	13;"	d
__QOCRMANAGER_H_	qocrmanager.h	13;"	d
__QOPENCV_H_	qopencv.h	13;"	d
__QQUEUE_H_	qqueue.h	13;"	d
__QREDBLACKTREE_H_	qredblacktree.h	13;"	d
__QREDISCLIENT_H_	qredisclient.h	13;"	d
__QREGEXP_H_	qregexp.h	13;"	d
__QREMOTEMONITOR_H_	qremotemonitor.h	13;"	d
__QSERIALIZATION_H_	qserialization.h	13;"	d
__QSERVICE_H_	qservice.h	13;"	d
__QSHINYXML_H_	qshinyxml.h	13;"	d
__QSIMHASHER_H_	qsimhasher.h	13;"	d
__QSOCKETPOOL_H_	qsocketpool.h	13;"	d
__QSTACK_H_	qstack.h	13;"	d
__QSTOREMANAGER_H_	qstoremanager.h	13;"	d
__QSTRIDALLOCATOR_H_	qstridallocator.h	13;"	d
__QSTRING_H_	qstring.h	13;"	d
__QTCPSOCKET_H_	qtcpsocket.h	13;"	d
__QTEXTCODEC_H_	qtextcodec.h	13;"	d
__QTHREAD_H_	qthread.h	13;"	d
__QTRIETREE_H_	qtrietree.h	12;"	d
__QUDPSOCKET_H_	qudpsocket.h	13;"	d
__QVECTOR_H_	qvector.h	13;"	d
__QWORDTOKENIZER_H_	qwordtokenizer.h	13;"	d
__QZLIBMANAGER_H_	qzlibmanager.h	13;"	d
__RL	qmd5file.h	27;"	d
__cluster_cpu_ratio	qlbcluster.h	/^		typedef struct __cluster_cpu_ratio$/;"	s	class:QLBCluster
__error_str	qshinyxml.h	/^		char __error_str[DEFAULT_ERROR_SIZE];$/;"	m	class:QShinyXML
__glibc_reserved	qglobal.h	/^			u_int16_t	__glibc_reserved;$/;"	m	struct:icmphdr::__anon1::__anon3
__int64_c	qglobal.h	248;"	d
__is_whitespace	qshinyxml.h	/^		bool __is_whitespace(const char ch)$/;"	f	class:QShinyXML
__item_len	qshinyxml.h	/^		int32_t __item_len;$/;"	m	class:ShinyNode
__label_len	qshinyxml.h	/^		int32_t __label_len;$/;"	m	class:ShinyNode
__max_node_size	qshinyxml.h	/^		int32_t __max_node_size;$/;"	m	class:QShinyXML
__now_node_size	qshinyxml.h	/^		int32_t __now_node_size;$/;"	m	class:QShinyXML
__num	qfunc.h	/^static inline int32_t __num(int32_t* num, char* pos, int32_t len)$/;"	f
__org_info	qalgorithm.h	/^		typedef struct __org_info {$/;"	s	class:QQSParallel
__parse_xml_item	qshinyxml.h	/^		int32_t __parse_xml_item(const char* __ptr_pack, int32_t __pack_len, ShinyNode* __ptr_node)$/;"	f	class:QShinyXML
__ptr_item	qshinyxml.h	/^		char* __ptr_item;$/;"	m	class:ShinyNode
__ptr_label	qshinyxml.h	/^		char* __ptr_label;$/;"	m	class:ShinyNode
__ptr_node_array	qshinyxml.h	/^		ShinyNode* __ptr_node_array;$/;"	m	class:QShinyXML
__ptr_text	qshinyxml.h	/^		char* __ptr_text;$/;"	m	class:ShinyNode
__regexp_info	qregexp.h	/^typedef struct __regexp_info$/;"	s
__server_cpu_info	qlbcluster.h	/^		typedef struct __server_cpu_info$/;"	s	class:QLBCluster
__server_info	qlbcluster.h	/^	__server_info() :$/;"	f	struct:__server_info
__server_info	qlbcluster.h	/^	__server_info(const __server_info& __si)$/;"	f	struct:__server_info
__server_info	qlbcluster.h	/^typedef struct __server_info$/;"	s
__set_error	qshinyxml.h	/^		void __set_error(const char* format, ...)$/;"	f	class:QShinyXML
__sort_info	qalgorithm.h	/^		typedef struct __sort_info {$/;"	s	class:QQSParallel
__spelling_info	qchinesespelling.h	/^	__spelling_info() :$/;"	f	struct:__spelling_info
__spelling_info	qchinesespelling.h	/^typedef struct __spelling_info {$/;"	s
__spelling_node	qchinesespelling.h	/^	__spelling_node() {$/;"	f	struct:__spelling_node
__spelling_node	qchinesespelling.h	/^typedef struct __spelling_node {$/;"	s
__text_len	qshinyxml.h	/^		int32_t __text_len;$/;"	m	class:ShinyNode
__uint64_c	qglobal.h	249;"	d
_allocated	tinyxml2.h	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray
_attributePool	tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument
_blockPtrs	tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT
_buffer	tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter
_charBuffer	tinyxml2.h	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument
_closingType	tinyxml2.h	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement
_commentPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument
_compactMode	tinyxml2.h	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter
_currentAllocs	tinyxml2.h	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT
_depth	tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter
_document	tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode
_elementJustOpened	tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter
_elementPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument
_end	tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair
_entityFlag	tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_errorID	tinyxml2.h	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument
_errorNames	tinyxml2.cpp	/^const char* XMLDocument::_errorNames[XML_ERROR_COUNT] = {$/;"	m	class:tinyxml2::XMLDocument	file:
_errorNames	tinyxml2.h	/^	static const char* _errorNames[XML_ERROR_COUNT];$/;"	m	class:tinyxml2::XMLDocument
_errorStr1	tinyxml2.h	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument
_errorStr2	tinyxml2.h	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument
_firstChild	tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode
_firstElement	tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter
_flags	tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair
_fp	tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter
_isCData	tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText
_lastChild	tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode
_maxAllocs	tinyxml2.h	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT
_md5_struct	qmd5file.h	/^	typedef struct _md5_struct$/;"	s	class:QMD5File
_mem	tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray
_memPool	tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode
_memPool	tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute
_nAllocs	tinyxml2.h	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT
_nUntracked	tinyxml2.h	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT
_name	tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute
_next	tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute
_next	tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode
_node	tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle
_node	tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle
_parent	tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode
_pool	tinyxml2.h	/^    T   _pool[INITIAL_SIZE];$/;"	m	class:tinyxml2::DynArray
_prev	tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode
_processEntities	tinyxml2.h	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument
_processEntities	tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter
_restrictedEntityFlag	tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_root	tinyxml2.h	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT
_rootAttribute	tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement
_size	tinyxml2.h	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray
_stack	tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter
_start	tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair
_textDepth	tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter
_textPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument
_threadepilog	qthread.h	/^		void _threadepilog()$/;"	f	class:QThread
_threadproc	qthread.h	/^		static uint32_t __stdcall _threadproc(void* arg)$/;"	f	class:QThread
_value	tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode
_value	tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute
_whitespace	tinyxml2.h	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument
_writeBOM	tinyxml2.h	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument
accept	qhttpserver.h	/^	struct slice_t	accept;				\/\/ HTTP客户端接收数据类型$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
accept_encoding	qhttpserver.h	/^	struct slice_t	accept_encoding;		\/\/ HTTP客户端接收编码类型$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
accept_language	qhttpserver.h	/^	struct slice_t	accept_language;		\/\/ HTTP客户端接收语言类型$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
ack	qglobal.h	/^		ack:1,$/;"	m	struct:tcphdr
ack_seq	qglobal.h	/^	__be32	ack_seq;$/;"	m	struct:tcphdr
acquireObject	qobjectpool.h	/^		T_TYPE* acquireObject()$/;"	f	class:QObjectPool
add	qlist.h	/^		int32_t add(const T_TYPE& data)$/;"	f	class:QForwardList
addDays	qdatetime.h	/^		QDate addDays(int64_t days) const$/;"	f	class:QDate
addKey	qdenseindexmanager.h	/^		int32_t addKey(uint64_t key, void* vpData, int32_t iDataLen)$/;"	f	class:QDenseIndexManager
addKey_FL	qdiskcache.h	/^		int32_t addKey_FL(Key key, void* vpData=NULL, void** vppRetBuf=NULL, int32_t iIndex=-1)$/;"	f	class:QDiskCache
addKey_FL	qhashsearch.h	/^		int32_t addKey_FL(Key key, void* vpData=NULL, void** vppRetBuf=NULL, int32_t iIndex=-1)$/;"	f	class:QHashSearch
addKey_FL	qstoremanager.h	/^		int32_t addKey_FL(uint64_t key, void* vpData=NULL)$/;"	f	class:QStoreManager
addKey_VL	qdiskcache.h	/^		int32_t addKey_VL(Key key, void* vpData, int32_t data_len, void** vppRetBuf, int32_t* lpRetDataLen)$/;"	f	class:QDiskCache
addKey_VL	qhashsearch.h	/^		int32_t addKey_VL(Key key, void* vpData, int32_t data_len, void** vppRetBuf, int32_t* lpRetDataLen)$/;"	f	class:QHashSearch
addKey_VL	qstoremanager.h	/^		int32_t addKey_VL(uint64_t key, void* vpData, int32_t iDataLen)$/;"	f	class:QStoreManager
addLatencySample	qlatency.h	/^		int32_t addLatencySample(uint64_t event_id, uint32_t latency)$/;"	f	class:QLatency
addMSecs	qdatetime.h	/^		QTime addMSecs(int32_t ms) const$/;"	f	class:QTime
addRecipient	qmailsender.h	/^		void addRecipient(const std::string& mailTo)$/;"	f	class:QMailSender
addRecipient	qmailsender.h	/^		void addRecipient(std::list<std::string> recipientList)$/;"	f	class:QMailSender
addSecs	qdatetime.h	/^		QTime addSecs(int32_t secs) const$/;"	f	class:QTime
add_socket_to_epoll	qhttpserver.h	/^		int32_t add_socket_to_epoll(int32_t fd, bool nonblocking=true)$/;"	f	class:QHttpServer
adj	qadjgraph.h	/^	Edge<Type>* adj;$/;"	m	struct:Vertex
adjust	qqueue.h	/^		void adjust()$/;"	f	class:QPriorityQueue
adlist	qadlist.h	/^typedef struct adlist {$/;"	s
adlist	qadlist.h	/^} adlist;$/;"	t	typeref:struct:adlist
alloc	qallocator.cc	/^char* QAllocator::alloc(int64_t allocLen)$/;"	f	class:QAllocator
alloc	qallocator.cc	/^char* QPoolAllocator::alloc()$/;"	f	class:QPoolAllocator
alloc	qbitmap.h	/^		bool alloc(const uint32_t item_count, const bool set_flag)$/;"	f	class:QBitMap
allocate	qbytearray.h	/^		char* allocate(uint32_t size) const$/;"	f	class:QByteArray
allocateChunk	qobjectpool.h	/^		void allocateChunk() throw(std::bad_alloc)$/;"	f	class:QObjectPool
allocator_	qlist.h	/^		QPoolAllocator allocator_;$/;"	m	class:QForwardList
allocator_	qstridallocator.h	/^		QAllocator	allocator_;$/;"	m	class:QStrIDAllocator
allocator_FL_	qdiskcache.h	/^		QPoolAllocator*		allocator_FL_;		\/\/ 定长数据内存池$/;"	m	class:QDiskCache
allocator_FL_	qhashsearch.h	/^		QPoolAllocator*		allocator_FL_;		\/\/ 定长数据内存池$/;"	m	class:QHashSearch
allocator_VL_	qdiskcache.h	/^		QAllocator*		allocator_VL_;		\/\/ 变长数据内存池$/;"	m	class:QDiskCache
allocator_VL_	qhashsearch.h	/^		QAllocator*		allocator_VL_;		\/\/ 变长数据内存池$/;"	m	class:QHashSearch
append	qglobal.h	/^		void append(const char character)$/;"	f	class:QStringBuffer
append	qglobal.h	/^		void append(const char* str, int32_t len=-1)$/;"	f	class:QStringBuffer
append	qglobal.h	/^		void append(const int32_t value)$/;"	f	class:QStringBuffer
append	qglobal.h	/^		void append(const int64_t value)$/;"	f	class:QStringBuffer
append	qstring.h	/^		QString& append(const QString& object)$/;"	f	class:QString
append	qstring.h	/^		QString& append(const char* str, int32_t len=-1)$/;"	f	class:QString
arch_bits_	qtcpsocket.h	/^		uint32_t        arch_bits_;$/;"	m	class:QTcpServer
ascii_logo	qasciilogo.h	/^static const char* ascii_logo =$/;"	v
assign	qbytearray.h	/^		QByteArray& assign(const char* data, uint32_t offset, uint32_t size)$/;"	f	class:QByteArray
assign	qvector.h	/^		void assign(int32_t pos, T_TYPE& item)$/;"	f	class:QVector
at	qstring.h	/^		const QChar at(int32_t i) const$/;"	f	class:QString
at	qvector.h	/^		T_TYPE& at(int32_t pos) const$/;"	f	class:QVector
atEnd	qfile.cc	/^bool QFile::atEnd()$/;"	f	class:QFile
author	qdictcreator.h	/^	uint64_t author;$/;"	m	struct:dictInfo
author	qneologismrecognizer.h	/^			uint64_t author;$/;"	m	struct:QNeologismRecognizer::dictInfo
author	qservice.cc	/^void QService::author()$/;"	f	class:QService
author	qwordtokenizer.h	/^	uint64_t author;$/;"	m	struct:dictInfo
autofree	qthread.h	/^		int32_t autofree;$/;"	m	class:QThread
average	qlatency.h	/^		uint32_t average;		\/* Average of curret samples *\/$/;"	m	class:QLatency
bWord	qtrietree.h	/^	uint8_t		bWord;	\/* be a word *\/$/;"	m	struct:QTrieNode
backup_file	qtcpsocket.cc	/^int32_t QTcpServer::backup_file(const char* ptr_file, char* ptr_buf, int32_t buf_size)$/;"	f	class:QTcpServer
baseHeader	qtcpsocket.h	/^struct baseHeader {$/;"	s
baseName	qfile.cc	/^std::string QFile::baseName() const$/;"	f	class:QFile
beg	qalgorithm.h	/^			int32_t beg;$/;"	m	struct:QQSParallel::__sort_info
binaryStringToUint64	qsimhasher.cc	/^uint64_t QSimHasher::binaryStringToUint64(const std::string& bin)$/;"	f	class:QSimHasher
bit	qbitmap.h	/^		bool bit(const uint32_t pos) const$/;"	f	class:QBitMap
bit	qbitmap.h	/^		bool bit(const uint32_t x)$/;"	f	class:QBitMap2
bit	qbitmap.h	/^		inline bool bit(uint8_t bit_num) const$/;"	f	class:QBITS16
blur	qopencv.h	/^static int blur(const char* fileName, const char* newFileName)$/;"	f
bool8_t	qglobal.h	/^typedef bool bool8_t;			\/\/ 8 bit unsigned$/;"	t
bucket	qhashmap.h	/^		uint32_t bucket(const key_type& key)$/;"	f	class:QHashMap2
bucket	qhashmap.h	/^		uint32_t bucket(const key_type& x)$/;"	f	class:QHashMap
bucket_size	qhashmap.h	/^		int32_t bucket_size() const$/;"	f	class:QLinearHash
bucket_size	qhashmap.h	/^		uint32_t bucket_size() const$/;"	f	class:QHashMap
bucket_size	qhashmap.h	/^		uint32_t bucket_size() const$/;"	f	class:QHashMap2
bucket_size_	qdiskcache.h	/^		int32_t			bucket_size_;		\/\/ 缓存类桶的大小$/;"	m	class:QDiskCache
bucket_size_	qhashsearch.h	/^		int32_t			bucket_size_;		\/\/ 哈希表桶的大小$/;"	m	class:QHashSearch
buf_size	qhttpserver.h	/^	int32_t		buf_size;			\/\/ 线程中使用内存大小$/;"	m	struct:thread_info_t
buf_size	qtcpsocket.h	/^	int32_t		buf_size;$/;"	m	struct:threadInfo
buffer	qmd5.h	/^		unsigned char buffer[64];  \/* input buffer *\/$/;"	m	struct:QMD5::__anon6
buffer_	qdatastream.h	/^		QBuffer buffer_;$/;"	m	class:QDataStream
buffer_	qglobal.h	/^		char* buffer_;$/;"	m	class:QStringBuffer
buffer_	qhttpclient.h	/^		QStringBuffer	buffer_;			\/\/ HTTP协议请求头信息缓存区$/;"	m	class:QHttpRequestHeader
byte_buffer_	qzlibmanager.h	/^		uint8_t* byte_buffer_;$/;"	m	class:QZlibManager
cJSON	cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	cJSON.h	132;"	d
cJSON_AddFalseToObject	cJSON.h	131;"	d
cJSON_AddItemReferenceToArray	cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	cJSON.h	129;"	d
cJSON_AddNumberToObject	cJSON.h	133;"	d
cJSON_AddStringToObject	cJSON.h	134;"	d
cJSON_AddTrueToObject	cJSON.h	130;"	d
cJSON_Array	cJSON.h	37;"	d
cJSON_CreateArray	cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateStringArray	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	cJSON.h	32;"	d
cJSON_GetArrayItem	cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetObjectItem	cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_Hooks	cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_IsReference	cJSON.h	40;"	d
cJSON_Minify	cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	cJSON.h	34;"	d
cJSON_New_Item	cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	cJSON.h	35;"	d
cJSON_Object	cJSON.h	38;"	d
cJSON_Parse	cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}$/;"	f
cJSON_PrintUnformatted	cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}$/;"	f
cJSON_ReplaceItemInArray	cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	cJSON.h	137;"	d
cJSON_String	cJSON.h	36;"	d
cJSON_True	cJSON.h	33;"	d
cJSON__h	cJSON.h	24;"	d
cJSON_free	cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
c_str	qstring.h	/^		char* c_str()$/;"	f	class:QString
c_str	qstring.h	/^		const char* c_str() const$/;"	f	class:QString
cache_interval_	qdiskcache.h	/^		int32_t			cache_interval_;	\/\/ 缓存备份间隔时间$/;"	m	class:QDiskCache
calCosineDistance	qdistance.h	/^		static double calCosineDistance(std::unordered_map<std::string, double>& c1, std::unordered_map<std::string, double>& c2)$/;"	f	class:QDistance
calL1Norm	qdistance.h	/^		static double calL1Norm(std::unordered_map<std::string, double>& c1, std::unordered_map<std::string, double>& c2)$/;"	f	class:QDistance
calL2Norm	qdistance.h	/^		static double calL2Norm(std::unordered_map<std::string, double>& c1, std::unordered_map<std::string, double>& c2)$/;"	f	class:QDistance
calLInfiniteNorm	qdistance.h	/^		static double calLInfiniteNorm(std::unordered_map<std::string, double>& c1, std::unordered_map<std::string, double>& c2)$/;"	f	class:QDistance
calMinEditDistance	qdistance.h	/^		static inline int32_t calMinEditDistance(char* str1, int32_t str1_len, char* str2, int32_t str2_len)$/;"	f	class:QDistance
calRun	qlogicalparser.cc	/^int32_t QLogicalParser::calRun(const std::string& key, const std::vector<std::string>& meanings, const std::vector<std::string>& v)$/;"	f	class:QLogicalParser
calc	qjaccardsimilarity.h	/^		static double calc(const std::list<uint64_t>& list1, const std::list<uint64_t>& list2)$/;"	f	class:QJaccardSimilarity
calculateSimHash	qsimhasher.cc	/^int32_t QSimHasher::calculateSimHash(const std::vector< std::pair<std::string, double> >& wordWeights, uint64_t& simVal)$/;"	f	class:QSimHasher
calculateWordProbability	qneologismrecognizer.h	/^		double calculateWordProbability(const char* pszWord, int32_t iWordLen)$/;"	f	class:QNeologismRecognizer
calculate_server_weight	qlbcluster.h	/^		int32_t calculate_server_weight(CLUSTER_CPU_RATIO* ccr, SERVER_CPU_INFO* sci, int32_t* server_weight)$/;"	f	class:QLBCluster
call_back_	qsocketpool.cc	/^QSocketPool* QSocketPool::call_back_=NULL;$/;"	m	class:QSocketPool	file:
call_back_	qsocketpool.h	/^		static QSocketPool*	call_back_;		\/\/ QSocketPool类回调静态指针成员$/;"	m	class:QSocketPool
callfopen	tinyxml2.cpp	/^static FILE* callfopen( const char* filepath, const char* mode )$/;"	f	namespace:tinyxml2
cancelByteOrderMark	qstring.h	/^		int32_t cancelByteOrderMark(char* pszBuffer, int32_t iLength)$/;"	f	class:QString
cancelEnter	qconfigreader.h	/^		uint32_t cancelEnter(char* pBuffer, uint32_t bufferLength)$/;"	f	class:QConfigReader
cancelEnter	qregexp.h	/^		uint32_t cancelEnter(char* buffer, uint32_t length)$/;"	f	class:QRegExp2
canny	qopencv.h	/^static int canny(const char* fileName, const char* newFileName)$/;"	f
chdir	qdir.cc	/^bool QDir::chdir(const char* path)$/;"	f	class:QDir
check	qglobal.h	/^	__sum16	check;$/;"	m	struct:iphdr
check	qglobal.h	/^	__sum16	check;$/;"	m	struct:tcphdr
check	qglobal.h	/^	__sum16	check;$/;"	m	struct:udphdr
checksum	qglobal.h	/^	u_int16_t checksum;$/;"	m	struct:icmphdr
checksum	qglobal.h	/^	unsigned short checksum;$/;"	m	struct:HeadIP
child	cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
chmod777	qdir.cc	/^bool QDir::chmod777()$/;"	f	class:QDir
chmod777	qdir.cc	/^bool QDir::chmod777(const char* dirpath)$/;"	f	class:QDir
chunk	tinyxml2.h	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block
chunk_queue_	qtcpsocket.h	/^		QQueue<clientInfo*>* chunk_queue_;$/;"	m	class:QTcpServer
cleanup	qthread.h	/^		virtual void cleanup()$/;"	f	class:QThread
clear	qbitmap.h	/^		inline void clear()$/;"	f	class:QBitMap
clear	qbitmap.h	/^		void clear()$/;"	f	class:QBitMap2
clear	qbuffer.h	/^		inline void clear()$/;"	f	class:QBuffer
clear	qdatastream.h	/^		void clear()$/;"	f	class:QDataStream
clear	qdiskcache.h	/^		int32_t clear()$/;"	f	class:QDiskCache
clear	qglobal.h	/^		inline void clear()$/;"	f	class:QStringBuffer
clear	qhashmap.h	/^		void clear()$/;"	f	class:QHashMap2
clear	qhashmap.h	/^		void clear()$/;"	f	class:QLinearHash
clear	qhashsearch.h	/^		int32_t clear()$/;"	f	class:QHashSearch
clear	qheap.h	/^		void clear()$/;"	f	class:QMaxHeap
clear	qheap.h	/^		void clear()$/;"	f	class:QMinHeap
clear	qlist.h	/^		void clear()$/;"	f	class:QList
clear	qlogicalparser.cc	/^void QLogicalParser::clear()$/;"	f	class:QLogicalParser
clear	qobjectpool.h	/^		void clear()$/;"	f	class:QObjectPool
clear	qqueue.h	/^		inline void clear()$/;"	f	class:QQueue
clear	qqueue.h	/^		void clear()$/;"	f	class:QListQueue
clear	qqueue.h	/^		void clear()$/;"	f	class:QPriorityQueue
clear	qregexp.h	/^		void clear()$/;"	f	class:QRegExp
clear	qregexp.h	/^	void clear() {$/;"	f	struct:__regexp_info
clear	qshinyxml.h	/^		void clear()$/;"	f	class:ShinyNode
clear	qstack.h	/^		inline void clear()$/;"	f	class:QStack
clear	qstring.h	/^		inline void clear()$/;"	f	class:QString
clear	qvector.h	/^		void clear()$/;"	f	class:QVector
clientInfo	qtcpsocket.h	/^	clientInfo() :$/;"	f	struct:clientInfo
clientInfo	qtcpsocket.h	/^struct clientInfo {$/;"	s
client_ip	qtcpsocket.h	/^	char            client_ip[TCP_DEFAULT_IP_SIZE];$/;"	m	struct:clientInfo
client_port	qtcpsocket.h	/^	int32_t         client_port;$/;"	m	struct:clientInfo
client_queue_	qtcpsocket.h	/^		QQueue<clientInfo*>* client_queue_;$/;"	m	class:QTcpServer
client_reply_size_	qtcpsocket.h	/^		int32_t         client_reply_size_;$/;"	m	class:QTcpServer
client_request_size_	qtcpsocket.h	/^		int32_t         client_request_size_;$/;"	m	class:QTcpServer
client_sock	qtcpsocket.h	/^	Q_SOCKET_T      client_sock;$/;"	m	struct:clientInfo
client_sock_	qhttpclient.h	/^		Q_SOCKET_T		client_sock_;		\/\/ 通信socket文件描述符$/;"	m	class:QHttpClient
client_sock_	qsocketpool.h	/^		Q_SOCKET_T	client_sock_;		\/\/ SOCKET连接套接字$/;"	m	class:QClientSocket
client_trigger_	qtcpsocket.h	/^		QTrigger*       client_trigger_;$/;"	m	class:QTcpServer
close	qsocketpool.h	/^		void close()$/;"	f	class:QClientSocket
close	qudpsocket.h	/^		int32_t close()$/;"	f	class:QUdpServer
close	qudpsocket.h	/^		int32_t close(void* handle)$/;"	f	class:QUdpClient
closedir	qdir.cc	/^bool QDir::closedir()$/;"	f	class:QDir
cluster_connection_ratio	qlbcluster.h	/^			float64_t	cluster_connection_ratio;	\/\/ 集群TCP连接指标权重系数$/;"	m	struct:QLBCluster::__cluster_cpu_ratio
cluster_disk_ratio	qlbcluster.h	/^			float64_t	cluster_disk_ratio;		\/\/ 集群磁盘信息指标权重系数$/;"	m	struct:QLBCluster::__cluster_cpu_ratio
cluster_expect_ratio	qlbcluster.h	/^			float64_t	cluster_expect_ratio;		\/\/ 集群服务器期待利用率$/;"	m	struct:QLBCluster::__cluster_cpu_ratio
cluster_load_ratio	qlbcluster.h	/^			float64_t	cluster_load_ratio;		\/\/ 集群负载均值指标权重系数$/;"	m	struct:QLBCluster::__cluster_cpu_ratio
cluster_memory_ratio	qlbcluster.h	/^			float64_t	cluster_memory_ratio;		\/\/ 集群内存信息指标权重系数$/;"	m	struct:QLBCluster::__cluster_cpu_ratio
cluster_process_ratio	qlbcluster.h	/^			float64_t	cluster_process_ratio;		\/\/ 集群进程信息指标权重系数$/;"	m	struct:QLBCluster::__cluster_cpu_ratio
code	qglobal.h	/^	u_int8_t code;$/;"	m	struct:icmphdr
codecFromContentType	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::codecFromContentType(const char* content_type)$/;"	f	class:QNetworkAccessManager
color	qredblacktree.h	/^	NODE_COLOR color;			\/\/ 结点颜色$/;"	m	struct:RBNode
combine	qdictcreator.cc	/^int32_t QDictCreator::combine(const char* pszInFileName, const char* pszInCustomFileName)$/;"	f	class:QDictCreator
comm_buffer_size	qhttpserver.h	/^	int32_t		comm_buffer_size;		\/\/ 通信线程所使用内存大小$/;"	m	struct:config_info_t
comm_buffer_size_	qtcpsocket.h	/^		int32_t         comm_buffer_size_;$/;"	m	class:QTcpServer
comm_thread	qhttpserver.h	/^		static Q_THREAD_T comm_thread(void* ptr_info)$/;"	f	class:QHttpServer
comm_thread	qtcpsocket.cc	/^Q_THREAD_T QTcpServer::comm_thread(void* ptr_info)$/;"	f	class:QTcpServer
comm_thread_max	qhttpserver.h	/^	int32_t		comm_thread_max;		\/\/ 通信线程数$/;"	m	struct:config_info_t
comm_thread_max_	qtcpsocket.h	/^		int32_t	        comm_thread_max_;$/;"	m	class:QTcpServer
comm_thread_timeout	qhttpserver.h	/^	int32_t		comm_thread_timeout;		\/\/ 通信线程监控超时时间$/;"	m	struct:config_info_t
comm_thread_timeout_	qtcpsocket.h	/^		int32_t         comm_thread_timeout_;$/;"	m	class:QTcpServer
command_type	qtcpsocket.h	/^	uint16_t	command_type;$/;"	m	struct:replyHeader
command_type	qtcpsocket.h	/^	uint16_t	command_type;$/;"	m	struct:replyParam
command_type	qtcpsocket.h	/^	uint16_t	command_type;$/;"	m	struct:requestHeader
command_type	qtcpsocket.h	/^	uint16_t	command_type;$/;"	m	struct:requestParam
command_type_	qtcpsocket.h	/^		uint16_t	command_type_;$/;"	m	class:QTcpClient
communicate	qudpsocket.h	/^		int32_t communicate(void* handle, char* send_buf, int32_t send_len, char* recv_buf, int32_t max_recv_size, int32_t& recv_len)$/;"	f	class:QUdpClient
compile	qregexp.h	/^		int32_t compile(const char* name, const char* pattern)$/;"	f	class:QRegExp3
compile	qregexp.h	/^		int32_t compile(const char* pattern, int32_t pattern_len)$/;"	f	class:QRegExp2
compile_from_file	qregexp.h	/^		int32_t compile_from_file(const char* pFileName)$/;"	f	class:QRegExp2
compress	qzlibmanager.h	/^		int32_t compress(uint8_t* src, uint64_t src_len, uint8_t* ptr_out, uint64_t max_out_size)$/;"	f	class:QZlibManager
cond	qglobal.h	/^		pthread_cond_t cond;$/;"	m	class:QTimedSem
cond	qglobal.h	/^		pthread_cond_t cond;$/;"	m	class:QTrigger
config_info_t	qhttpserver.h	/^struct config_info_t {$/;"	s
configfile_	qtcpsocket.h	/^		char*           configfile_;$/;"	m	class:QTcpServer
connList	qmysqlclient.h	/^		std::list<sql::Connection*> connList;$/;"	m	class:QMySQLClient
connect	qredisclient.h	/^		int32_t connect(const char* host = DEFAULT_REDIS_HOST, int16_t port = DEFAULT_REDIS_PORT)$/;"	f	class:QRedisClient
connect_	qredisclient.h	/^		redisContext* connect_;$/;"	m	class:QRedisClient
connect_to_server	qsocketpool.h	/^		int32_t connect_to_server(char* server_ip, uint16_t server_port, int32_t timeout=3000)$/;"	f	class:QClientSocket
connectionPool	qmysqlclient.cc	/^QMySQLClient* QMySQLClient::connectionPool=NULL;$/;"	m	class:QMySQLClient	file:
connectionPool	qmysqlclient.h	/^		static QMySQLClient *connectionPool;$/;"	m	class:QMySQLClient
connection_	qhttpclient.h	/^		std::string	connection_;			\/\/ 服务器连接状态$/;"	m	class:QHttpReplyHeader
connection_t	qhttpserver.h	/^enum connection_t {$/;"	g
contentCodec	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::contentCodec()$/;"	f	class:QNetworkAccessManager
content_encoding_	qhttpclient.h	/^		std::string	content_encoding_;		\/\/ 服务器返回数据编码$/;"	m	class:QHttpReplyHeader
content_length	qhttpserver.h	/^	uint32_t	content_length;			\/\/ HTTP协议响应内容长度$/;"	m	struct:io_data_t
content_length_	qhttpclient.h	/^		uint64_t	content_length_;		\/\/ 服务器返回内容长度$/;"	m	class:QHttpReplyHeader
content_type	qhttpserver.h	/^	enum content_type_t content_type;		\/\/ HTTP协议响应内容类型$/;"	m	struct:io_data_t	typeref:enum:io_data_t::content_type_t
content_type_	qhttpclient.h	/^		std::string	content_type_;			\/\/ 服务器返回数据类型$/;"	m	class:QHttpReplyHeader
content_type_t	qhttpserver.h	/^enum content_type_t {$/;"	g
copy	qbitmap.h	/^		bool copy(const uint32_t slot_count, const char* bitmap_data)$/;"	f	class:QBitMap
copy	qbytearray.h	/^		QByteArray& copy(const char* data, uint32_t offset, uint32_t size)$/;"	f	class:QByteArray
copy	qfile.cc	/^bool QFile::copy(const char* file_name)$/;"	f	class:QFile
copy	qfile.cc	/^bool QFile::copy(const char* file_name, const char* newName)$/;"	f	class:QFile
cost	qadjgraph.h	/^	double cost;$/;"	m	struct:Token
count	qglobal.h	/^		int32_t count;$/;"	m	class:QTimedSem
count	qmd5.h	/^		UINT4 count[2];            \/* number of bits, modulo 2^64 (lsb first) *\/$/;"	m	struct:QMD5::__anon6
count	qredblacktree.h	/^	int32_t count;				\/\/ 计数(增加与删除结点时修改计数, 当计数为0时做物理删除)$/;"	m	struct:RBNode
cpu_interval_	qlbcluster.h	/^		int32_t			cpu_interval_;		\/\/ 集群服务器CPU查询间隔时间(5-20s为宜)$/;"	m	class:QLBCluster
cpu_ratio_	qlbcluster.h	/^		CLUSTER_CPU_RATIO*	cpu_ratio_;		\/\/ 集群服务器负载参数系数$/;"	m	class:QLBCluster
crc16	qcrc.h	/^static uint16_t crc16(const char *buf, int len)$/;"	f
crc16tab	qcrc.h	/^static const uint16_t crc16tab[256]= {$/;"	v
crc32	qcrc.h	/^static inline uint32_t crc32(uint32_t crc, const void *buf, size_t size)$/;"	f
crc32_tab	qcrc.h	/^static uint32_t crc32_tab[] = {$/;"	v
crc64	qcrc.h	/^static uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l)$/;"	f
crc64_tab	qcrc.h	/^static const uint64_t crc64_tab[256] = {$/;"	v
createConnection	qmysqlclient.cc	/^sql::Connection* QMySQLClient::createConnection()$/;"	f	class:QMySQLClient
createLatencyReport	qlatency.h	/^		int32_t createLatencyReport()$/;"	f	class:QLatency
createPidFile	qservice.cc	/^void QService::createPidFile(void)$/;"	f	class:QService
create_reference	cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
curSize	qmysqlclient.h	/^		int32_t curSize;$/;"	m	class:QMySQLClient
curl_handle_	qnetworkaccessmanager.h	/^		CURL*		curl_handle_;$/;"	m	class:QNetworkAccessManager
current_	qlist.h	/^		NodeInfo* current_;$/;"	m	class:QList
current_size	qregexp.h	/^		int32_t current_size;$/;"	m	class:QRegExp2
current_weight_	qlbcluster.h	/^		int32_t			current_weight_;	\/\/ 当前调度的权值$/;"	m	class:QLBCluster
cwr	qglobal.h	/^		cwr:1,$/;"	m	struct:tcphdr
cwr	qglobal.h	/^		cwr:1;$/;"	m	struct:tcphdr
d	qdatetime.h	/^		QDate d;$/;"	m	class:QDateTime
daddr	qglobal.h	/^	__be32	daddr;$/;"	m	struct:iphdr
daemonize	qservice.cc	/^int32_t QService::daemonize()$/;"	f	class:QService
data	qadjgraph.h	/^	Type data;$/;"	m	struct:Token
data	qipv4.h	/^			uint8_t data[4];$/;"	m	union:QIPv4Addr::__anon5
data	qqueue.h	/^			T_TYPE data;$/;"	m	struct:QListQueue::ListNode
data	qtcpsocket.h	/^	char*           data;$/;"	m	struct:networkReply
data	qwordtokenizer.h	/^	char* data;$/;"	m	struct:dataInfo
dataInfo	qwordtokenizer.h	/^	dataInfo(char* dataPtr=NULL, int32_t len=0) :$/;"	f	struct:dataInfo
dataInfo	qwordtokenizer.h	/^struct dataInfo {$/;"	s
data_	qbitmap.h	/^		char* data_;$/;"	m	class:QBitMap
data_	qbytearray.h	/^		char* data_;$/;"	m	class:QByteArray
data_	qlist.h	/^			T_TYPE data_;$/;"	m	struct:QForwardList::NodeInfo
data_	qlist.h	/^			T_TYPE data_;$/;"	m	struct:QList::NodeInfo
data_	qstack.h	/^		T_TYPE* data_;$/;"	m	class:QStack
data_	qvector.h	/^		T_TYPE* data_;$/;"	m	class:QVector
data_len_	qdiskcache.h	/^		int32_t			data_len_;		\/\/ 缓存类数据长度, 定长和变长标识$/;"	m	class:QDiskCache
data_len_	qhashsearch.h	/^		int32_t			data_len_;		\/\/ 哈希表数据长度, 定长和变长标识$/;"	m	class:QHashSearch
data_num_	qdiskcache.h	/^		int32_t			data_num_;		\/\/ 缓存类总元素数量$/;"	m	class:QDiskCache
data_num_	qhashsearch.h	/^		int32_t			data_num_;		\/\/ 哈希表总元素数量$/;"	m	class:QHashSearch
data_path_	qtcpsocket.h	/^		char*           data_path_;$/;"	m	class:QTcpServer
date	qdatetime.h	/^		QDate date() const$/;"	f	class:QDateTime
day	qdatetime.h	/^		int32_t day() const$/;"	f	class:QDate
dayNow_	qlogger.h	/^		int32_t		dayNow_;$/;"	m	class:QLogger
dayOfWeek	qdatetime.h	/^		int32_t dayOfWeek() const$/;"	f	class:QDate
dayOfYear	qdatetime.h	/^		int32_t dayOfYear() const$/;"	f	class:QDate
daysInMonth	qdatetime.h	/^		int32_t daysInMonth() const$/;"	f	class:QDate
daysInYear	qdatetime.h	/^		int32_t daysInYear() const$/;"	f	class:QDate
daysTo	qdatetime.h	/^		int64_t daysTo(const QDate& d) const$/;"	f	class:QDate
del	qredisclient.h	/^		int32_t del(const char* key)$/;"	f	class:QRedisClient
deleteKey	qdenseindexmanager.h	/^		int32_t deleteKey(uint64_t key)$/;"	f	class:QDenseIndexManager
deleteKey_FL	qdiskcache.h	/^		int32_t deleteKey_FL(Key key, int32_t iIndex=-1)$/;"	f	class:QDiskCache
deleteKey_FL	qhashsearch.h	/^		int32_t deleteKey_FL(Key key, int32_t iIndex=-1)$/;"	f	class:QHashSearch
deleteKey_FL	qstoremanager.h	/^		int32_t deleteKey_FL(uint64_t key)$/;"	f	class:QStoreManager
deleteKey_VL	qstoremanager.h	/^		int32_t deleteKey_VL(uint64_t key)$/;"	f	class:QStoreManager
delete_Key	qmemcachedclient.h	/^		int32_t delete_Key(const char* key, int32_t key_len)$/;"	f	class:QMemcachedClient
dest	qadjgraph.h	/^	int32_t dest;$/;"	m	struct:Edge
dest	qglobal.h	/^	__be16	dest;$/;"	m	struct:tcphdr
dest	qglobal.h	/^	__be16	dest;$/;"	m	struct:udphdr
destIP	qglobal.h	/^	unsigned int destIP;$/;"	m	struct:HeadIP
destroy	qbuffer.h	/^		inline void destroy()$/;"	f	class:QBuffer
destroy	qtrietree.cc	/^void QTrieTree::destroy(QTrieNode* current)$/;"	f	class:QTrieTree
destroyQMySQLClient	qmysqlclient.cc	/^void QMySQLClient::destroyQMySQLClient()$/;"	f	class:QMySQLClient
dictInfo	qdictcreator.h	/^struct dictInfo {$/;"	s
dictInfo	qneologismrecognizer.h	/^		struct dictInfo {$/;"	s	class:QNeologismRecognizer
dictInfo	qwordtokenizer.h	/^struct dictInfo {$/;"	s
dir_handle	qdir.h	/^			int32_t dir_handle;$/;"	m	struct:QDir::dir_travel_handle
dir_travel_handle	qdir.h	/^		typedef struct dir_travel_handle$/;"	s	class:QDir
direction	qadlist.h	/^	int32_t direction;$/;"	m	struct:listIter
dirpath_	qdir.h	/^		char dirpath_[DIR_DEFAULT_PATH_SIZE];$/;"	m	class:QDir
display_log_	qremotemonitor.h	/^		int32_t		display_log_;$/;"	m	class:QRemoteMonitor
doHttpDownload	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::doHttpDownload(const char* pUrl, const char* pFileName, int32_t iTimeOut)$/;"	f	class:QNetworkAccessManager
doHttpGet	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::doHttpGet(const char* pUrl, int32_t iTimeOut, char* pPage, int32_t iMaxPageSize)$/;"	f	class:QNetworkAccessManager
doHttpHeader	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::doHttpHeader(const char* pUrl, int32_t iTimeOut, char* pPage, int32_t iMaxPageSize)$/;"	f	class:QNetworkAccessManager
doHttpPost	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::doHttpPost(const char* pUrl, const char* pData, int32_t iTimeOut, char* pPage, int32_t iMaxPageSize)$/;"	f	class:QNetworkAccessManager
doOperator	qlogicalparser.cc	/^int32_t QLogicalParser::doOperator(const std::string& key, const std::vector<std::string>& meanings, const std::string& op)$/;"	f	class:QLogicalParser
doSort	qalgorithm.h	/^static void doSort(T_KEY* v1, T_KEY* v2, int32_t lBegin, int32_t lEnd)$/;"	f
doff	qglobal.h	/^		doff:4,$/;"	m	struct:tcphdr
doff	qglobal.h	/^	__u16	doff:4,$/;"	m	struct:tcphdr
drain	qbuffer.h	/^		inline int32_t drain(const uint64_t length)$/;"	f	class:QBuffer
drain	qdatastream.h	/^		inline int32_t drain(const int64_t length)$/;"	f	class:QDataStream
driver	qmysqlclient.h	/^		sql::Driver *driver;$/;"	m	class:QMySQLClient
dup	qadlist.h	/^	void *(*dup)(void *ptr);$/;"	m	struct:adlist
dwTime_1	qglobal.h	/^		DWORD dwTime_1, dwTime_2;$/;"	m	class:QStopwatch
dwTime_2	qglobal.h	/^		DWORD dwTime_1, dwTime_2;$/;"	m	class:QStopwatch
ece	qglobal.h	/^		ece:1,$/;"	m	struct:tcphdr
echo	qglobal.h	/^		} echo;$/;"	m	union:icmphdr::__anon1	typeref:struct:icmphdr::__anon1::__anon2
elapsed	qdatetime.h	/^		int32_t elapsed() const$/;"	f	class:QTime
elapsed	qglobal.h	/^		static int64_t elapsed()$/;"	f	class:QStopwatch
elapsed_ms	qglobal.h	/^		inline int32_t elapsed_ms()$/;"	f	class:QStopwatch
elapsed_s	qglobal.h	/^		inline int32_t elapsed_s()$/;"	f	class:QStopwatch
elapsed_us	qglobal.h	/^		inline int32_t elapsed_us()$/;"	f	class:QStopwatch
empty	qhashmap.h	/^		bool empty() const$/;"	f	class:QHashMap
empty	qhashmap.h	/^		bool empty() const$/;"	f	class:QHashMap2
empty	qhashmap.h	/^		bool empty() const$/;"	f	class:QLinearHash
empty	qheap.h	/^		inline bool empty() const$/;"	f	class:QMaxHeap
empty	qheap.h	/^		inline bool empty() const$/;"	f	class:QMinHeap
empty	qlist.h	/^		bool empty()$/;"	f	class:QList
empty	qqueue.h	/^		bool empty() const$/;"	f	class:QListQueue
empty	qqueue.h	/^		bool empty() const$/;"	f	class:QPriorityQueue
empty	qqueue.h	/^		inline bool empty()$/;"	f	class:QQueue
empty	qstack.h	/^		inline bool empty() const$/;"	f	class:QStack
empty	qstring.h	/^		inline bool empty() const$/;"	f	class:QString
empty	qvector.h	/^		bool empty() const$/;"	f	class:QVector
end	qalgorithm.h	/^			int32_t end;$/;"	m	struct:QQSParallel::__sort_info
endsWith	qstring.h	/^		bool endsWith(const QString& pat)$/;"	f	class:QString
endsWith	qstring.h	/^		bool endsWith(const char* str, int32_t len=-1)$/;"	f	class:QString
entities	tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
ep	cJSON.c	/^static const char *ep;$/;"	v	file:
erase	qhashmap.h	/^		void erase(const key_type& x)$/;"	f	class:QHashMap
erase	qhashmap.h	/^		void erase(const key_type& x)$/;"	f	class:QHashMap2
erase	qlbcluster.h	/^		void erase(int32_t pos)$/;"	f	class:QLBCluster
erase	qlist.h	/^		void erase()$/;"	f	class:QList
erase	qvector.h	/^		void erase(int32_t pos)$/;"	f	class:QVector
erode	qopencv.h	/^static int erode(const char* fileName, const char* newFileName)$/;"	f
errmsg_	qbytearray.h	/^				char errmsg_[MAX_ERROR_MSG_LEN];$/;"	m	class:QByteArray::out_of_range
error	qregexp.h	/^		char* error;$/;"	m	class:QRegExp
errorString	qfile.h	/^		inline std::string errorString() const$/;"	f	class:QFile
error_offset	qregexp.h	/^		int32_t error_offset;$/;"	m	class:QRegExp
error_string_	qfile.h	/^		std::string error_string_;$/;"	m	class:QFile
eventid_array	qlatency.h	/^		uint64_t* eventid_array;$/;"	m	class:QLatency
exec	qregexp.h	/^		int32_t exec(const char* src, int32_t src_len, int32_t pos_vec[], int32_t pos_vec_size)$/;"	f	class:QRegExp2
exec	qregexp.h	/^		int32_t exec(const char* src, int32_t src_len, std::vector<REGEXP_INFO>& regInfoVec)$/;"	f	class:QRegExp3
exec_looping	qregexp.h	/^		int32_t exec_looping(const char* src, int32_t src_len, int32_t& unit_size, int32_t pos_vec[], int32_t pos_vec_size)$/;"	f	class:QRegExp2
exists	qdir.cc	/^bool QDir::exists(const char* fileName)$/;"	f	class:QDir
exists	qfile.cc	/^bool QFile::exists() const$/;"	f	class:QFile
exists	qfile.cc	/^bool QFile::exists(const char* file_name)$/;"	f	class:QFile
exists	qredisclient.h	/^		int32_t exists(const char* key)$/;"	f	class:QRedisClient
exit_flag_	qtcpsocket.h	/^		bool            exit_flag_;$/;"	m	class:QTcpServer
expand	qbuffer.h	/^		inline void expand(const int64_t need)$/;"	f	class:QBuffer
expand	qdatastream.h	/^		void expand(const int64_t length)$/;"	f	class:QDataStream
expire	qredisclient.h	/^		int32_t expire(const char* key, int32_t timeout)$/;"	f	class:QRedisClient
extract	qsimhasher.cc	/^int32_t QSimHasher::extract(const std::string& text, int32_t topN, std::vector< std::pair<std::string, double> >& keywords)$/;"	f	class:QSimHasher
fileMode	qfile.cc	/^int32_t QFile::fileMode() const$/;"	f	class:QFile
file_handle	qdir.h	/^			struct _finddata_t file_handle;$/;"	m	struct:QDir::dir_travel_handle	typeref:struct:QDir::dir_travel_handle::_finddata_t
file_mutex_	qtcpsocket.h	/^		QMutexLock      file_mutex_;$/;"	m	class:QTcpServer
file_name	qfile.cc	/^std::string QFile::file_name() const$/;"	f	class:QFile
file_name_	qfile.h	/^		std::string file_name_;$/;"	m	class:QFile
fileno	qfile.cc	/^int32_t QFile::fileno()$/;"	f	class:QFile
fin	qglobal.h	/^		fin:1,$/;"	m	struct:tcphdr
fin	qglobal.h	/^		fin:1;$/;"	m	struct:tcphdr
find	qhashmap.h	/^		bool find(const key_type& x, T& v)$/;"	f	class:QHashMap
find	qhashmap.h	/^		bool find(const key_type& x, T& v)$/;"	f	class:QHashMap2
findByHash	qtrietree.cc	/^int32_t QTrieTree::findByHash(const char* pszKey, int32_t iKeyLen)$/;"	f	class:QTrieTree
findByIndex	qtrietree.cc	/^int32_t QTrieTree::findByIndex(const char* pszKey, int32_t iKeyLen)$/;"	f	class:QTrieTree
findElement	qhashmap.h	/^		typename std::list< std::pair<T_KEY, T> >::iterator findElement(const key_type& x, uint32_t& bucket) const$/;"	f	class:QHashMap
finished	qthread.h	/^		int32_t finished;$/;"	m	class:QThread
first	qtrietree.h	/^	QTrieNode*	first;	\/* first child *\/$/;"	m	struct:QTrieNode
firstByteMark	cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
first_	qlist.h	/^		NodeInfo* first_;$/;"	m	class:QList
flag	qalgorithm.h	/^			int32_t flag;$/;"	m	struct:QQSParallel::__org_info
flag	qtcpsocket.h	/^	int8_t		flag;$/;"	m	struct:threadInfo
float32_t	qglobal.h	/^typedef float float32_t;		\/\/ 32 bit float$/;"	t
float64_t	qglobal.h	/^typedef double float64_t;		\/\/ 64 bit double$/;"	t
for_worker	qhttpserver.h	/^	void*		for_worker;			\/\/ 工作线程专用$/;"	m	struct:thread_info_t
for_worker	qtcpsocket.h	/^	void*		for_worker;$/;"	m	struct:threadInfo
fp	qconfigreader.h	/^		FILE *fp;$/;"	m	class:QConfigReader
fpR	qneologismrecognizer.h	/^		FILE *fpR;$/;"	m	class:QNeologismRecognizer
fp_	qfile.h	/^		FILE* fp_;$/;"	m	class:QFile
frag	qglobal.h	/^		} frag;$/;"	m	union:icmphdr::__anon1	typeref:struct:icmphdr::__anon1::__anon3
frag_off	qglobal.h	/^	__be16	frag_off;$/;"	m	struct:iphdr
free	qadlist.h	/^	void (*free)(void *ptr);$/;"	m	struct:adlist
free	qallocator.cc	/^void QPoolAllocator::free(char* buffer)$/;"	f	class:QPoolAllocator
free	qbytearray.h	/^		void free()$/;"	f	class:QByteArray
freeAllocator	qallocator.cc	/^int64_t QAllocator::freeAllocator()$/;"	f	class:QAllocator
freeAllocator	qallocator.cc	/^void QPoolAllocator::freeAllocator()$/;"	f	class:QPoolAllocator
free_fn	cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
free_thread_info	qtcpsocket.cc	/^void QTcpServer::free_thread_info()$/;"	f	class:QTcpServer
front_	qqueue.h	/^		ListNode* front_;$/;"	m	class:QListQueue
front_	qqueue.h	/^		int32_t front_;$/;"	m	class:QQueue
full	qheap.h	/^		inline bool full() const$/;"	f	class:QMaxHeap
full	qheap.h	/^		inline bool full() const$/;"	f	class:QMinHeap
full	qqueue.h	/^		bool full() const$/;"	f	class:QListQueue
full	qqueue.h	/^		bool full() const$/;"	f	class:QPriorityQueue
full	qqueue.h	/^		inline bool full()$/;"	f	class:QQueue
fun_argv_	qremotemonitor.h	/^		void*		fun_argv_;$/;"	m	class:QRemoteMonitor
fun_state_	qremotemonitor.h	/^		int32_t		(*fun_state_)(void* argv);$/;"	m	class:QRemoteMonitor
gateway	qglobal.h	/^		u_int32_t	gateway;$/;"	m	union:icmphdr::__anon1
gbk2unicode	qtextcodec.h	/^		static void gbk2unicode(char* in_string, WCHAR* out_string)$/;"	f	class:QTextCodec
gbk2utf8	qtextcodec.h	/^		static void gbk2utf8(char* in_string, long in_strlen, char* out_string)$/;"	f	class:QTextCodec
gcd	qlbcluster.h	/^		int32_t gcd()$/;"	f	class:QLBCluster
generateWordGraph	qwordtokenizer.cc	/^int32_t QWordTokenizer::generateWordGraph(const char* pszText, int32_t iTextLen, QAdjGraph<dataInfo>* adjGraph)$/;"	f	class:QWordTokenizer
get	qbytearray.h	/^		QByteArray& get(std::string& v) throw(out_of_range)$/;"	f	class:QByteArray
get	qbytearray.h	/^		template<typename T> QByteArray& get(T& e) throw(out_of_range)$/;"	f	class:QByteArray
get	qbytearray.h	/^		template<typename T> T get() throw(out_of_range)$/;"	f	class:QByteArray
get	qbytearray.h	/^		virtual QByteArray& get(char* dst, uint32_t offset, uint32_t size) throw(out_of_range)$/;"	f	class:QByteArray
get	qlist.h	/^		int32_t get(T_TYPE& data)$/;"	f	class:QForwardList
get	qredisclient.h	/^		std::string get(const char* key)$/;"	f	class:QRedisClient
get1Operand	qlogicalparser.cc	/^bool QLogicalParser::get1Operand(int32_t& right)$/;"	f	class:QLogicalParser
get2Operands	qlogicalparser.cc	/^bool QLogicalParser::get2Operands(int32_t& left, int32_t& right)$/;"	f	class:QLogicalParser
getAllocLength	qallocator.cc	/^int64_t QAllocator::getAllocLength() const$/;"	f	class:QAllocator
getBuffer	qglobal.h	/^		char* getBuffer()$/;"	f	class:QStringBuffer
getBufferLength	qallocator.cc	/^int64_t QAllocator::getBufferLength() const$/;"	f	class:QAllocator
getChunkSize	qallocator.cc	/^int64_t QPoolAllocator::getChunkSize() const$/;"	f	class:QPoolAllocator
getConnection	qmysqlclient.cc	/^sql::Connection* QMySQLClient::getConnection()$/;"	f	class:QMySQLClient
getConnectiopn	qhttpclient.h	/^		const char* getConnectiopn() const$/;"	f	class:QHttpReplyHeader
getContentEncoding	qhttpclient.h	/^		const char* getContentEncoding() const$/;"	f	class:QHttpReplyHeader
getContentLength	qhttpclient.h	/^		int32_t getContentLength() const$/;"	f	class:QHttpReplyHeader
getContentType	qhttpclient.h	/^		const char* getContentType() const$/;"	f	class:QHttpReplyHeader
getDataNum	qtrietree.h	/^		int32_t getDataNum() const$/;"	f	class:QTrieTree
getDate	qdatetime.h	/^		void getDate(int32_t& y, int32_t& m, int32_t& d)$/;"	f	class:QDate
getDivisor	qhashmap.h	/^		int32_t getDivisor(int32_t m)$/;"	f	class:QLinearHash
getEdgeNumber	qadjgraph.h	/^		int32_t getEdgeNumber() const$/;"	f	class:QAdjGraph
getFieldDouble	qconfigreader.h	/^		int32_t getFieldDouble(const char* pFieldName, double& fieldValue)$/;"	f	class:QConfigReader
getFieldFloat	qconfigreader.h	/^		int32_t getFieldFloat(const char* pFieldName, float& fieldValue)$/;"	f	class:QConfigReader
getFieldInt16	qconfigreader.h	/^		int32_t getFieldInt16(const char* pFieldName, int16_t& fieldValue)$/;"	f	class:QConfigReader
getFieldInt32	qconfigreader.h	/^		int32_t getFieldInt32(const char* pFieldName, int32_t& fieldValue)$/;"	f	class:QConfigReader
getFieldInt64	qconfigreader.h	/^		int32_t getFieldInt64(const char* pFieldName, int64_t& fieldValue)$/;"	f	class:QConfigReader
getFieldInt8	qconfigreader.h	/^		int32_t getFieldInt8(const char* pFieldName, int8_t& fieldValue)$/;"	f	class:QConfigReader
getFieldString	qconfigreader.h	/^		int32_t getFieldString(const char* pFieldName, char* pFieldValue, int32_t fieldValueSize)$/;"	f	class:QConfigReader
getFieldString	qconfigreader.h	/^		int32_t getFieldString(const char* pFieldName, char*& pFieldValue)$/;"	f	class:QConfigReader
getFieldString	qconfigreader.h	/^		int32_t getFieldString(const char* pFieldName, std::string& fieldValue)$/;"	f	class:QConfigReader
getFieldTime	qconfigreader.h	/^		int32_t getFieldTime(const char* pFieldName, int32_t& hour, int32_t& minute, int32_t& second)$/;"	f	class:QConfigReader
getFieldUint16	qconfigreader.h	/^		int32_t getFieldUint16(const char* pFieldName, uint16_t& fieldValue)$/;"	f	class:QConfigReader
getFieldUint32	qconfigreader.h	/^		int32_t getFieldUint32(const char* pFieldName, uint32_t& fieldValue)$/;"	f	class:QConfigReader
getFieldUint64	qconfigreader.h	/^		int32_t getFieldUint64(const char* pFieldName, uint64_t& fieldValue)$/;"	f	class:QConfigReader
getFieldUint8	qconfigreader.h	/^		int32_t getFieldUint8(const char* pFieldName, uint8_t& fieldValue)$/;"	f	class:QConfigReader
getFieldYesNo	qconfigreader.h	/^		int32_t getFieldYesNo(const char* pFieldName, int32_t& fieldValue)$/;"	f	class:QConfigReader
getFirstNeighbor	qadjgraph.h	/^		int32_t getFirstNeighbor(const int32_t vertex) const$/;"	f	class:QAdjGraph
getHashValue	qdiskcache.h	/^		int32_t getHashValue(Key key)$/;"	f	class:QDiskCache
getHashValue	qhashsearch.h	/^		int32_t getHashValue(Key key)$/;"	f	class:QHashSearch
getHost	qhttpclient.h	/^		const char* getHost() const$/;"	f	class:QHttpRequestHeader
getImageSize	qopencv.h	/^static int getImageSize(const char* fileName, int* width, int* height)$/;"	f
getIndexMeaning	qgramtree.cc	/^int32_t QGramTree::getIndexMeaning(const std::string& gram, std::string& meaning)$/;"	f	class:QGramTree
getInstance	qlogger.cc	/^QLogger* QLogger::getInstance(const char* logPath, const char* prefix, uint32_t messageSize)$/;"	f	class:QLogger
getInstance	qmysqlclient.cc	/^QMySQLClient* QMySQLClient::getInstance(const char* url, const char* user, const char* passwd)$/;"	f	class:QMySQLClient
getKeyNum	qdiskcache.h	/^		int32_t getKeyNum() const$/;"	f	class:QDiskCache
getKeyNum	qhashsearch.h	/^		int32_t getKeyNum() const$/;"	f	class:QHashSearch
getMailFrom	qmailsender.h	/^		std::string getMailFrom() const$/;"	f	class:QMailSender
getPasswd	qmailsender.h	/^		std::string getPasswd() const$/;"	f	class:QMailSender
getPort	qhttpclient.h	/^		int32_t getPort() const$/;"	f	class:QHttpRequestHeader
getPort	qmailsender.h	/^		int32_t getPort() const$/;"	f	class:QMailSender
getPossibleLength	qtrietree.cc	/^std::vector<int32_t> QTrieTree::getPossibleLength(const char* pszSentence, int32_t iSentenceLen, int32_t offset)$/;"	f	class:QTrieTree
getRef	qbytearray.h	/^		QByteArray& getRef(int32_t index, const char* &dst, uint32_t size) throw(out_of_range)$/;"	f	class:QByteArray
getRef	qbytearray.h	/^		template<typename T> QByteArray& getRef(int32_t index, T* &dst) throw(out_of_range)$/;"	f	class:QByteArray
getRef	qbytearray.h	/^		template<typename T> QByteArray& getRef(int32_t index, const T* &dst) throw(out_of_range)$/;"	f	class:QByteArray
getReferer	qhttpclient.h	/^		const char* getReferer() const$/;"	f	class:QHttpRequestHeader
getReply	qtcpsocket.cc	/^int32_t QTcpClient::getReply(networkReply* reply)$/;"	f	class:QTcpClient
getSequenceProbability	qmarkovmodel.h	/^		double getSequenceProbability(int32_t* pszSequence, int32_t iSequenceNum)$/;"	f	class:QMarkovModel
getServer	qhttpclient.h	/^		const char* getServer() const$/;"	f	class:QHttpReplyHeader
getSmtpServer	qmailsender.h	/^		std::string getSmtpServer() const$/;"	f	class:QMailSender
getStatus	qhttpclient.h	/^		int32_t getStatus() const$/;"	f	class:QHttpReplyHeader
getSubImage	qopencv.h	/^static int getSubImage(const char* fileName, const char* newFileName, int x, int y, int width, int height)$/;"	f
getSurfFeature	qopencv.h	/^static int getSurfFeature(const char* fileName, const char* newFileName)$/;"	f
getToken	qadjgraph.h	/^		bool getToken(const int32_t vertex1, const int32_t vertex2, Token<Type>& inToken) const$/;"	f	class:QAdjGraph
getURL	qhttpclient.h	/^		const char* getURL() const$/;"	f	class:QHttpRequestHeader
getUser	qmailsender.h	/^		std::string getUser() const$/;"	f	class:QMailSender
getUserAgent	qhttpclient.h	/^		const char* getUserAgent() const$/;"	f	class:QHttpRequestHeader
getVariousMeanings	qgramparser.cc	/^void QGramParser::getVariousMeanings(const std::list< std::vector<std::string> >& listPOS, \\$/;"	f	class:QGramParser
getVersion	qhttpclient.h	/^		const char* getVersion() const$/;"	f	class:QHttpRequestHeader
getVersion	qocrmanager.h	/^		const char* getVersion() const$/;"	f	class:QOcrManager
getVertexEdgeCost	qadjgraph.h	/^		void getVertexEdgeCost(const int32_t vertex, std::vector<double>& distanceArray)$/;"	f	class:QAdjGraph
getVertexNumber	qadjgraph.h	/^		int32_t getVertexNumber() const$/;"	f	class:QAdjGraph
getVertexValue	qadjgraph.h	/^		int32_t getVertexValue(const int32_t vertex) const$/;"	f	class:QAdjGraph
get_Key_Value	qmemcachedclient.h	/^		int32_t get_Key_Value(const char* key, int32_t key_len, char*& value, int32_t& value_len)$/;"	f	class:QMemcachedClient
get_bucket_position	qstoremanager.h	/^		int64_t get_bucket_position(int32_t bucketIndex)$/;"	f	class:QStoreManager
get_buf_length	qbuffer.h	/^		inline int64_t get_buf_length() const$/;"	f	class:QBuffer
get_bytes	qdatastream.h	/^		int32_t get_bytes(void* data, const int64_t length)$/;"	f	class:QDataStream
get_bytes	qserialization.h	/^		static int32_t get_bytes(const char* data, const int64_t data_len, int64_t& pos, void* buf, const int64_t buf_length)$/;"	f	class:QSerialization
get_cluster	qlbcluster.h	/^		SERVER_INFO* get_cluster() const$/;"	f	class:QLBCluster
get_data	qbitmap.h	/^		inline char* get_data() const$/;"	f	class:QBitMap
get_data	qbuffer.h	/^		inline char* get_data() const$/;"	f	class:QBuffer
get_data	qdatastream.h	/^		char* get_data() const$/;"	f	class:QDataStream
get_data_length	qbuffer.h	/^		inline int64_t get_data_length() const$/;"	f	class:QBuffer
get_data_length	qdatastream.h	/^		int64_t get_data_length() const$/;"	f	class:QDataStream
get_disk_usage	qcpu.h	/^		int32_t get_disk_usage(const char* path, uint64_t* used_disk_bytes, uint64_t* total_disk_bytes)$/;"	f	class:QCPU
get_finished	qthread.h	/^		bool get_finished()$/;"	f	class:QThread
get_free	qbuffer.h	/^		inline char* get_free() const$/;"	f	class:QBuffer
get_free	qdatastream.h	/^		char* get_free() const$/;"	f	class:QDataStream
get_free_length	qbuffer.h	/^		inline int64_t get_free_length() const$/;"	f	class:QBuffer
get_free_length	qdatastream.h	/^		int64_t get_free_length() const$/;"	f	class:QDataStream
get_host	qipv4.h	/^		std::string get_host()$/;"	f	class:QIPv4Peer
get_host_by_addr	qipv4.h	/^		std::string get_host_by_addr(QIPv4Addr ip)$/;"	f	class:QIPv4Peer
get_host_by_name	qipv4.h	/^		QIPv4Addr get_host_by_name(const std::string& host)$/;"	f	class:QIPv4Peer
get_http_connection_string	qhttpserver.h	/^		const char* get_http_connection_string(connection_t keep_alive)$/;"	f	class:QHttpServer
get_http_content_type_string	qhttpserver.h	/^		const char* get_http_content_type_string(content_type_t content_type)$/;"	f	class:QHttpServer
get_http_method_string	qhttpserver.h	/^		const char* get_http_method_string(int32_t status)$/;"	f	class:QHttpServer
get_http_version_string	qhttpserver.h	/^		const char* get_http_version_string(version_t version)$/;"	f	class:QHttpServer
get_id	qthread.h	/^		pthread_id_t get_id()$/;"	f	class:QThread
get_int16	qdatastream.h	/^		int32_t get_int16(int16_t* value)$/;"	f	class:QDataStream
get_int16	qserialization.h	/^		static int32_t get_int16(const char* data, const int64_t data_len, int64_t& pos, int16_t* value)$/;"	f	class:QSerialization
get_int32	qdatastream.h	/^		int32_t get_int32(int32_t* value)$/;"	f	class:QDataStream
get_int32	qserialization.h	/^		static int32_t get_int32(const char* data, const int64_t data_len, int64_t& pos, int32_t* value)$/;"	f	class:QSerialization
get_int64	qdatastream.h	/^		int32_t get_int64(int64_t* value)$/;"	f	class:QDataStream
get_int64	qserialization.h	/^		static int32_t get_int64(const char* data, const int64_t data_len, int64_t& pos, int64_t* value)$/;"	f	class:QSerialization
get_int8	qdatastream.h	/^		int32_t get_int8(int8_t* value)$/;"	f	class:QDataStream
get_int8	qserialization.h	/^		static int32_t get_int8(const char* data, const int64_t data_len, int64_t& pos, int8_t* value)$/;"	f	class:QSerialization
get_ip	qipv4.h	/^		QIPv4Addr get_ip()$/;"	f	class:QIPv4Peer
get_ip	qipv4.h	/^		inline uint32_t get_ip() const$/;"	f	class:QIPv4Addr
get_item_count	qbitmap.h	/^		inline uint32_t get_item_count() const$/;"	f	class:QBitMap
get_load_average	qcpu.h	/^		int32_t get_load_average(float64_t* load_average)$/;"	f	class:QCPU
get_md5_string	qmd5file.h	/^	int32_t get_md5_string(char* file, char* md5_string)$/;"	f	class:QMD5File
get_mem_usage	qcpu.h	/^		int32_t get_mem_usage(uint64_t* used_mem_bytes, uint64_t* total_mem_bytes)$/;"	f	class:QCPU
get_port	qipv4.h	/^		int32_t get_port() const$/;"	f	class:QIPv4Peer
get_proc_num	qcpu.h	/^		int32_t get_proc_num(uint16_t* proc_num, float64_t* proc_ratio)$/;"	f	class:QCPU
get_processor_num	qcpu.h	/^		int32_t get_processor_num()$/;"	f	class:QCPU
get_random_buffer	qglobal.h	/^		void get_random_buffer(char* buf, int32_t len, const char* charset)$/;"	f	class:QRandom
get_random_float01	qglobal.h	/^		double get_random_float01()$/;"	f	class:QRandom
get_random_int32	qglobal.h	/^		int32_t get_random_int32(int32_t min, int32_t max)$/;"	f	class:QRandom
get_random_int64	qglobal.h	/^		int64_t get_random_int64(int64_t min, int64_t max)$/;"	f	class:QRandom
get_running	qthread.h	/^		bool get_running()$/;"	f	class:QThread
get_server	qlbcluster.h	/^		SERVER_INFO& get_server(int32_t pos)$/;"	f	class:QLBCluster
get_server	qlbcluster.h	/^		int32_t get_server(QScheduling sched=WeightedRoundRobin, uint64_t hash_key=0)$/;"	f	class:QLBCluster
get_server_DH	qlbcluster.h	/^		int32_t get_server_DH(uint64_t hash_key)$/;"	f	class:QLBCluster
get_server_RR	qlbcluster.h	/^		int32_t get_server_RR()$/;"	f	class:QLBCluster
get_server_SH	qlbcluster.h	/^		int32_t get_server_SH(uint64_t hash_key)$/;"	f	class:QLBCluster
get_server_WRR	qlbcluster.h	/^		int32_t get_server_WRR()$/;"	f	class:QLBCluster
get_set_count	qbitmap.h	/^		inline uint32_t get_set_count() const$/;"	f	class:QBitMap
get_signaled	qthread.h	/^		bool get_signaled()$/;"	f	class:QThread
get_slot_count	qbitmap.h	/^		inline uint32_t get_slot_count() const$/;"	f	class:QBitMap
get_socket_connection	qsocketpool.h	/^		QClientSocket* get_socket_connection()$/;"	f	class:QSocketPool
get_string	qdatastream.h	/^		int32_t get_string(const int64_t buf_length, char* str, int64_t& real_length)$/;"	f	class:QDataStream
get_string	qdatastream.h	/^		int32_t get_string(std::string& str)$/;"	f	class:QDataStream
get_string	qserialization.h	/^		static int32_t get_string(const char* data, const int64_t data_len, int64_t& pos, const int64_t str_buf_length, \\$/;"	f	class:QSerialization
get_string	qserialization.h	/^		static int32_t get_string(const char* data, const int64_t data_len, int64_t& pos, std::string& str)$/;"	f	class:QSerialization
get_string_length	qserialization.h	/^		static int64_t get_string_length(const char* str)$/;"	f	class:QSerialization
get_string_length	qserialization.h	/^		static int64_t get_string_length(const std::string& str)$/;"	f	class:QSerialization
get_thread_state	qtcpsocket.cc	/^int32_t QTcpServer::get_thread_state(void* ptr_info)$/;"	f	class:QTcpServer
getcwd	qdir.cc	/^char* QDir::getcwd(char* buf, int32_t size)$/;"	f	class:QDir
greg2jul	qdatetime.h	/^		uint32_t greg2jul(int32_t y, int32_t m, int32_t d) const$/;"	f	class:QDate
group	qlogger.h	/^	int32_t			group;$/;"	m	struct:QLoggerInfo
growBuffer	qglobal.h	/^		void growBuffer(int32_t size)$/;"	f	class:QStringBuffer
growStack	qstack.h	/^		void growStack(int32_t size)$/;"	f	class:QStack
gzip_compress	qzlibmanager.h	/^		int32_t gzip_compress(uint8_t* src, uint64_t src_len, uint8_t* ptr_out, uint64_t max_out_size)$/;"	f	class:QZlibManager
gzip_uncompress	qzlibmanager.h	/^		int32_t gzip_uncompress(uint8_t* src, uint64_t src_len, uint8_t* ptr_out, uint64_t max_out_size)$/;"	f	class:QZlibManager
handle	qglobal.h	/^		HANDLE handle;$/;"	m	class:QTimedSem
handle	qglobal.h	/^		HANDLE handle;$/;"	m	class:QTrigger
handle	qthread.h	/^		pthread_t handle;$/;"	m	class:QThread
handle_	qdir.h	/^		void* handle_;$/;"	m	class:QDir
hasNext	qlist.h	/^		bool hasNext()$/;"	f	class:QList
hasPrev	qlist.h	/^		bool hasPrev()$/;"	f	class:QList
hasdir	qfile.cc	/^bool QFile::hasdir() const$/;"	f	class:QFile
hasdir	qfile.cc	/^bool QFile::hasdir(const char* file_name)$/;"	f	class:QFile
hash	qhashmap.h	/^		int32_t hash(uint64_t hashKey)$/;"	f	class:QLinearHash
hash	qhashmap.h	/^		uint32_t hash(const T_KEY& key) const$/;"	f	class:DefaultHash
hash	qhashmap.h	/^		uint32_t hash(const std::string& key) const$/;"	f	class:DefaultHash
hashFactor	qtrietree.cc	/^int32_t QTrieTree::hashFactor(int32_t x)$/;"	f	class:QTrieTree
hashSearch	qwordtokenizer.h	/^		QHashSearch<uint64_t>*	hashSearch;$/;"	m	class:QWordTokenizer
hash_table_	qdiskcache.h	/^		char**			hash_table_;		\/\/ 内存缓存类$/;"	m	class:QDiskCache
hash_table_	qhashsearch.h	/^		char**			hash_table_;		\/\/ 内存哈希表$/;"	m	class:QHashSearch
head	qadlist.h	/^	listNode *head;$/;"	m	struct:adlist
headNum	qneologismrecognizer.h	/^			int32_t headNum;$/;"	m	struct:QNeologismRecognizer::htmInfo
headPbl	qneologismrecognizer.h	/^			double headPbl;$/;"	m	struct:QNeologismRecognizer::recordHeader
head_	qlist.h	/^		NodeInfo* head_;$/;"	m	class:QForwardList
header_size_	qtcpsocket.h	/^		int32_t         header_size_;$/;"	m	class:QTcpServer
headerlen	qglobal.h	/^	unsigned char headerlen:4;$/;"	m	struct:HeadIP
heapAdjust	qalgorithm.h	/^static void heapAdjust(T_KEY* v, int32_t size, int32_t i)$/;"	f
heap_	qheap.h	/^		T_TYPE* heap_;$/;"	m	class:QMaxHeap
heap_	qheap.h	/^		T_TYPE* heap_;$/;"	m	class:QMinHeap
heart_beat	qsocketpool.h	/^		static void heart_beat(int32_t signo)$/;"	f	class:QSocketPool
heart_beat_	qsocketpool.h	/^		bool8_t			heart_beat_;		\/\/ 是否激活心跳包机制$/;"	m	class:QSocketPool
heart_beat_interval_	qsocketpool.h	/^		int32_t			heart_beat_interval_;	\/\/ 心跳间隔时间$/;"	m	class:QSocketPool
heart_beat_now_	qsocketpool.h	/^		int32_t			heart_beat_now_;	\/\/ 心跳起始时间$/;"	m	class:QSocketPool
heart_beat_timer_	qsocketpool.h	/^		QWatchdog		heart_beat_timer_;	\/\/ 心跳计时器$/;"	m	class:QSocketPool
height	qredblacktree.h	/^		void height()$/;"	f	class:QRedBlackTree
help	qservice.cc	/^void QService::help()$/;"	f	class:QService
host	qhttpserver.h	/^	struct slice_t	host;				\/\/ HTTP协议服务器信息$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
host_	qhttpclient.h	/^		std::string	host_;				\/\/ HTTP请求HOST$/;"	m	class:QHttpRequestHeader
host_	qipv4.h	/^		std::string host_;$/;"	m	class:QIPv4Peer
hour	qdatetime.h	/^		int32_t hour() const$/;"	f	class:QTime
htmInfo	qneologismrecognizer.h	/^			htmInfo(int32_t iHeadNum=1, int32_t iTailNum=1, int32_t iMiddleNum=1) {$/;"	f	struct:QNeologismRecognizer::htmInfo
htmInfo	qneologismrecognizer.h	/^		struct htmInfo {$/;"	s	class:QNeologismRecognizer
hz_	qtcpsocket.h	/^		uint32_t        hz_;$/;"	m	class:QTcpServer
iLength	qstring.h	/^		int32_t iLength;$/;"	m	class:QString
iMaxSize	qstring.h	/^		int32_t iMaxSize;$/;"	m	class:QString
icmphdr	qglobal.h	/^struct icmphdr$/;"	s
id	qdictcreator.h	/^	uint64_t id;$/;"	m	struct:recordHeader
id	qglobal.h	/^			u_int16_t	id;$/;"	m	struct:icmphdr::__anon1::__anon2
id	qglobal.h	/^	__be16	id;$/;"	m	struct:iphdr
id	qglobal.h	/^	unsigned short id;$/;"	m	struct:HeadIP
id	qhttpserver.h	/^	int8_t		id;				\/\/ 线程序号id$/;"	m	struct:thread_info_t
id	qneologismrecognizer.h	/^			int32_t id;$/;"	m	struct:QNeologismRecognizer::recordHeader
id	qtcpsocket.h	/^	uint32_t	id;$/;"	m	struct:threadInfo
id	qthread.h	/^		uint32_t id;$/;"	m	class:QThread
id	qwordtokenizer.h	/^	uint64_t id;$/;"	m	struct:recordHeader
id2str	qstridallocator.h	/^		int32_t id2str(uint32_t id, const char*& str, uint32_t& str_len, uint64_t& md5)$/;"	f	class:QStrIDAllocator
idoff	qglobal.h	/^	unsigned short idoff;$/;"	m	struct:HeadIP
ihl	qglobal.h	/^	__u8	ihl:4,$/;"	m	struct:iphdr
img_path_	qtcpsocket.h	/^		char*           img_path_;$/;"	m	class:QTcpServer
improvedMerge	qalgorithm.h	/^static void improvedMerge(T_KEY* v1, T_KEY* v2, int32_t lBegin, int32_t mid, int32_t lEnd)$/;"	f
inToPost	qlogicalparser.cc	/^void QLogicalParser::inToPost(const std::string& gram, std::vector<std::string>& v)$/;"	f	class:QLogicalParser
indexFirstOf	qstring.h	/^		int32_t indexFirstOf(const QString& pat, int32_t pos=0)$/;"	f	class:QString
indexFirstOf	qstring.h	/^		int32_t indexFirstOf(const char* str, int32_t len=-1, int32_t pos=0)$/;"	f	class:QString
indexOf	qstring.h	/^		int32_t indexOf(const QString& pat, int32_t pos=0)$/;"	f	class:QString
indexOf	qstring.h	/^		int32_t indexOf(const char* str, int32_t len=-1, int32_t pos=0)$/;"	f	class:QString
init	qalgorithm.h	/^		int32_t init(int32_t threshold_normal=1000, int32_t list_size=100000, int32_t thread_num=10)$/;"	f	class:QQSParallel
init	qallocator.cc	/^int32_t QPoolAllocator::init(int32_t lChunkSize, int64_t lMaxBlockNum, int64_t lChunkNumPerBlock)$/;"	f	class:QPoolAllocator
init	qchinesespelling.h	/^		int32_t init(char* cfg_file)$/;"	f	class:QChineseSpelling
init	qconfigreader.h	/^		int32_t init(const char* pConfigFile)$/;"	f	class:QConfigReader
init	qcpu.h	/^		int32_t init(uint16_t cpu_port=5345, int32_t timeout=3000, float64_t conn_ratio=1, bool8_t display_log=true)$/;"	f	class:QCPU
init	qdenseindexmanager.h	/^		int32_t init(const char* name, int32_t maxIndexSize=1<<20)$/;"	f	class:QDenseIndexManager
init	qdiskcache.h	/^		int32_t init(int32_t bucket_size=DEFAULT_BUCKET_SIZE, int32_t data_len=0, int32_t cache_interval=DEFAULT_CACHE_INTERVAL)$/;"	f	class:QDiskCache
init	qgramparser.cc	/^int32_t QGramParser::init()$/;"	f	class:QGramParser
init	qgramtree.cc	/^int32_t QGramTree::init()$/;"	f	class:QGramTree
init	qhashsearch.h	/^		int32_t init(int32_t bucket_size, int32_t data_len=0)$/;"	f	class:QHashSearch
init	qhttpserver.h	/^		int32_t init(const char* cfg_file)$/;"	f	class:QHttpServer
init	qlatency.h	/^		int32_t init(int32_t samplesMax=DEFAULT_LATENCY_MAX_SAMPLES, const char* latencyReport=DEFAULT_LATENCY_REPORT)$/;"	f	class:QLatency
init	qlbcluster.h	/^		int32_t init(const char* cfg_file, int32_t server_max=1000, uint32_t cpu_interval=20*1000, int32_t weight_gap_threshold=10)$/;"	f	class:QLBCluster
init	qlist.h	/^		int32_t init(int32_t max_size_)$/;"	f	class:QForwardList
init	qlogger.cc	/^int32_t QLogger::init(const char* logPath, const char* logPrefix, uint32_t messageSize)$/;"	f	class:QLogger
init	qmarkovmodel.h	/^		int32_t init(double* pszProbability, int32_t iStateNum)$/;"	f	class:QMarkovModel
init	qmemcachedclient.h	/^		int32_t init()$/;"	f	class:QMemcachedClient
init	qneologismrecognizer.h	/^		int32_t init(const char* pszFileName)$/;"	f	class:QNeologismRecognizer
init	qnetworkaccessmanager.cc	/^int32_t QNetworkAccessManager::init()$/;"	f	class:QNetworkAccessManager
init	qocrmanager.h	/^		int32_t init()$/;"	f	class:QOcrManager
init	qqueue.h	/^		inline int32_t init(int32_t size)$/;"	f	class:QPriorityQueue
init	qqueue.h	/^		inline int32_t init(int32_t size)$/;"	f	class:QQueue
init	qregexp.h	/^		int32_t init(int32_t size)$/;"	f	class:QRegExp2
init	qremotemonitor.h	/^		int32_t init(uint16_t monitor_port, int32_t timeout, int32_t (*fun_state)(void* argv), void* fun_argv, int32_t display_log = 1)$/;"	f	class:QRemoteMonitor
init	qsimhasher.cc	/^int32_t QSimHasher::init()$/;"	f	class:QSimHasher
init	qsocketpool.h	/^		int32_t init(bool heart_beat=true, int32_t heart_beat_now=1000, int32_t heart_beat_interval=10000)$/;"	f	class:QSocketPool
init	qsocketpool.h	/^		int32_t init(char* server_ip, uint16_t server_port, int32_t timeout=3000)$/;"	f	class:QClientSocket
init	qstoremanager.h	/^		int32_t init(const char* name, int32_t iBucketNum, int32_t iBucketSize=10, int32_t iDataLen=0)$/;"	f	class:QStoreManager
init	qstridallocator.h	/^		int32_t init(uint32_t string_max, const char* rdb_file)$/;"	f	class:QStrIDAllocator
init	qtcpsocket.cc	/^int32_t QTcpServer::init(const char* cfg_file)$/;"	f	class:QTcpServer
init	qtrietree.cc	/^int32_t QTrieTree::init()$/;"	f	class:QTrieTree
init	qudpsocket.h	/^		int32_t init(uint16_t listen_port, int32_t worker_num=10)$/;"	f	class:QUdpServer
init	qudpsocket.h	/^		int32_t init(void*& handle, char* server_ip, uint16_t server_port)$/;"	f	class:QUdpClient
init	qwordtokenizer.cc	/^int32_t QWordTokenizer::init()$/;"	f	class:QWordTokenizer
init	qzlibmanager.h	/^		int32_t init(uint64_t max_size)$/;"	f	class:QZlibManager
initConnection	qmysqlclient.cc	/^void QMySQLClient::initConnection(int32_t initialSize)$/;"	f	class:QMySQLClient
init_connection	qsocketpool.h	/^		int32_t init_connection()$/;"	f	class:QSocketPool
initialized_	qdiskcache.h	/^		int32_t			initialized_;		\/\/ 缓存类初始化标识$/;"	m	class:QDiskCache
initialized_	qhashsearch.h	/^		int32_t			initialized_;		\/\/ 哈希表初始化标识$/;"	m	class:QHashSearch
insert	qchinesespelling.h	/^		int32_t insert(uint16_t gbk_idx, char* spelling_beg, int32_t spelling_len)$/;"	f	class:QChineseSpelling
insert	qhashmap.h	/^		bool insert(const value_type& x)$/;"	f	class:QHashMap2
insert	qhashmap.h	/^		void insert(const value_type& x)$/;"	f	class:QHashMap
insert	qredblacktree.h	/^		int32_t insert(T_KEY _key, T _value, bool cover_flag=false, bool count_flag=false)$/;"	f	class:QRedBlackTree
insert	qtrietree.cc	/^int32_t QTrieTree::insert(const char* pszKey, int32_t iKeyLen)$/;"	f	class:QTrieTree
insert	qvector.h	/^		void insert(int32_t pos, T_TYPE& item)$/;"	f	class:QVector
insertEdge	qadjgraph.h	/^		bool insertEdge(const int32_t vertex1, const int32_t vertex2, const Token<Type>& inToken)$/;"	f	class:QAdjGraph
int16_t	qglobal.h	/^typedef short int int16_t;		\/\/ 16 bit signed$/;"	t
int32_t	qglobal.h	/^typedef int int32_t;			\/\/ 32 bit signed$/;"	t
int64_t	qglobal.h	/^typedef __int64 int64_t;			\/\/ 64 bit signed$/;"	t
int64_t	qglobal.h	/^typedef long int int64_t;			\/\/ 64 bit signed$/;"	t
int64_t	qglobal.h	/^typedef long long int int64_t;			\/\/ 64 bit signed$/;"	t
int8_t	qglobal.h	/^typedef signed char int8_t;		\/\/ 8 bit signed$/;"	t
interval_	qglobal.h	/^		int32_t interval_;$/;"	m	class:QWatchdog
io_data_t	qhttpserver.h	/^	io_data_t() :$/;"	f	struct:io_data_t
io_data_t	qhttpserver.h	/^struct io_data_t {$/;"	s
ip	qlbcluster.h	/^	char		ip[16];		\/\/ 集群服务器IP地址$/;"	m	struct:__server_info
ip_	qipv4.h	/^		QIPv4Addr ip_;$/;"	m	class:QIPv4Peer
iphdr	qglobal.h	/^struct iphdr {$/;"	s
isChunked	qhttpclient.h	/^		bool isChunked() const$/;"	f	class:QHttpReplyHeader
isEmpty	qregexp.h	/^		bool isEmpty() const$/;"	f	class:QRegExp
isEqual	qsimhasher.cc	/^bool QSimHasher::isEqual(uint64_t lhs, uint64_t rhs, unsigned short n)$/;"	f	class:QSimHasher
isGzip	qhttpclient.h	/^		bool isGzip() const$/;"	f	class:QHttpReplyHeader
isLeapYear	qdatetime.h	/^		static bool isLeapYear(int32_t y)$/;"	f	class:QDate
isLetter	qstring.h	/^		inline bool isLetter() const$/;"	f	class:QChar
isLetterOrNumber	qstring.h	/^		inline bool isLetterOrNumber() const$/;"	f	class:QChar
isLetterOrNumber	qwordtokenizer.cc	/^bool QWordTokenizer::isLetterOrNumber(const char* pszKey, int32_t iKeyLen) const$/;"	f	class:QWordTokenizer
isLower	qstring.h	/^		inline bool isLower() const$/;"	f	class:QChar
isNull	qdatetime.h	/^		bool isNull() const$/;"	f	class:QDate
isNull	qdatetime.h	/^		bool isNull() const$/;"	f	class:QTime
isNull	qstring.h	/^		inline bool isNull() const$/;"	f	class:QChar
isNumber	qstring.h	/^		inline bool isNumber() const$/;"	f	class:QChar
isNumber	qwordtokenizer.cc	/^bool QWordTokenizer::isNumber(const char* pszKey, int32_t iKeyLen) const$/;"	f	class:QWordTokenizer
isOperator	qlogicalparser.cc	/^bool QLogicalParser::isOperator(const char op)$/;"	f	class:QLogicalParser
isPrime	qhashmap.h	/^		bool isPrime(int32_t num)$/;"	f	class:QLinearHash
isSpace	qstring.h	/^		inline bool isSpace() const$/;"	f	class:QChar
isUpper	qstring.h	/^		inline bool isUpper() const$/;"	f	class:QChar
isValid	qdatetime.h	/^		bool isValid() const$/;"	f	class:QDate
isValid	qdatetime.h	/^		bool isValid() const$/;"	f	class:QTime
isValid	qdatetime.h	/^		static bool isValid(int32_t h, int32_t m, int32_t s, int32_t ms=0)$/;"	f	class:QTime
isValid	qdatetime.h	/^		static bool isValid(int32_t y, int32_t m, int32_t d)$/;"	f	class:QDate
isValid	qregexp.h	/^		bool isValid() const$/;"	f	class:QRegExp
is_dead	qsocketpool.h	/^		bool is_dead() const$/;"	f	class:QClientSocket
is_dead_	qsocketpool.h	/^		bool8_t		is_dead_;		\/\/ SOCKET连接是否有效$/;"	m	class:QClientSocket
is_idle	qsocketpool.h	/^		bool is_idle() const$/;"	f	class:QClientSocket
is_idle_	qsocketpool.h	/^		bool8_t		is_idle_;		\/\/ SOCKET连接是否空闲$/;"	m	class:QClientSocket
is_map_	qstridallocator.h	/^		char**		is_map_;$/;"	m	class:QStrIDAllocator
item_count_	qbitmap.h	/^		uint32_t item_count_;$/;"	m	class:QBitMap
jd	qdatetime.h	/^		int64_t jd;$/;"	m	class:QDate
jul2greg	qdatetime.h	/^		void jul2greg(uint32_t jd, int32_t& y, int32_t& m, int32_t& d) const$/;"	f	class:QDate
kHashShingle	qjaccardsimilarity.h	/^		static std::list<uint64_t> kHashShingle(const std::string& ss, uint32_t k, bool tag=true)$/;"	f	class:QJaccardSimilarity
keep_alive	qhttpserver.h	/^	enum connection_t keep_alive;			\/\/ HTTP协议是否保持连接$/;"	m	struct:io_data_t	typeref:enum:io_data_t::connection_t
key	qalgorithm.h	/^			T_KEY* key;$/;"	m	struct:QQSParallel::__org_info
key	qredblacktree.h	/^	T_KEY key;				\/\/ 键$/;"	m	struct:RBNode
key_type	qhashmap.h	/^		typedef T_KEY key_type;$/;"	t	class:QHashMap
key_type	qhashmap.h	/^		typedef T_KEY key_type;$/;"	t	class:QHashMap2
lLink_	qlist.h	/^			NodeInfo *lLink_, *rLink_;$/;"	m	struct:QList::NodeInfo
last_	qvector.h	/^		int32_t last_;$/;"	m	class:QVector
latencyMutex	qlatency.h	/^		QMutexLock latencyMutex;$/;"	m	class:QLatency
latencyReport	qlatency.h	/^		char latencyReport[DEFAULT_LATENCY_FSIZE];$/;"	m	class:QLatency
latencyStat	qlatency.h	/^		uint32_t latencyStat[DEFAULT_LATENCY_STAT_COLUMN];$/;"	m	class:QLatency
latency_array	qlatency.h	/^		uint32_t* latency_array;$/;"	m	class:QLatency
ldata	qipv4.h	/^			uint32_t ldata;$/;"	m	union:QIPv4Addr::__anon5
left	qredblacktree.h	/^	RBNode* left;				\/\/ 左子结点$/;"	m	struct:RBNode
left	qstring.h	/^		QString left(int32_t len)$/;"	f	class:QString
len	qadlist.h	/^	uint32_t len;$/;"	m	struct:adlist
len	qglobal.h	/^	__be16	len;$/;"	m	struct:udphdr
length	qdictcreator.h	/^	uint32_t length;$/;"	m	struct:recordHeader
length	qglobal.h	/^		inline int32_t length() const$/;"	f	class:QStringBuffer
length	qhttpserver.h	/^	int32_t		length;				\/\/ 字符串的实际长度$/;"	m	struct:slice_t
length	qlbcluster.h	/^			int32_t		length;				\/\/ 报文后续数据总长度$/;"	m	struct:QLBCluster::__server_cpu_info
length	qstring.h	/^		inline int32_t length() const$/;"	f	class:QString
length	qtcpsocket.h	/^	int32_t		length;$/;"	m	struct:baseHeader
length	qtcpsocket.h	/^	int32_t		length;$/;"	m	struct:replyHeader
length	qtcpsocket.h	/^	int32_t		length;$/;"	m	struct:requestHeader
length	qtcpsocket.h	/^	int32_t         length;$/;"	m	struct:networkReply
length	qwordtokenizer.h	/^	int32_t length;$/;"	m	struct:dataInfo
length	qwordtokenizer.h	/^	uint32_t length;$/;"	m	struct:recordHeader
length	tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:
length_	qglobal.h	/^		int32_t length_;$/;"	m	class:QStringBuffer
level	qlogger.h	/^	int32_t			level;$/;"	m	struct:QLoggerInfo
libVersion	qdictcreator.h	/^	uint64_t libVersion;$/;"	m	struct:dictInfo
libVersion	qneologismrecognizer.h	/^			uint64_t libVersion;$/;"	m	struct:QNeologismRecognizer::dictInfo
libVersion	qwordtokenizer.h	/^	uint64_t libVersion;$/;"	m	struct:dictInfo
line_tokenize	qstring.h	/^		std::list<QString> line_tokenize()$/;"	f	class:QString
link	qadjgraph.h	/^	Edge* link;$/;"	m	struct:Edge
link	qhashmap.h	/^	ChainNode<T_KEY, T> *link;$/;"	m	struct:ChainNode
link	qqueue.h	/^			ListNode* link;$/;"	m	struct:QListQueue::ListNode
listAddNodeHead	qadlist.cc	/^adlist *listAddNodeHead(adlist *list, void *value)$/;"	f
listAddNodeTail	qadlist.cc	/^adlist *listAddNodeTail(adlist *list, void *value)$/;"	f
listCreate	qadlist.cc	/^adlist *listCreate(void)$/;"	f
listDelNode	qadlist.cc	/^void listDelNode(adlist *list, listNode *node)$/;"	f
listDup	qadlist.cc	/^adlist *listDup(adlist *orig)$/;"	f
listFirst	qadlist.h	42;"	d
listGetDupMethod	qadlist.h	52;"	d
listGetFree	qadlist.h	53;"	d
listGetIterator	qadlist.cc	/^listIter *listGetIterator(adlist *list, int32_t direction)$/;"	f
listGetMatchMethod	qadlist.h	54;"	d
listIndex	qadlist.cc	/^listNode *listIndex(adlist *list, long index)$/;"	f
listInsertNode	qadlist.cc	/^adlist *listInsertNode(adlist *list, listNode *old_node, void *value, int32_t after)$/;"	f
listIter	qadlist.h	/^typedef struct listIter {$/;"	s
listIter	qadlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	qadlist.h	43;"	d
listLength	qadlist.h	41;"	d
listNext	qadlist.cc	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	qadlist.h	45;"	d
listNode	qadlist.h	/^typedef struct listNode {$/;"	s
listNode	qadlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	qadlist.h	46;"	d
listPOS2str	qgramparser.cc	/^std::string QGramParser::listPOS2str(const std::list< std::vector<std::string> >& listPOS)$/;"	f	class:QGramParser
listPOS2str	qsimhasher.cc	/^std::string QSimHasher::listPOS2str(const std::list< std::vector<std::string> >& listPOS)$/;"	f	class:QSimHasher
listPrevNode	qadlist.h	44;"	d
listRelease	qadlist.cc	/^void listRelease(adlist *list)$/;"	f
listReleaseIterator	qadlist.cc	/^void listReleaseIterator(listIter *iter)$/;"	f
listRewind	qadlist.cc	/^void listRewind(adlist *list, listIter *li)$/;"	f
listRewindTail	qadlist.cc	/^void listRewindTail(adlist *list, listIter *li)$/;"	f
listRotate	qadlist.cc	/^void listRotate(adlist *list)$/;"	f
listSearchKey	qadlist.cc	/^listNode *listSearchKey(adlist *list, void *key)$/;"	f
listSetDupMethod	qadlist.h	48;"	d
listSetFreeMethod	qadlist.h	49;"	d
listSetMatchMethod	qadlist.h	50;"	d
listen_	qremotemonitor.h	/^		Q_SOCKET_T	listen_;$/;"	m	class:QRemoteMonitor
listen_sock_	qtcpsocket.h	/^		Q_SOCKET_T      listen_sock_;$/;"	m	class:QTcpServer
load	qhashsearch.h	/^		int32_t load(char* fileName)$/;"	f	class:QHashSearch
loadDataFromDisk	qdiskcache.h	/^		int32_t loadDataFromDisk(char* fileName)$/;"	f	class:QDiskCache
loadDictionary	qwordtokenizer.cc	/^int32_t QWordTokenizer::loadDictionary(const char* fileName)$/;"	f	class:QWordTokenizer
loadPartOfSpeech	qwordtokenizer.cc	/^int32_t QWordTokenizer::loadPartOfSpeech(const char* fileName)$/;"	f	class:QWordTokenizer
load_port	qlbcluster.h	/^	int32_t		load_port;	\/\/ 集群服务器负载信息收集端口号$/;"	m	struct:__server_info
load_server_config	qtcpsocket.cc	/^int32_t QTcpServer::load_server_config(const char* cfg_file)$/;"	f	class:QTcpServer
lock	qalgorithm.h	/^			QMutexLock lock;$/;"	m	struct:QQSParallel::__org_info
lock	qglobal.h	/^		inline void lock()$/;"	f	class:QMutexLock
lock	qglobal.h	/^		inline void lock()$/;"	f	class:QSpinLock
locks	qglobal.h	/^		int32_t locks;$/;"	m	class:QRWLockFunc
log	qlogger.cc	/^int32_t QLogger::log(int32_t level, const char* file, int32_t line, const char* func, bool bPrintScreen, const char* format, ...)$/;"	f	class:QLogger
logFilePath_	qlogger.h	/^		char		logFilePath_[DEFAULT_LOG_PATH_SIZE];$/;"	m	class:QLogger
logFp_	qlogger.h	/^		FILE*		logFp_;$/;"	m	class:QLogger
logMutex_	qlogger.h	/^		QMutexLock	logMutex_;$/;"	m	class:QLogger
logPath_	qlogger.h	/^		char		logPath_[DEFAULT_LOG_PATH_SIZE];$/;"	m	class:QLogger
logPrefix_	qlogger.h	/^		char		logPrefix_[DEFAULT_LOG_PREFIX_SIZE];$/;"	m	class:QLogger
log_path_	qtcpsocket.h	/^		char*           log_path_;$/;"	m	class:QTcpServer
log_prefix_	qtcpsocket.h	/^		char*           log_prefix_;$/;"	m	class:QTcpServer
log_screen_	qtcpsocket.h	/^		int32_t         log_screen_;$/;"	m	class:QTcpServer
log_size_	qtcpsocket.h	/^		int32_t         log_size_;$/;"	m	class:QTcpServer
loggerInfo	qlogger.cc	/^struct QLoggerInfo loggerInfo[] = {$/;"	v	typeref:struct:QLoggerInfo
logger_	qlogger.cc	/^QLogger* QLogger::logger_=NULL;$/;"	m	class:QLogger	file:
logger_	qlogger.h	/^		static QLogger*	logger_;$/;"	m	class:QLogger
logger_	qtcpsocket.h	/^		QLogger*        logger_;$/;"	m	class:QTcpServer
mAllocNum	qallocator.h	/^		int64_t		mAllocNum;$/;"	m	class:QPoolAllocator
mBuckets	qhashmap.h	/^		int32_t mBuckets;$/;"	m	class:QLinearHash
mChunkSize	qallocator.h	/^		int64_t		mChunkSize;$/;"	m	class:QPoolAllocator
mChunkSize	qobjectpool.h	/^		uint32_t mChunkSize;$/;"	m	class:QObjectPool
mComp	qhashmap.h	/^		Compare mComp;$/;"	m	class:QHashMap
mComp	qhashmap.h	/^		Compare mComp;$/;"	m	class:QHashMap2
mDivisor	qhashmap.h	/^		int32_t mDivisor;$/;"	m	class:QLinearHash
mElems	qhashmap.h	/^		std::vector<ListType>* mElems;$/;"	m	class:QHashMap
mEntries	qhashmap.h	/^		EntryMap** mEntries;$/;"	m	class:QHashMap2
mFreeList	qobjectpool.h	/^		std::queue<T_TYPE*> mFreeList;$/;"	m	class:QObjectPool
mHash	qhashmap.h	/^		Hash mHash;$/;"	m	class:QHashMap
mHash	qhashmap.h	/^		Hash mHash;$/;"	m	class:QHashMap2
mKey	qhashmap.h	/^	T_KEY mKey;$/;"	m	struct:ChainNode
mMailContent	qmailsender.h	/^		std::vector<std::string> mMailContent;$/;"	m	class:QMailSender
mMailContentPos	qmailsender.h	/^		int32_t mMailContentPos;$/;"	m	class:QMailSender
mMailFrom	qmailsender.h	/^		std::string mMailFrom;$/;"	m	class:QMailSender
mMaxBlockLen	qallocator.h	/^		int64_t		mMaxBlockLen;$/;"	m	class:QAllocator
mMaxBlockLen	qallocator.h	/^		int64_t		mMaxBlockLen;$/;"	m	class:QPoolAllocator
mMaxBlockNum	qallocator.h	/^		int64_t		mMaxBlockNum;$/;"	m	class:QAllocator
mMaxBlockNum	qallocator.h	/^		int64_t		mMaxBlockNum;$/;"	m	class:QPoolAllocator
mMaxChunkNum	qallocator.h	/^		int64_t		mMaxChunkNum;$/;"	m	class:QPoolAllocator
mMutex	qallocator.h	/^		QMutexLock	mMutex;$/;"	m	class:QPoolAllocator
mMutex	qmysqlclient.h	/^		QMutexLock mMutex;$/;"	m	class:QMySQLClient
mMutexLock	qobjectpool.h	/^		QMutexLock mMutexLock;$/;"	m	class:QObjectPool
mNowBlockLen	qallocator.h	/^		int64_t		mNowBlockLen;$/;"	m	class:QAllocator
mNowBlockLen	qallocator.h	/^		int64_t		mNowBlockLen;$/;"	m	class:QPoolAllocator
mNowBlockNum	qallocator.h	/^		int64_t		mNowBlockNum;$/;"	m	class:QAllocator
mNowBlockNum	qallocator.h	/^		int64_t		mNowBlockNum;$/;"	m	class:QPoolAllocator
mNowChunkNum	qallocator.h	/^		int64_t		mNowChunkNum;$/;"	m	class:QPoolAllocator
mNowSize	qhashmap.h	/^		int32_t mNowSize;$/;"	m	class:QLinearHash
mNumBuckets	qhashmap.h	/^		uint32_t mNumBuckets;$/;"	m	class:DefaultHash
mPasswd	qmailsender.h	/^		std::string mPasswd;$/;"	m	class:QMailSender
mPort	qmailsender.h	/^		int32_t mPort;$/;"	m	class:QMailSender
mRecipientList	qmailsender.h	/^		std::list<std::string> mRecipientList;$/;"	m	class:QMailSender
mRecycleNum	qallocator.h	/^		int64_t 	mRecycleNum;$/;"	m	class:QPoolAllocator
mSize	qhashmap.h	/^		uint32_t mSize;$/;"	m	class:QHashMap
mSize	qhashmap.h	/^		uint32_t mSize;$/;"	m	class:QHashMap2
mSmtpServer	qmailsender.h	/^		std::string mSmtpServer;$/;"	m	class:QMailSender
mTotalLen	qallocator.h	/^		int64_t		mTotalLen;$/;"	m	class:QAllocator
mTravIndex	qhashmap.h	/^		int32_t mTravIndex;$/;"	m	class:QLinearHash
mUser	qmailsender.h	/^		std::string mUser;$/;"	m	class:QMailSender
mValue	qhashmap.h	/^	T mValue;$/;"	m	struct:ChainNode
m_autoreset	qglobal.h	/^		bool m_autoreset;$/;"	m	class:QTrigger
m_busy_list	qalgorithm.h	/^		QQueue<SORT_INFO*> m_busy_list;$/;"	m	class:QQSParallel
m_client_task_queue	qhttpserver.h	/^		QQueue<Q_SOCKET_T>	m_client_task_queue;		\/\/ 客户端请求任务队列$/;"	m	class:QHttpServer
m_conn_ratio	qcpu.h	/^		float64_t	m_conn_ratio;		\/\/ 该服务器输入负载预估值(单位时间内服务器收到的新连接数与各服务器平均连接数的比例)$/;"	m	class:QCPU
m_cpu_port	qcpu.h	/^		uint16_t	m_cpu_port;		\/\/ CPU信息监控端口$/;"	m	class:QCPU
m_display_log	qcpu.h	/^		bool8_t		m_display_log;		\/\/ 是否打印日志到屏幕$/;"	m	class:QCPU
m_epoll_events	qhttpserver.h	/^		struct epoll_event*	m_epoll_events;			\/\/ EPOLL事件池$/;"	m	class:QHttpServer	typeref:struct:QHttpServer::epoll_event
m_epollfd	qhttpserver.h	/^		int32_t			m_epollfd;			\/\/ EPOLL描述符$/;"	m	class:QHttpServer
m_exit_flag	qhttpserver.h	/^		bool8_t			m_exit_flag;			\/\/ 服务退出标识$/;"	m	class:QHttpServer
m_fpData	qdenseindexmanager.h	/^		FILE*		m_fpData;		\/\/ 数据文件句柄$/;"	m	class:QDenseIndexManager
m_fpData	qstoremanager.h	/^		FILE*		m_fpData;		\/\/ 数据文件句柄$/;"	m	class:QStoreManager
m_fpHash	qstoremanager.h	/^		FILE*		m_fpHash;		\/\/ 散列文件句柄$/;"	m	class:QStoreManager
m_fpIndex	qdenseindexmanager.h	/^		FILE*		m_fpIndex;		\/\/ 索引文件句柄$/;"	m	class:QDenseIndexManager
m_iAllDataNum	qstoremanager.h	/^		int32_t		m_iAllDataNum;		\/\/ 元素数量$/;"	m	class:QStoreManager
m_iBucketLen	qstoremanager.h	/^		int32_t		m_iBucketLen;		\/\/ 散列文件每个桶的长度$/;"	m	class:QStoreManager
m_iBucketNum	qstoremanager.h	/^		int32_t		m_iBucketNum;		\/\/ 散列文件的桶数$/;"	m	class:QStoreManager
m_iBucketOverflowNum	qstoremanager.h	/^		int32_t		m_iBucketOverflowNum;	\/\/ 散列文件溢出桶数量$/;"	m	class:QStoreManager
m_iBucketSize	qstoremanager.h	/^		int32_t		m_iBucketSize;		\/\/ 散列文件每个桶的容量$/;"	m	class:QStoreManager
m_iDataLen	qstoremanager.h	/^		int32_t		m_iDataLen;		\/\/ 数据长度$/;"	m	class:QStoreManager
m_iElementLen	qstoremanager.h	/^		int32_t		m_iElementLen;		\/\/ 散列文件每个元素的长度$/;"	m	class:QStoreManager
m_iHeadLen	qstoremanager.h	/^		int32_t		m_iHeadLen;		\/\/ 散列文件头信息长度$/;"	m	class:QStoreManager
m_iMaxIndexSize	qdenseindexmanager.h	/^		int32_t		m_iMaxIndexSize;	\/\/ 当前内存最大索引数目$/;"	m	class:QDenseIndexManager
m_iNowIndexNum	qdenseindexmanager.h	/^		int32_t		m_iNowIndexNum;		\/\/ 当前内存实际索引数目$/;"	m	class:QDenseIndexManager
m_iStateNum	qmarkovmodel.h	/^		int32_t m_iStateNum;$/;"	m	class:QMarkovModel
m_idle_list	qalgorithm.h	/^		QQueue<SORT_INFO*> m_idle_list;$/;"	m	class:QQSParallel
m_isInitSystem	qdenseindexmanager.h	/^		int32_t		m_isInitSystem;		\/\/ 系统初始化标识符$/;"	m	class:QDenseIndexManager
m_isInitSystem	qstoremanager.h	/^		int32_t		m_isInitSystem;		\/\/ 系统初始化标识符$/;"	m	class:QStoreManager
m_leaf	qredblacktree.h	/^		RBTreeNode* m_leaf;			\/\/ 叶子结点$/;"	m	class:QRedBlackTree
m_list_size	qalgorithm.h	/^		int32_t m_list_size;$/;"	m	class:QQSParallel
m_listen	qcpu.h	/^		Q_SOCKET_T	m_listen;		\/\/ 该服务监听套接字$/;"	m	class:QCPU
m_listen	qudpsocket.h	/^		Q_SOCKET_T m_listen;		\/\/ 服务端监听描述符$/;"	m	class:QUdpServer
m_listen_ip	qhttpserver.h	/^		char			m_listen_ip[IPADDR_MAX_LEN];	\/\/ 服务器监听绑定IP地址$/;"	m	class:QHttpServer
m_listen_port	qhttpserver.h	/^		int32_t			m_listen_port;			\/\/ 服务器监听端口号$/;"	m	class:QHttpServer
m_listen_port	qudpsocket.h	/^		uint16_t m_listen_port;		\/\/ 服务端监听端口号$/;"	m	class:QUdpServer
m_pBucket	qstoremanager.h	/^		char*		m_pBucket;		\/\/ 散列文件的桶$/;"	m	class:QStoreManager
m_pszFlag	qdenseindexmanager.h	/^		uint8_t*	m_pszFlag;		\/\/ 索引项信息之索引项删除标识$/;"	m	class:QDenseIndexManager
m_pszKey	qdenseindexmanager.h	/^		uint64_t*	m_pszKey;		\/\/ 索引项信息之索引项key$/;"	m	class:QDenseIndexManager
m_pszOffset	qdenseindexmanager.h	/^		int64_t*	m_pszOffset;		\/\/ 索引项信息之索引项在文件数据表的起始位置$/;"	m	class:QDenseIndexManager
m_ptr_cfg_info	qhttpserver.h	/^		config_info_t*		m_ptr_cfg_info;			\/\/ 外部配置文件信息结构体$/;"	m	class:QHttpServer
m_ptr_trd_info	qhttpserver.h	/^		thread_info_t*		m_ptr_trd_info;			\/\/ 线程信息句柄$/;"	m	class:QHttpServer
m_ptr_trigger	qhttpserver.h	/^		QTrigger*		m_ptr_trigger;			\/\/ 任务队列触发器$/;"	m	class:QHttpServer
m_root	qredblacktree.h	/^		RBTreeNode* m_root;			\/\/ 根结点$/;"	m	class:QRedBlackTree
m_server_ip	qudpsocket.h	/^		char m_server_ip[16];		\/\/ UDP服务端IP$/;"	m	class:QUdpClient
m_server_port	qudpsocket.h	/^		uint16_t m_server_port;		\/\/ UDP服务端端口号$/;"	m	class:QUdpClient
m_start_flag	qhttpserver.h	/^		bool8_t			m_start_flag;			\/\/ 服务启动标识$/;"	m	class:QHttpServer
m_state	qglobal.h	/^		int32_t m_state;$/;"	m	class:QTrigger
m_success_flag	qcpu.h	/^		int32_t		m_success_flag;		\/\/ 线程启动状态标识$/;"	m	class:QCPU
m_success_flag	qudpsocket.h	/^		int32_t m_success_flag;		\/\/ 线程状态标识$/;"	m	class:QUdpServer
m_szDataFile	qdenseindexmanager.h	/^		char		m_szDataFile[1<<7];	\/\/ 数据文件名称$/;"	m	class:QDenseIndexManager
m_szDataFile	qstoremanager.h	/^		char		m_szDataFile[1<<7];	\/\/ 数据文件名称$/;"	m	class:QStoreManager
m_szHashFile	qstoremanager.h	/^		char		m_szHashFile[1<<7];	\/\/ 散列文件名称$/;"	m	class:QStoreManager
m_szIndexFile	qdenseindexmanager.h	/^		char		m_szIndexFile[1<<7];	\/\/ 索引文件名称$/;"	m	class:QDenseIndexManager
m_tcp_listenfd	qhttpserver.h	/^		int32_t			m_tcp_listenfd;			\/\/ 监听TCP连接套接字$/;"	m	class:QHttpServer
m_thread_max	qhttpserver.h	/^		int32_t			m_thread_max;			\/\/ 服务最大线程数目$/;"	m	class:QHttpServer
m_thread_num	qalgorithm.h	/^		int32_t m_thread_num;$/;"	m	class:QQSParallel
m_threshold_normal	qalgorithm.h	/^		int32_t m_threshold_normal;$/;"	m	class:QQSParallel
m_timeout	qcpu.h	/^		int32_t		m_timeout;		\/\/ SOCKET超时时间(默认为毫秒)$/;"	m	class:QCPU
m_udp_listenfd	qhttpserver.h	/^		int32_t			m_udp_listenfd;			\/\/ 监听UDP连接套接字$/;"	m	class:QHttpServer
m_worker_num	qudpsocket.h	/^		int32_t m_worker_num;		\/\/ 服务端工作线程数$/;"	m	class:QUdpServer
magicNumber	qdictcreator.h	/^	uint64_t magicNumber;$/;"	m	struct:dictInfo
magicNumber	qneologismrecognizer.h	/^			uint64_t magicNumber;$/;"	m	struct:QNeologismRecognizer::dictInfo
magicNumber	qwordtokenizer.h	/^	uint64_t magicNumber;$/;"	m	struct:dictInfo
magic_mark	qlbcluster.h	/^			uint64_t	magic_mark;			\/\/ CPU报文信息唯一标识符$/;"	m	struct:QLBCluster::__server_cpu_info
main	qservice.cc	/^int32_t QService::main(int32_t argc, char** argv)$/;"	f	class:QService
malloc_fn	cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
mapped_type	qhashmap.h	/^		typedef T mapped_type;$/;"	t	class:QHashMap
mapped_type	qhashmap.h	/^		typedef T mapped_type;$/;"	t	class:QHashMap2
match	qadlist.h	/^	int32_t (*match)(void *ptr, void *key);$/;"	m	struct:adlist
maxJd	qdatetime.h	/^		static inline int64_t maxJd()$/;"	f	class:QDate
maxSize	qmysqlclient.h	/^		int32_t maxSize;$/;"	m	class:QMySQLClient
max_page_size_	qnetworkaccessmanager.h	/^		int32_t		max_page_size_;$/;"	m	class:QNetworkAccessManager
max_size	qglobal.h	/^		inline int32_t max_size() const$/;"	f	class:QStringBuffer
max_size	qheap.h	/^		inline int32_t max_size() const$/;"	f	class:QMaxHeap
max_size	qheap.h	/^		inline int32_t max_size() const$/;"	f	class:QMinHeap
max_size	qlbcluster.h	/^		int32_t max_size() const$/;"	f	class:QLBCluster
max_size	qqueue.h	/^		int32_t max_size() const$/;"	f	class:QListQueue
max_size	qqueue.h	/^		int32_t max_size() const$/;"	f	class:QPriorityQueue
max_size	qqueue.h	/^		int32_t max_size() const$/;"	f	class:QQueue
max_size	qregexp.h	/^		int32_t max_size;$/;"	m	class:QRegExp2
max_size	qshinyxml.h	/^		int32_t max_size() const$/;"	f	class:QShinyXML
max_size	qstack.h	/^		inline int32_t max_size() const$/;"	f	class:QStack
max_size	qstring.h	/^		inline int32_t max_size() const$/;"	f	class:QString
max_size	qvector.h	/^		int32_t max_size() const$/;"	f	class:QVector
max_size_	qglobal.h	/^		int32_t max_size_;$/;"	m	class:QStringBuffer
max_size_	qheap.h	/^		int32_t max_size_;$/;"	m	class:QMaxHeap
max_size_	qheap.h	/^		int32_t max_size_;$/;"	m	class:QMinHeap
max_size_	qqueue.h	/^		int32_t max_size_;$/;"	m	class:QListQueue
max_size_	qqueue.h	/^		int32_t max_size_;$/;"	m	class:QPriorityQueue
max_size_	qqueue.h	/^		int32_t max_size_;$/;"	m	class:QQueue
max_size_	qsocketpool.h	/^		int32_t			max_size_;		\/\/ socket连接池支持的最大连接数$/;"	m	class:QSocketPool
max_size_	qstack.h	/^		int32_t max_size_;$/;"	m	class:QStack
max_size_	qvector.h	/^		int32_t max_size_;$/;"	m	class:QVector
max_size_	qzlibmanager.h	/^		uint64_t max_size_;$/;"	m	class:QZlibManager
max_weight	qlbcluster.h	/^		int32_t max_weight()$/;"	f	class:QLBCluster
md5	qgramtree.h	/^		QMD5		md5;$/;"	m	class:QGramTree
md5	qsimhasher.h	/^		QMD5		md5;$/;"	m	class:QSimHasher
md5_	qstridallocator.h	/^		QMD5		md5_;$/;"	m	class:QStrIDAllocator
md5_calc	qmd5file.h	/^	void md5_calc(MD5_STRUCT* ms)$/;"	f	class:QMD5File
md5_init	qmd5file.h	/^	void md5_init(MD5_STRUCT* ms)$/;"	f	class:QMD5File
mds	qdatetime.h	/^		int32_t mds;$/;"	m	class:QTime
median3	qalgorithm.h	/^static const T_KEY& median3(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
mem	tinyxml2.h	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk
memcache	qmemcachedclient.h	/^		memcached_st* memcache;$/;"	m	class:QMemcachedClient
messageSize_	qlogger.h	/^		uint32_t	messageSize_;$/;"	m	class:QLogger
message_	qlogger.h	/^		char*		message_;$/;"	m	class:QLogger
method	qhttpserver.h	/^	enum method_t	method;				\/\/ HTTP协议请求方法$/;"	m	struct:io_data_t	typeref:enum:io_data_t::method_t
method_	qhttpclient.h	/^		std::string	method_;			\/\/ HTTP协议请求方法$/;"	m	class:QHttpRequestHeader
method_t	qhttpserver.h	/^enum method_t {$/;"	g
mid	qstring.h	/^		QString mid(int32_t pos, int32_t len=-1)$/;"	f	class:QString
middleNum	qneologismrecognizer.h	/^			int32_t middleNum;$/;"	m	struct:QNeologismRecognizer::htmInfo
middlePbl	qneologismrecognizer.h	/^			double middlePbl;$/;"	m	struct:QNeologismRecognizer::recordHeader
minJd	qdatetime.h	/^		static inline int64_t minJd()$/;"	f	class:QDate
minute	qdatetime.h	/^		int32_t minute() const$/;"	f	class:QTime
mkdir	qdir.cc	/^bool QDir::mkdir()$/;"	f	class:QDir
mkdir	qdir.cc	/^bool QDir::mkdir(const char* dirpath)$/;"	f	class:QDir
mkdir	qlogger.cc	/^int32_t QLogger::mkdir(const char* dirPath)$/;"	f	class:QLogger
modify_socket_in_epoll	qhttpserver.h	/^		int32_t modify_socket_in_epoll(int32_t fd, int32_t en)$/;"	f	class:QHttpServer
monitor_	qtcpsocket.h	/^		QRemoteMonitor* monitor_;$/;"	m	class:QTcpServer
monitor_port	qhttpserver.h	/^	int32_t		monitor_port;			\/\/ 服务监控端口号$/;"	m	struct:config_info_t
monitor_port_	qremotemonitor.h	/^		uint16_t	monitor_port_;$/;"	m	class:QRemoteMonitor
monitor_port_	qtcpsocket.h	/^		uint16_t        monitor_port_;$/;"	m	class:QTcpServer
month	qdatetime.h	/^		int32_t month() const$/;"	f	class:QDate
monthDays	qdatetime.h	/^static const int16_t monthDays[]	= {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};$/;"	v
mount	qbitmap.h	/^		void mount(const uint32_t item_count, const char* bitmap_data, const bool mount_flag=true)$/;"	f	class:QBitMap
mount_	qbitmap.h	/^		bool mount_;$/;"	m	class:QBitMap
msec	qdatetime.h	/^		int32_t msec() const$/;"	f	class:QTime
msecsTo	qdatetime.h	/^		int32_t msecsTo(const QTime &t) const$/;"	f	class:QTime
mtu	qglobal.h	/^			u_int16_t	mtu;$/;"	m	struct:icmphdr::__anon1::__anon3
mtx	qglobal.h	/^		CRITICAL_SECTION mtx;$/;"	m	class:QRWLock
mtx	qglobal.h	/^		QMutexLock* mtx;$/;"	m	class:QScopeMutex
mtx	qglobal.h	/^		pthread_mutex_t mtx;$/;"	m	class:QRWLockFunc
mtx	qglobal.h	/^		pthread_mutex_t mtx;$/;"	m	class:QTimedSem
mtx	qglobal.h	/^		pthread_mutex_t mtx;$/;"	m	class:QTrigger
mtx	qglobal.h	/^		pthread_rwlock_t mtx;$/;"	m	class:QRWLock
murmurHash	qfunc.h	/^static inline unsigned int murmurHash(const void *key, int len)$/;"	f
murmurHash64A	qfunc.h	/^static inline uint64_t murmurHash64A(const void * key, int len, unsigned int seed)$/;"	f
mutex	qglobal.h	/^		CRITICAL_SECTION mutex;$/;"	m	class:QMutexLock
mutex	qglobal.h	/^		pthread_mutex_t mutex;$/;"	m	class:QMutexLock
mutex_	qdiskcache.h	/^		QMutexLock		mutex_;			\/\/ 缓存类互斥锁$/;"	m	class:QDiskCache
mutex_	qheap.h	/^		QMutexLock mutex_;$/;"	m	class:QMaxHeap
mutex_	qheap.h	/^		QMutexLock mutex_;$/;"	m	class:QMinHeap
mutex_	qlist.h	/^		QMutexLock mutex_;$/;"	m	class:QForwardList
mutex_	qqueue.h	/^		QMutexLock mutex_;$/;"	m	class:QListQueue
mutex_	qqueue.h	/^		QMutexLock mutex_;$/;"	m	class:QPriorityQueue
mutex_	qqueue.h	/^		QMutexLock mutex_;$/;"	m	class:QQueue
mutex_	qsocketpool.h	/^		QMutexLock		mutex_;			\/\/ socket连接池互斥锁$/;"	m	class:QSocketPool
mutex_	qstridallocator.h	/^		QMutexLock	mutex_;$/;"	m	class:QStrIDAllocator
mutex_	qzlibmanager.h	/^		QMutexLock mutex_;$/;"	m	class:QZlibManager
mutex_lock_	qlbcluster.h	/^		QMutexLock		mutex_lock_;		\/\/ 调度算法用互斥锁$/;"	m	class:QLBCluster
name	qregexp.h	/^	std::string name;$/;"	m	struct:__regexp_info
networkReply	qtcpsocket.h	/^	networkReply() :$/;"	f	struct:networkReply
networkReply	qtcpsocket.h	/^struct networkReply {$/;"	s
network_manager_	qnetworkaccessmanager.h	/^		QNetworkAccessManager* network_manager_;$/;"	m	class:QNetworkAccessManager
next	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	qadlist.h	/^	listNode *next;$/;"	m	struct:listIter
next	qadlist.h	/^	struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	qlist.h	/^		T_TYPE next()$/;"	f	class:QList
next	qtrietree.h	/^	QTrieNode*	next;	\/* next child *\/$/;"	m	struct:QTrieNode
next	tinyxml2.h	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk
next_	qlist.h	/^			NodeInfo* next_;$/;"	m	struct:QForwardList::NodeInfo
nodeTable	qadjgraph.h	/^		Vertex<Type>* nodeTable;$/;"	m	class:QAdjGraph
node_num	qredblacktree.h	/^		int32_t node_num;			\/\/ 当前已使用的节点个数$/;"	m	class:QRedBlackTree
noncopyable	qglobal.h	/^		noncopyable() {}$/;"	f	class:noncopyable
noncopyable	qglobal.h	/^class noncopyable$/;"	c
now	qdatetime.h	/^		static QDate now()$/;"	f	class:QDate
now	qdatetime.h	/^		static QDateTime now()$/;"	f	class:QDateTime
now	qdatetime.h	/^		static QTime now()$/;"	f	class:QTime
now_	qglobal.h	/^		int32_t now_;$/;"	m	class:QWatchdog
now_num_	qtrietree.h	/^		int32_t		now_num_;$/;"	m	class:QTrieTree
now_size_	qqueue.h	/^		int32_t now_size_;$/;"	m	class:QListQueue
now_size_	qsocketpool.h	/^		int32_t			now_size_;		\/\/ socket连接池实际连接数$/;"	m	class:QSocketPool
now_size_	qzlibmanager.h	/^		uint64_t now_size_;$/;"	m	class:QZlibManager
nullJd	qdatetime.h	/^		static inline int64_t nullJd()$/;"	f	class:QDate
numBuckets	qhashmap.h	/^		uint32_t numBuckets() const$/;"	f	class:DefaultHash
numEdges	qadjgraph.h	/^		int32_t numEdges;$/;"	m	class:QAdjGraph
numVertices	qadjgraph.h	/^		int32_t numVertices;$/;"	m	class:QAdjGraph
ocr_api	qocrmanager.h	/^		tesseract::TessBaseAPI *ocr_api;$/;"	m	class:QOcrManager
open	qfile.cc	/^bool QFile::open(const char* openMode)$/;"	f	class:QFile
opendir	qdir.cc	/^bool QDir::opendir()$/;"	f	class:QDir
operate_type_	qtcpsocket.h	/^		uint16_t	operate_type_;$/;"	m	class:QTcpClient
operator !=	qdatetime.h	/^		bool operator!=(const QDate &other) const$/;"	f	class:QDate
operator !=	qdatetime.h	/^		bool operator!=(const QTime &other) const$/;"	f	class:QTime
operator !=	qdatetime.h	/^		inline bool operator!=(const QDateTime &other) const$/;"	f	class:QDateTime
operator !=	qstring.h	/^		bool operator!=(QChar& qch)$/;"	f	class:QChar
operator !=	qstring.h	/^		bool operator!=(const QChar& qch)$/;"	f	class:QChar
operator !=	qstring.h	/^		int32_t operator!=(const QString& object)$/;"	f	class:QString
operator !=	qstring.h	/^		int32_t operator!=(const char* str)$/;"	f	class:QString
operator <	qdatetime.h	/^		bool operator<(const QDate &other) const$/;"	f	class:QDate
operator <	qdatetime.h	/^		bool operator<(const QDateTime &other) const$/;"	f	class:QDateTime
operator <	qdatetime.h	/^		bool operator<(const QTime &other) const$/;"	f	class:QTime
operator <<	qbytearray.h	/^		template<typename T> QByteArray& operator<<(const T& e) throw(out_of_range)$/;"	f	class:QByteArray
operator <<	qstring.h	/^		friend std::ostream& operator<<(std::ostream& out, const QString& object)$/;"	f	class:QString
operator <=	qdatetime.h	/^		bool operator<=(const QDate &other) const$/;"	f	class:QDate
operator <=	qdatetime.h	/^		bool operator<=(const QTime &other) const$/;"	f	class:QTime
operator <=	qdatetime.h	/^		inline bool operator<=(const QDateTime &other) const$/;"	f	class:QDateTime
operator =	qbytearray.h	/^		QByteArray& operator=(const QByteArray& rhs)$/;"	f	class:QByteArray
operator =	qstring.h	/^		QString& operator=(const QString& object)$/;"	f	class:QString
operator =	qstring.h	/^		QString& operator=(const char* str)$/;"	f	class:QString
operator =	tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle
operator =	tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle
operator ==	qdatetime.h	/^		bool operator==(const QDate &other) const$/;"	f	class:QDate
operator ==	qdatetime.h	/^		bool operator==(const QDateTime &other) const$/;"	f	class:QDateTime
operator ==	qdatetime.h	/^		bool operator==(const QTime &other) const$/;"	f	class:QTime
operator ==	qstring.h	/^		bool operator==(QChar& qch)$/;"	f	class:QChar
operator ==	qstring.h	/^		bool operator==(const QChar& qch)$/;"	f	class:QChar
operator ==	qstring.h	/^		int32_t operator==(const QString& object)$/;"	f	class:QString
operator ==	qstring.h	/^		int32_t operator==(const char* str)$/;"	f	class:QString
operator >	qdatetime.h	/^		bool operator>(const QDate &other) const$/;"	f	class:QDate
operator >	qdatetime.h	/^		bool operator>(const QTime &other) const$/;"	f	class:QTime
operator >	qdatetime.h	/^		inline bool operator>(const QDateTime &other) const $/;"	f	class:QDateTime
operator >=	qdatetime.h	/^		bool operator>=(const QDate &other) const$/;"	f	class:QDate
operator >=	qdatetime.h	/^		bool operator>=(const QTime &other) const$/;"	f	class:QTime
operator >=	qdatetime.h	/^		inline bool operator>=(const QDateTime &other) const$/;"	f	class:QDateTime
operator >>	qbytearray.h	/^		template<typename T> QByteArray& operator>>(T& e) throw(out_of_range)$/;"	f	class:QByteArray
operator >>	qstring.h	/^		friend std::istream& operator>>(std::istream& in, QString& object)$/;"	f	class:QString
operator []	qipv4.h	/^		uint8_t& operator[](int32_t i)$/;"	f	class:QIPv4Addr
operator []	qshinyxml.h	/^		ShinyNode& operator[](int32_t __pos)$/;"	f	class:QShinyXML
operator []	qstring.h	/^		const QChar operator[](int32_t i) const$/;"	f	class:QString
operator []	qvector.h	/^		T_TYPE& operator[](int32_t pos)$/;"	f	class:QVector
operator []	tinyxml2.h	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray
operator []	tinyxml2.h	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray
org	qalgorithm.h	/^			ORG_INFO* org;$/;"	m	struct:QQSParallel::__sort_info
out_of_range	qbytearray.h	/^				out_of_range(uint32_t p, uint32_t l, uint32_t s)$/;"	f	class:QByteArray::out_of_range
out_of_range	qbytearray.h	/^		class out_of_range: public std::exception {$/;"	c	class:QByteArray
ovector	qregexp.h	/^		int32_t ovector[DEFAULT_REGEX_POS_SIZE];$/;"	m	class:QRegExp3
own_	qbytearray.h	/^		bool own_;$/;"	m	class:QByteArray
pBitVector	qbitmap.h	/^		uint16_t* pBitVector;$/;"	m	class:QBitMap2
pBlockLibrary	qallocator.h	/^		char**		pBlockLibrary;$/;"	m	class:QAllocator
pBlockLibrary	qallocator.h	/^		char**		pBlockLibrary;$/;"	m	class:QPoolAllocator
pHashTable	qhashmap.h	/^		ChainNode<T_KEY, T>** pHashTable;$/;"	m	class:QLinearHash
pRecycleLibrary	qallocator.h	/^		char*		pRecycleLibrary;$/;"	m	class:QPoolAllocator
pTravPos	qhashmap.h	/^		ChainNode<T_KEY, T>* pTravPos;$/;"	m	class:QLinearHash
pURHashTable	qneologismrecognizer.h	/^		QLinearHash<uint16_t, recordHeader> *pURHashTable;$/;"	m	class:QNeologismRecognizer
pack	qdictcreator.cc	/^int32_t QDictCreator::pack(const char* pszInFileName, const char* pszOutFileName)$/;"	f	class:QDictCreator
pack_pos	qdictcreator.cc	/^int32_t QDictCreator::pack_pos(const char* pszInFileName, const char* pszOutFileName)$/;"	f	class:QDictCreator
page_len_	qnetworkaccessmanager.h	/^		int32_t		page_len_;$/;"	m	class:QNetworkAccessManager
parent	qredblacktree.h	/^	RBNode* parent;				\/\/ 父节点$/;"	m	struct:RBNode
parse	qgramparser.cc	/^int32_t QGramParser::parse(const std::string& groupName, std::list< std::vector<std::string> >& listPOS)$/;"	f	class:QGramParser
parse	qlogicalparser.cc	/^bool QLogicalParser::parse(const std::string& gram, const std::string& key, const std::vector<std::string>& meanings)$/;"	f	class:QLogicalParser
parse	qshinyxml.h	/^		int32_t parse(const char* __ptr_xml, int32_t __xml_len)$/;"	f	class:QShinyXML
parseFromString	qgramtree.cc	/^int32_t QGramTree::parseFromString(std::vector<std::string>& lines)$/;"	f	class:QGramTree
parse_array	cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_gram	qgramparser.cc	/^bool QGramParser::parse_gram(std::list< std::vector<std::string> >& listPOS, std::list< std::vector<std::string> >::iterator& it, const std::string& gram)$/;"	f	class:QGramParser
parse_hex4	cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_number	cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_reply_header	qhttpclient.h	/^		int32_t parse_reply_header(const char* header)$/;"	f	class:QHttpReplyHeader
parse_string	cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_url	qhttpclient.h	/^		int32_t parse_url()$/;"	f	class:QHttpRequestHeader
parse_value	cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
partition	qalgorithm.h	/^static int32_t partition(T_KEY* v, int32_t lBegin, int32_t lEnd)$/;"	f
passwd	qmysqlclient.h	/^		std::string passwd;$/;"	m	class:QMySQLClient
pat	qregexp.h	/^		char* pat;$/;"	m	class:QRegExp
patNameVec	qregexp.h	/^		std::vector<std::string> patNameVec;$/;"	m	class:QRegExp3
path	qdir.cc	/^const char* QDir::path() const$/;"	f	class:QDir
path	qfile.cc	/^std::string QFile::path() const$/;"	f	class:QFile
path_	qhttpclient.h	/^		std::string	path_;				\/\/ HTTP请求路径$/;"	m	class:QHttpRequestHeader
pattern	qregexp.h	/^		char* pattern() const$/;"	f	class:QRegExp
pattern	tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:
pdata_	qbuffer.h	/^		unsigned char* pdata_;$/;"	m	class:QBuffer
peek	qbytearray.h	/^		template<typename T> const QByteArray& peek(T& e) const throw(out_of_range)$/;"	f	class:QByteArray
pend_	qbuffer.h	/^		unsigned char* pend_;$/;"	m	class:QBuffer
period	qlatency.h	/^		uint32_t period;		\/* Number of seconds since first event and now *\/$/;"	m	class:QLatency
pfree_	qbuffer.h	/^		unsigned char* pfree_;$/;"	m	class:QBuffer
pid_	qtcpsocket.h	/^		uint32_t        pid_;$/;"	m	class:QTcpServer
pidfile_	qtcpsocket.h	/^		char*           pidfile_;$/;"	m	class:QTcpServer
ping	qredisclient.h	/^		int32_t ping()$/;"	f	class:QRedisClient
pop	qhashmap.h	/^		bool pop(uint64_t hashKey, const T_KEY& key)$/;"	f	class:QLinearHash
pop	qheap.h	/^		T_TYPE pop()$/;"	f	class:QMaxHeap
pop	qheap.h	/^		T_TYPE pop()$/;"	f	class:QMinHeap
pop	qqueue.h	/^		T_TYPE pop()$/;"	f	class:QListQueue
pop	qqueue.h	/^		T_TYPE pop()$/;"	f	class:QPriorityQueue
pop	qqueue.h	/^		T_TYPE pop()$/;"	f	class:QQueue
pop	qstack.h	/^		bool pop(T_TYPE& item)$/;"	f	class:QStack
pop_non_blocking	qheap.h	/^		int32_t pop_non_blocking(T_TYPE& x)$/;"	f	class:QMaxHeap
pop_non_blocking	qheap.h	/^		int32_t pop_non_blocking(T_TYPE& x)$/;"	f	class:QMinHeap
pop_non_blocking	qqueue.h	/^		int32_t pop_non_blocking(T_TYPE& item)$/;"	f	class:QPriorityQueue
pop_non_blocking	qqueue.h	/^		int32_t pop_non_blocking(T_TYPE& item)$/;"	f	class:QQueue
port	qlbcluster.h	/^	int32_t 	port;		\/\/ 集群服务器PORT端口号$/;"	m	struct:__server_info
port_	qhttpclient.h	/^		int32_t		port_;				\/\/ HTTP请求端口号$/;"	m	class:QHttpRequestHeader
port_	qipv4.h	/^		int32_t port_;$/;"	m	class:QIPv4Peer
position	qbytearray.h	/^		uint32_t position() const$/;"	f	class:QByteArray
position	qbytearray.h	/^		uint32_t position(uint32_t p) throw(out_of_range)$/;"	f	class:QByteArray
position_	qbytearray.h	/^		uint32_t position_;$/;"	m	class:QByteArray
post	qglobal.h	/^		void post()$/;"	f	class:QTimedSem
pour	qbuffer.h	/^		inline int32_t pour(const uint64_t length)$/;"	f	class:QBuffer
pour	qdatastream.h	/^		inline int32_t pour(const int64_t length)$/;"	f	class:QDataStream
prepareTraversal	qdiskcache.h	/^		int32_t prepareTraversal()$/;"	f	class:QDiskCache
prepareTraversal	qhashmap.h	/^		int32_t prepareTraversal()$/;"	f	class:QLinearHash
prepareTraversal	qhashsearch.h	/^		int32_t prepareTraversal()$/;"	f	class:QHashSearch
prepareTraversal	qlist.h	/^		void prepareTraversal()$/;"	f	class:QList
prev	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
prev	qadlist.h	/^	struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	qlist.h	/^		T_TYPE prev()$/;"	f	class:QList
printGraph	qadjgraph.h	/^		void printGraph()$/;"	f	class:QAdjGraph
printKeyWords	qsimhasher.cc	/^void QSimHasher::printKeyWords(const std::vector< std::pair<std::string, double> >& keywords)$/;"	f	class:QSimHasher
printStateTransitionMatrix	qmarkovmodel.h	/^		void printStateTransitionMatrix()$/;"	f	class:QMarkovModel
print_array	cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt)$/;"	f	file:
print_number	cJSON.c	/^static char *print_number(cJSON *item)$/;"	f	file:
print_object	cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt)$/;"	f	file:
print_string	cJSON.c	/^static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}$/;"	f	file:
print_string_ptr	cJSON.c	/^static char *print_string_ptr(const char *str)$/;"	f	file:
print_value	cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt)$/;"	f	file:
priority	qlogicalparser.cc	/^int32_t QLogicalParser::priority(const char op)$/;"	f	class:QLogicalParser
processDownloadFunc	qnetworkaccessmanager.cc	/^size_t QNetworkAccessManager::processDownloadFunc(void* ptr, size_t size, size_t nmemb, void* userdata)$/;"	f	class:QNetworkAccessManager
processFunc	qnetworkaccessmanager.cc	/^size_t QNetworkAccessManager::processFunc(void* ptr, size_t size, size_t nmemb, void* userdata)$/;"	f	class:QNetworkAccessManager
process_flann	qopencv.h	/^static int process_flann(const char* fileName1, const char* fileName2, const char* newFileName)$/;"	f
process_image	qocrmanager.h	/^		int32_t process_image(const char* pszImagePath, char* pszOutText, int32_t max_size=BUFSIZ_1K)$/;"	f	class:QOcrManager
process_request	qhttpserver.h	/^		int32_t process_request(struct io_data_t* ptr_io_data)$/;"	f	class:QHttpServer
process_response_content	qhttpserver.h	/^		int32_t process_response_content(struct io_data_t* ptr_io_data)$/;"	f	class:QHttpServer
process_response_content_error	qhttpserver.h	/^		int32_t process_response_content_error(struct io_data_t* ptr_io_data, int32_t status)$/;"	f	class:QHttpServer
process_response_header	qhttpserver.h	/^		int32_t process_response_header(struct io_data_t* ptr_io_data)$/;"	f	class:QHttpServer
proto	qglobal.h	/^	unsigned char proto;$/;"	m	struct:HeadIP
protocol	qglobal.h	/^	__u8	protocol;$/;"	m	struct:iphdr
protocol_type	qtcpsocket.h	/^	uint16_t	protocol_type;$/;"	m	struct:requestHeader
protocol_type	qtcpsocket.h	/^	uint16_t	protocol_type;$/;"	m	struct:requestParam
protocol_type_	qtcpsocket.h	/^		uint16_t	protocol_type_;$/;"	m	class:QTcpClient
psh	qglobal.h	/^		psh:1,$/;"	m	struct:tcphdr
pstart_	qbuffer.h	/^		unsigned char* pstart_;$/;"	m	class:QBuffer
pszStateTransitionMatrix	qmarkovmodel.h	/^		double** pszStateTransitionMatrix;$/;"	m	class:QMarkovModel
pthis	qtcpsocket.h	/^	void		*pthis;$/;"	m	struct:threadInfo
pthread_id_t	qthread.h	/^typedef int32_t pthread_id_t;$/;"	t
pthread_t	qthread.h	/^typedef HANDLE pthread_t;$/;"	t
ptr	qhttpserver.h	/^	char*		ptr;				\/\/ 字符串指针$/;"	m	struct:slice_t
ptr_buf	qhttpserver.h	/^	char*		ptr_buf;			\/\/ 线程中使用内存$/;"	m	struct:thread_info_t
ptr_buf	qtcpsocket.h	/^	char*		ptr_buf;$/;"	m	struct:threadInfo
ptr_page_	qnetworkaccessmanager.h	/^		char*		ptr_page_;$/;"	m	class:QNetworkAccessManager
ptr_this	qhttpserver.h	/^	void*		ptr_this;			\/\/ 线程回调指针$/;"	m	struct:thread_info_t
ptrdiff_t	qglobal.h	/^typedef int32_t ptrdiff_t;			\/\/ 32 bit signed$/;"	t
ptrdiff_t	qglobal.h	/^typedef int64_t ptrdiff_t;			\/\/ 64 bit signed$/;"	t
push	qhashmap.h	/^		bool push(uint64_t hashKey, const T_KEY& key, const T& value)$/;"	f	class:QLinearHash
push	qheap.h	/^		void push(const T_TYPE& x)$/;"	f	class:QMaxHeap
push	qheap.h	/^		void push(const T_TYPE& x)$/;"	f	class:QMinHeap
push	qqueue.h	/^		int32_t push(const T_TYPE& item)$/;"	f	class:QListQueue
push	qqueue.h	/^		void push(const T_TYPE& item)$/;"	f	class:QPriorityQueue
push	qqueue.h	/^		void push(const T_TYPE& item)$/;"	f	class:QQueue
push	qstack.h	/^		bool push(const T_TYPE& item)$/;"	f	class:QStack
push_back	qlbcluster.h	/^		int32_t push_back(const SERVER_INFO& item)$/;"	f	class:QLBCluster
push_back	qlist.h	/^		void push_back(const T_TYPE& x)$/;"	f	class:QList
push_back	qvector.h	/^		void push_back(T_TYPE& item)$/;"	f	class:QVector
push_front	qlist.h	/^		void push_front(const T_TYPE& x)$/;"	f	class:QList
push_non_blocking	qheap.h	/^		int32_t push_non_blocking(const T_TYPE& x)$/;"	f	class:QMaxHeap
push_non_blocking	qheap.h	/^		int32_t push_non_blocking(const T_TYPE& x)$/;"	f	class:QMinHeap
push_non_blocking	qqueue.h	/^		int32_t push_non_blocking(const T_TYPE& item)$/;"	f	class:QPriorityQueue
push_non_blocking	qqueue.h	/^		int32_t push_non_blocking(const T_TYPE& item)$/;"	f	class:QQueue
push_urgent	qqueue.h	/^		int32_t push_urgent(const T_TYPE& item)$/;"	f	class:QListQueue
put	qbytearray.h	/^		QByteArray& put(const std::string& v) throw(out_of_range)$/;"	f	class:QByteArray
put	qbytearray.h	/^		template<typename T> QByteArray& put(const T& e) throw(out_of_range)$/;"	f	class:QByteArray
put	qbytearray.h	/^		virtual QByteArray& put(const char* src, uint32_t offset, uint32_t size) throw(out_of_range)$/;"	f	class:QByteArray
q_62string_to_id	qfunc.h	/^static inline uint64_t q_62string_to_id(std::string s) throw(std::runtime_error)$/;"	f
q_TCP_server	qglobal.h	/^static int32_t q_TCP_server(Q_SOCKET_T& in_listen, uint16_t in_port, int32_t backlog=511)$/;"	f
q_UDP_server	qglobal.h	/^static int32_t q_UDP_server(Q_SOCKET_T& in_listen, uint16_t in_port)$/;"	f
q_abs	qglobal.h	439;"	d
q_accept_socket	qglobal.h	/^static int32_t q_accept_socket(Q_SOCKET_T in_listen, Q_SOCKET_T& out_socket)$/;"	f
q_accept_socket	qglobal.h	/^static int32_t q_accept_socket(Q_SOCKET_T in_listen, Q_SOCKET_T& out_socket, char* ip, int32_t& port)$/;"	f
q_add_and_fetch	qglobal.h	/^__inline uint32_t q_add_and_fetch(uint32_t* val)$/;"	f
q_add_and_fetch	qglobal.h	/^__inline uint64_t q_add_and_fetch(uint64_t* val)$/;"	f
q_array_size	qglobal.h	448;"	d
q_average	qglobal.h	445;"	d
q_average_3	qglobal.h	446;"	d
q_bit	qglobal.h	449;"	d
q_byte_order	qglobal.h	/^static inline int32_t q_byte_order()$/;"	f
q_byte_swap	qglobal.h	/^static inline uint16_t q_byte_swap(uint16_t source)$/;"	f
q_byte_swap	qglobal.h	/^static inline uint32_t q_byte_swap(uint32_t source)$/;"	f
q_byte_swap	qglobal.h	/^static inline uint64_t q_byte_swap(uint64_t source)$/;"	f
q_byte_swap16	qglobal.h	/^static inline void q_byte_swap16(void* p)$/;"	f
q_byte_swap32	qglobal.h	/^static inline void q_byte_swap32(void* p)$/;"	f
q_byte_swap64	qglobal.h	/^static inline void q_byte_swap64(void* p)$/;"	f
q_calloc	qglobal.h	/^static inline void *q_calloc(uint32_t size)$/;"	f
q_change_file_size	qglobal.h	/^static int32_t q_change_file_size(FILE* fp, int64_t size)$/;"	f
q_check_pointer	qglobal.h	/^static void q_check_pointer(const char* file, int32_t line, const char* function)$/;"	f
q_clear_file	qglobal.h	/^static int32_t q_clear_file(char* org_file)$/;"	f
q_close_socket	qglobal.h	/^static void q_close_socket(Q_SOCKET_T in_socket)$/;"	f
q_connect_socket	qglobal.h	/^static int32_t q_connect_socket(Q_SOCKET_T& in_socket, char* in_ip, uint16_t in_port)$/;"	f
q_connect_socket_retry	qglobal.h	/^static int32_t q_connect_socket_retry(Q_SOCKET_T& in_socket, char* in_ip, uint16_t in_port)$/;"	f
q_contains	qfunc.h	/^static inline bool q_contains(const std::string& ss, char c)$/;"	f
q_contains	qfunc.h	/^static inline bool q_contains(const std::string& ss, const std::string& s)$/;"	f
q_create_thread	qglobal.h	/^static int32_t q_create_thread(HANDLE& hThreadHandle, LPTHREAD_START_ROUTINE in_function, void* in_argv)$/;"	f
q_create_thread	qglobal.h	/^static int32_t q_create_thread(LPTHREAD_START_ROUTINE in_function, void* in_argv)$/;"	f
q_create_thread	qglobal.h	/^static int32_t q_create_thread(pthread_t* tid, void*(in_function)(void*), void* in_argv)$/;"	f
q_create_thread	qglobal.h	/^static int32_t q_create_thread(void*(in_function)(void*), void* in_argv)$/;"	f
q_delete	qglobal.h	/^template<typename T_TYPE> static inline void q_delete(T_TYPE*& rp)$/;"	f
q_delete_array	qglobal.h	/^template<typename T_TYPE> static inline void q_delete_array(T_TYPE*& rp)$/;"	f
q_denoise	qfunc.h	/^static inline int32_t q_denoise(char* src, int32_t srclen, char* dest, int32_t max_size)$/;"	f
q_ends_with	qfunc.h	/^static inline bool q_ends_with(const char* src, int32_t srclen, const char* pat, int32_t patlen)$/;"	f
q_ends_with	qfunc.h	/^static inline bool q_ends_with(const std::string& ss, char c)$/;"	f
q_ends_with	qfunc.h	/^static inline bool q_ends_with(const std::string& ss, const std::string& s)$/;"	f
q_find	qfunc.h	/^static inline int32_t q_find(char *src, int32_t srclen, const char *pat, int32_t patlen)$/;"	f
q_find_KMP	qfunc.h	/^static inline int32_t q_find_KMP(char* src, int32_t srclen, const char* pat, int32_t patlen, int32_t* next, int32_t k=0)$/;"	f
q_find_first_of	qfunc.h	/^static inline int32_t q_find_first_of(char* src, int32_t srclen, char c)$/;"	f
q_find_last_of	qfunc.h	/^static inline int32_t q_find_last_of(char* src, int32_t srclen, char c)$/;"	f
q_format	qfunc.h	/^static inline std::string q_format(const char* fmt, ...)$/;"	f
q_format_byte_size	qglobal.h	/^static inline std::string q_format_byte_size(double bytes)$/;"	f
q_free	qglobal.h	/^static inline void q_free(void* ptr)$/;"	f
q_full_permutation	qfunc.h	/^static inline void q_full_permutation(char* perm, int32_t from, int32_t to)$/;"	f
q_get_cpu_processors	qglobal.h	/^static inline int32_t q_get_cpu_processors()$/;"	f
q_get_disk_usage	qglobal.h	/^static inline int32_t q_get_disk_usage(const char* path, uint64_t* used_bytes, uint64_t* total_bytes)$/;"	f
q_get_file_size	qglobal.h	/^static int64_t q_get_file_size(char* file)$/;"	f
q_get_kernel_info	qglobal.h	/^static inline int32_t q_get_kernel_info(char* kernel_info, int32_t size)$/;"	f
q_get_load_avg	qglobal.h	/^static inline int32_t q_get_load_avg()$/;"	f
q_get_mem_usage	qglobal.h	/^static inline int32_t q_get_mem_usage(uint64_t* used_mem_bytes, uint64_t* total_mem_bytes)$/;"	f
q_get_user_id	qglobal.h	/^static int32_t q_get_user_id(const char* username)$/;"	f
q_get_username	qglobal.h	/^static int32_t q_get_username(char* username, int32_t size)$/;"	f
q_getrlimit	qglobal.h	/^static inline int32_t q_getrlimit(__rlimit_resource_t resource, uint32_t& rlim_cur, uint32_t& rlim_max)$/;"	f
q_hex_dump	qfunc.h	/^static inline std::string q_hex_dump(const uint8_t* buffer, int32_t len)$/;"	f
q_hex_dump	qglobal.h	/^static inline void q_hex_dump(const char *descr, void *value, int32_t len)$/;"	f
q_id_to_62string	qfunc.h	/^static inline std::string q_id_to_62string(uint64_t value)$/;"	f
q_init_socket	qglobal.h	/^static int32_t q_init_socket()$/;"	f
q_is_alpha	qglobal.h	431;"	d
q_is_alpha_or_number	qglobal.h	433;"	d
q_is_integer	qfunc.h	/^static inline bool q_is_integer(const char* p)$/;"	f
q_is_lower	qglobal.h	435;"	d
q_is_number	qglobal.h	432;"	d
q_is_odd	qglobal.h	440;"	d
q_is_palindrome	qfunc.h	/^static inline bool q_is_palindrome(const char* s, int32_t n)$/;"	f
q_is_upper	qglobal.h	434;"	d
q_is_url	qfunc.h	/^static inline bool q_is_url(const char* pszSrc, int32_t iSrcLen=-1)$/;"	f
q_iterator_fibnacci	qglobal.h	/^static int64_t q_iterator_fibnacci(int64_t n)$/;"	f
q_left_trim	qfunc.h	/^static inline std::string& q_left_trim(std::string& ss)$/;"	f
q_line_tokenize	qfunc.h	/^static inline std::vector<std::string> q_line_tokenize(const std::string& ss)$/;"	f
q_local_ip	qglobal.h	/^static inline char* q_local_ip()$/;"	f
q_local_mac	qglobal.h	/^static inline int32_t q_local_mac(char* mac, int32_t mac_size)$/;"	f
q_lock_dec	qglobal.h	/^__inline void q_lock_dec(uint32_t* val)$/;"	f
q_lock_dec	qglobal.h	/^__inline void q_lock_dec(uint64_t* val)$/;"	f
q_lock_inc	qglobal.h	/^__inline void q_lock_inc(uint32_t* val)$/;"	f
q_lock_inc	qglobal.h	/^__inline void q_lock_inc(uint64_t* val)$/;"	f
q_lower	qglobal.h	437;"	d
q_malloc	qglobal.h	/^static inline void *q_malloc(uint32_t size)$/;"	f
q_malloc_size	qglobal.h	/^static inline uint32_t q_malloc_size(void* ptr)$/;"	f
q_max	qglobal.h	441;"	d
q_max_3	qglobal.h	443;"	d
q_memfrob	qglobal.h	/^static char *q_memfrob(char* s, uint32_t n)$/;"	f
q_min	qglobal.h	442;"	d
q_min_3	qglobal.h	444;"	d
q_new	qglobal.h	/^template<typename T_TYPE> static inline T_TYPE *q_new()$/;"	f
q_new_array	qglobal.h	/^template<typename T_TYPE> static inline T_TYPE *q_new_array(uint32_t size)$/;"	f
q_next_KMP	qfunc.h	/^static inline void q_next_KMP(char* src, int32_t srclen, int32_t* next)$/;"	f
q_normalize	qfunc.h	/^static inline int32_t q_normalize(char* src, int32_t srclen)$/;"	f
q_realloc	qglobal.h	/^static inline void *q_realloc(void* ptr, uint32_t size)$/;"	f
q_recovery_file	qglobal.h	/^static int32_t q_recovery_file(char* org_file)$/;"	f
q_recursion_fibnacci	qglobal.h	/^static int64_t q_recursion_fibnacci(int64_t n)$/;"	f
q_recvbuf	qglobal.h	/^static int32_t q_recvbuf(Q_SOCKET_T in_socket, char* in_buffer, int32_t in_buflen)$/;"	f
q_recvbuf_onebyte	qglobal.h	/^static int32_t q_recvbuf_onebyte(Q_SOCKET_T in_socket, char end_char, char* in_buffer, int32_t& in_buflen)$/;"	f
q_recvbuf_twobytes	qglobal.h	/^static int32_t q_recvbuf_twobytes(Q_SOCKET_T in_socket, char end_one, char end_two, char* in_buffer, int32_t& in_buflen)$/;"	f
q_repair_file	qglobal.h	/^static int32_t q_repair_file(char* file, const char* end_flag, int32_t end_flag_len, int64_t* repair_len=NULL)$/;"	f
q_repair_url	qfunc.h	/^static inline std::string q_repair_url(const std::string& url, const std::string& host)$/;"	f
q_replace	qfunc.h	/^static inline std::string q_replace(const std::string& ss, const std::string& search, const std::string& replace)$/;"	f
q_right_trim	qfunc.h	/^static inline int32_t q_right_trim(char* str, int32_t len)$/;"	f
q_right_trim	qfunc.h	/^static inline std::string& q_right_trim(std::string& ss)$/;"	f
q_sendbuf	qglobal.h	/^static int32_t q_sendbuf(Q_SOCKET_T in_socket, char* in_buffer, int32_t in_buflen)$/;"	f
q_sendfile	qglobal.h	/^static int32_t q_sendfile(Q_SOCKET_T in_socket, char* in_file)$/;"	f
q_sent_tokenize	qfunc.h	/^static inline std::vector<std::string> q_sent_tokenize(const std::string& ss)$/;"	f
q_serve_forever	qglobal.h	472;"	d
q_set_keepalive	qglobal.h	/^static int32_t q_set_keepalive(Q_SOCKET_T in_socket, int32_t keepalive_time, int32_t keepalive_interval)$/;"	f
q_set_nodelay	qglobal.h	/^static int32_t q_set_nodelay(Q_SOCKET_T in_socket)$/;"	f
q_set_nonblocking	qglobal.h	/^static int32_t q_set_nonblocking(Q_SOCKET_T in_socket)$/;"	f
q_set_overtime	qglobal.h	/^static int32_t q_set_overtime(Q_SOCKET_T in_socket, int32_t in_time)$/;"	f
q_setrlimit	qglobal.h	/^static inline int32_t q_setrlimit(__rlimit_resource_t resource, uint32_t rlim)$/;"	f
q_simplify	qfunc.h	/^static inline std::string q_simplify(const std::string& ss)$/;"	f
q_sleep	qglobal.h	468;"	d
q_sleep	qglobal.h	470;"	d
q_snprintf	qglobal.h	455;"	d
q_snprintf	qglobal.h	461;"	d
q_split	qfunc.h	/^static inline int32_t q_split(char* src, int32_t srclen, char* sep, int32_t seplen, char** dest)$/;"	f
q_split	qfunc.h	/^static inline int32_t q_split(char* src, int32_t srclen, char* sep, int32_t seplen, int32_t pos[], int32_t pos_size)$/;"	f
q_split	qfunc.h	/^static inline std::vector<std::string> q_split(const std::string& ss, char sep)$/;"	f
q_split	qfunc.h	/^static inline std::vector<std::string> q_split(const std::string& ss, const std::string& sep)$/;"	f
q_split	qfunc.h	/^static inline void q_split(const std::string& ss, char sep, std::list<std::string>& elems)$/;"	f
q_split	qfunc.h	/^static inline void q_split(const std::string& ss, char sep, std::vector<std::string>& elems)$/;"	f
q_split	qfunc.h	/^static inline void q_split(const std::string& ss, const std::string& sep, std::list<std::string>& elems)$/;"	f
q_split	qfunc.h	/^static inline void q_split(const std::string& ss, const std::string& sep, std::vector<std::string>& elems)$/;"	f
q_split_any	qfunc.h	/^static inline std::vector<std::string> q_split_any(const std::string& ss, const std::string& sep)$/;"	f
q_split_any	qfunc.h	/^static inline void q_split_any(const std::string& ss, const std::string& sep, std::list<std::string>& elems)$/;"	f
q_split_any	qfunc.h	/^static inline void q_split_any(const std::string& ss, const std::string& sep, std::vector<std::string>& elems)$/;"	f
q_sscanf	qglobal.h	454;"	d
q_sscanf	qglobal.h	460;"	d
q_starts_with	qfunc.h	/^static inline bool q_starts_with(const char* src, int32_t srclen, const char* pat, int32_t patlen)$/;"	f
q_starts_with	qfunc.h	/^static inline bool q_starts_with(const std::string& ss, char c)$/;"	f
q_starts_with	qfunc.h	/^static inline bool q_starts_with(const std::string& ss, const std::string& s)$/;"	f
q_stod	qfunc.h	/^static inline bool q_stod(char* src, double* value)$/;"	f
q_stod	qfunc.h	/^static inline double q_stod(const std::string& ss)$/;"	f
q_stof	qfunc.h	/^static inline bool q_stof(char* src, float* value)$/;"	f
q_stoi	qfunc.h	/^static inline int32_t q_stoi(char *src, int32_t srclen)$/;"	f
q_stoi	qfunc.h	/^static inline int32_t q_stoi(const std::string& ss)$/;"	f
q_stol	qfunc.h	/^static inline int64_t q_stol(char* src, int32_t srclen)$/;"	f
q_stoui	qfunc.h	/^static inline uint32_t q_stoui(char *src, int32_t srclen)$/;"	f
q_stoui	qfunc.h	/^static inline uint32_t q_stoui(const std::string& ss)$/;"	f
q_stoull	qfunc.h	/^static inline uint64_t q_stoull(char* src, int32_t srclen)$/;"	f
q_stoull	qfunc.h	/^static inline uint64_t q_stoull(const std::string& ss)$/;"	f
q_strcasecmp	qglobal.h	457;"	d
q_strcasecmp	qglobal.h	463;"	d
q_strcat	qfunc.h	/^static inline void q_strcat(char* src, char* dest)$/;"	f
q_strchr	qfunc.h	/^static inline char *q_strchr(char *src, int32_t srclen, char c)$/;"	f
q_strcmp	qfunc.h	/^static inline int32_t q_strcmp(char* src, char* dest)$/;"	f
q_strcpy	qfunc.h	/^static inline void q_strcpy(char*src, char* dest)$/;"	f
q_strdel	qfunc.h	/^static inline int32_t q_strdel(char* src, int32_t srclen, char* str, int32_t len)$/;"	f
q_strdel_cdata	qfunc.h	/^static inline int32_t q_strdel_cdata(char* src, int32_t srclen)$/;"	f
q_strdup	qglobal.h	/^static inline char* q_strdup(const char* ptr)$/;"	f
q_strlen	qfunc.h	/^static inline int32_t q_strlen(char* src)$/;"	f
q_strncasecmp	qglobal.h	458;"	d
q_strncasecmp	qglobal.h	464;"	d
q_strrep	qfunc.h	/^static inline int32_t q_strrep(char* src, int32_t srclen, char* from, int32_t fromlen, char* to, int32_t tolen, char* dest, int32_t max_size)$/;"	f
q_strrep_in_place	qfunc.h	/^static inline int32_t q_strrep_in_place(char* src, int32_t srclen, char* from, int32_t fromlen, char* to, int32_t tolen)$/;"	f
q_strrev	qfunc.h	/^static inline void q_strrev(char* beg, char* end)$/;"	f
q_strstr	qfunc.h	/^static inline char *q_strstr(char* src, int32_t srclen, const char* pat, int32_t patlen)$/;"	f
q_sub_and_fetch	qglobal.h	/^__inline uint32_t q_sub_and_fetch(uint32_t* val)$/;"	f
q_sub_and_fetch	qglobal.h	/^__inline uint64_t q_sub_and_fetch(uint64_t* val)$/;"	f
q_substr	qfunc.h	/^static inline std::string q_substr(const std::string& ss, const std::string& s1, const std::string& s2)$/;"	f
q_substr_all	qfunc.h	/^static inline std::vector<std::string> q_substr_all(const std::string& ss, const std::string& s1, const std::string& s2)$/;"	f
q_swap	qglobal.h	/^template<typename T_TYPE> static inline void q_swap(T_TYPE& val1, T_TYPE& val2)$/;"	f
q_swap_file	qglobal.h	/^static int32_t q_swap_file(char* new_file, char* org_file)$/;"	f
q_terminate	qglobal.h	451;"	d
q_thread_id	qglobal.h	/^static uint64_t q_thread_id()$/;"	f
q_thread_join	qglobal.h	/^static int32_t q_thread_join(HANDLE hThreadHandle)$/;"	f
q_thread_join	qglobal.h	/^static int32_t q_thread_join(pthread_t tid)$/;"	f
q_to_list	qfunc.h	/^static inline std::list<std::string> q_to_list(const std::vector<std::string>& vec)$/;"	f
q_to_lower	qfunc.h	/^static inline char* q_to_lower(char* psz_buf)$/;"	f
q_to_lower	qfunc.h	/^static inline std::string q_to_lower(const std::string& ss)$/;"	f
q_to_num	qfunc.h	/^static inline int32_t q_to_num(char* src, int32_t srclen)$/;"	f
q_to_str	qfunc.h	/^static inline void q_to_str(double n, char* buffer, int32_t bufferSize)$/;"	f
q_to_str	qfunc.h	/^static inline void q_to_str(float n, char* buffer, int32_t bufferSize)$/;"	f
q_to_str	qfunc.h	/^static inline void q_to_str(int32_t n, char* buffer, int32_t bufferSize)$/;"	f
q_to_str	qfunc.h	/^static inline void q_to_str(int64_t n, char* buffer, int32_t bufferSize)$/;"	f
q_to_str	qfunc.h	/^static inline void q_to_str(uint32_t n, char* buffer, int32_t bufferSize)$/;"	f
q_to_str	qfunc.h	/^static inline void q_to_str(uint64_t n, char* buffer, int32_t bufferSize)$/;"	f
q_to_string	qfunc.h	/^static inline std::string q_to_string(double val)$/;"	f
q_to_string	qfunc.h	/^static inline std::string q_to_string(int32_t n)$/;"	f
q_to_string	qfunc.h	/^static inline std::string q_to_string(uint32_t n)$/;"	f
q_to_string	qfunc.h	/^static inline std::string q_to_string(uint64_t n)$/;"	f
q_to_upper	qfunc.h	/^static inline char* q_to_upper(char* psz_buf)$/;"	f
q_to_upper	qfunc.h	/^static inline std::string q_to_upper(const std::string& ss)$/;"	f
q_to_vector	qfunc.h	/^static inline std::vector<std::string> q_to_vector(const std::list<std::string>& lst)$/;"	f
q_trim	qfunc.h	/^static inline char* q_trim(char* str, int32_t len)$/;"	f
q_trim	qfunc.h	/^static inline std::string& q_trim(std::string& ss)$/;"	f
q_trim_skip	qfunc.h	/^static inline int32_t q_trim_skip(char* str, int32_t len, char*& beg, char*& end)$/;"	f
q_unicode_hex_decode	qfunc.h	/^static inline int32_t q_unicode_hex_decode(char* pszSrc, int32_t iSrcLen, char* pszDest, int32_t iMaxSize)$/;"	f
q_upper	qglobal.h	436;"	d
q_url_decode	qfunc.h	/^static inline int32_t q_url_decode(char* pszSrc, int32_t iSrcLen, char* pszDest, int32_t iMaxSize)$/;"	f
q_url_encode	qfunc.h	/^static inline int32_t q_url_encode(char* pszSrc, int32_t iSrcLen, char* pszDest, int32_t iMaxSize)$/;"	f
qch	qstring.h	/^		QChar* qch;$/;"	m	class:QString
qchar	qneologismrecognizer.h	/^			uint16_t qchar;$/;"	m	struct:QNeologismRecognizer::recordHeader
qsw	qnetworkaccessmanager.h	/^		QStopwatch	qsw;$/;"	m	class:QNetworkAccessManager
query	qgramtree.cc	/^int32_t QGramTree::query(const std::string& groupName, const std::string& meaning, std::vector<std::string>& grams)$/;"	f	class:QGramTree
query	qredisclient.h	/^		int32_t query(const char* command)$/;"	f	class:QRedisClient
queue_	qqueue.h	/^		T_TYPE* queue_;$/;"	m	class:QPriorityQueue
queue_	qqueue.h	/^		T_TYPE* queue_;$/;"	m	class:QQueue
queue_size_	qtcpsocket.h	/^		int32_t         queue_size_;$/;"	m	class:QTcpServer
quick_sort	qalgorithm.h	/^		int32_t quick_sort(int32_t begin, int32_t end, T_KEY* key)$/;"	f	class:QQSParallel
rLink_	qlist.h	/^			NodeInfo *lLink_, *rLink_;$/;"	m	struct:QList::NodeInfo
rawData	qbytearray.h	/^		const QByteArray& rawData(int32_t index, const char* &dst, uint32_t size) const throw(out_of_range)$/;"	f	class:QByteArray
rdb_file_	qstridallocator.h	/^		char		rdb_file_[256];$/;"	m	class:QStrIDAllocator
rdb_fp_	qstridallocator.h	/^		FILE*		rdb_fp_;$/;"	m	class:QStrIDAllocator
rdb_length_	qstridallocator.h	/^		int64_t		rdb_length_;$/;"	m	class:QStrIDAllocator
rdlock	qglobal.h	/^		inline void rdlock()$/;"	f	class:QRWLock
rdlock	qglobal.h	/^		void rdlock()$/;"	f	class:QRWLockFunc
read	qfile.cc	/^int64_t QFile::read(char* data, int64_t maxlen)$/;"	f	class:QFile
readAll	qfile.cc	/^char* QFile::readAll(char *file_name, int64_t* len)$/;"	f	class:QFile
readAll	qfile.cc	/^std::string QFile::readAll()$/;"	f	class:QFile
readAll	qfile.cc	/^std::string QFile::readAll(const char* file_name) throw (std::runtime_error)$/;"	f	class:QFile
readAll	qstring.h	/^		QString& readAll(const char* pFileName)$/;"	f	class:QString
readLine	qfile.cc	/^std::string QFile::readLine()$/;"	f	class:QFile
read_callback	qmailsender.h	/^		static size_t read_callback(void* ptr, size_t size, size_t nmemb, void* userp)$/;"	f	class:QMailSender
read_cluster_config	qlbcluster.h	/^		int32_t read_cluster_config(const char* cfg_file)$/;"	f	class:QLBCluster
read_cnt	qglobal.h	/^		uint32_t read_cnt;$/;"	m	class:QRWLock
read_fp	qchinesespelling.h	/^		FILE* read_fp;$/;"	m	class:QChineseSpelling
read_path_	qtcpsocket.h	/^		char*           read_path_;$/;"	m	class:QTcpServer
readcond	qglobal.h	/^		pthread_cond_t readcond;$/;"	m	class:QRWLockFunc
readdir	qdir.cc	/^bool QDir::readdir(char* fileName)$/;"	f	class:QDir
readers	qglobal.h	/^		int32_t readers;$/;"	m	class:QRWLockFunc
rear_	qqueue.h	/^		ListNode* rear_;$/;"	m	class:QListQueue
rear_	qqueue.h	/^		int32_t rear_;$/;"	m	class:QQueue
rearrangeIndex	qdenseindexmanager.h	/^		int32_t rearrangeIndex()$/;"	f	class:QDenseIndexManager
rearrangeLatency	qlatency.h	/^		int32_t rearrangeLatency()$/;"	f	class:QLatency
recordHeader	qdictcreator.h	/^struct recordHeader {$/;"	s
recordHeader	qneologismrecognizer.h	/^		struct recordHeader {$/;"	s	class:QNeologismRecognizer
recordHeader	qwordtokenizer.h	/^struct recordHeader {$/;"	s
recv_buf_nonblocking	qhttpserver.h	/^		int32_t recv_buf_nonblocking(Q_SOCKET_T in_socket, char* in_buf, int32_t request_header_size)$/;"	f	class:QHttpServer
recv_data	qsocketpool.h	/^		int32_t recv_data(char* data, int32_t data_len)$/;"	f	class:QClientSocket
recv_reply_content	qhttpclient.h	/^		int32_t recv_reply_content(Q_SOCKET_T sock, QDataStream& stream, int32_t content_bytes)$/;"	f	class:QHttpClient
recv_reply_header	qhttpclient.h	/^		int32_t recv_reply_header(Q_SOCKET_T sock, QStringBuffer& buffer)$/;"	f	class:QHttpClient
referer	qhttpserver.h	/^	struct slice_t	referer;			\/\/ HTTP客户端来路页面$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
referer_	qhttpclient.h	/^		std::string	referer_;			\/\/ HTTP协议来路页面$/;"	m	class:QHttpRequestHeader
reg	qregexp.h	/^		pcre* reg;$/;"	m	class:QRegExp
regVec	qregexp.h	/^		std::vector<pcre*> regVec;$/;"	m	class:QRegExp3
reg_handle	qregexp.h	/^		pcre** reg_handle;$/;"	m	class:QRegExp2
regex_match	qregexp.h	/^		bool regex_match(const char* src, int32_t srclen)$/;"	f	class:QRegExp
regex_match	qregexp.h	/^		bool regex_match(const std::string& src)$/;"	f	class:QRegExp
regex_sub	qregexp.h	/^		int32_t regex_sub(const char* src, int32_t srclen, int32_t pos[], int32_t pos_vec_size)$/;"	f	class:QRegExp
regex_sub	qregexp.h	/^		std::vector<std::string> regex_sub(const std::string& src)$/;"	f	class:QRegExp
regex_sub_all	qregexp.h	/^		int32_t regex_sub_all(const char* src, int32_t srclen, int32_t& unit_size, int32_t pos[], int32_t pos_vec_size)$/;"	f	class:QRegExp
regex_sub_all	qregexp.h	/^		std::vector<std::string> regex_sub_all(const std::string& src, int32_t& unit_size)$/;"	f	class:QRegExp
relax	qthread.h	/^		bool relax(int32_t msecs)$/;"	f	class:QThread
relaxsem	qthread.h	/^		QTimedSem relaxsem;$/;"	m	class:QThread
release	qlogger.cc	/^void QLogger::release()$/;"	f	class:QLogger
releaseConnection	qmysqlclient.cc	/^void QMySQLClient::releaseConnection(sql::Connection *conn)$/;"	f	class:QMySQLClient
releaseObject	qobjectpool.h	/^		void releaseObject(T_TYPE* object)$/;"	f	class:QObjectPool
release_socket_connection	qsocketpool.h	/^		int32_t release_socket_connection(QClientSocket* socket_client)$/;"	f	class:QSocketPool
remaining	qbytearray.h	/^		int32_t remaining() const$/;"	f	class:QByteArray
remove	qdir.cc	/^bool QDir::remove(const char* fileName)$/;"	f	class:QDir
remove	qfile.cc	/^bool QFile::remove()$/;"	f	class:QFile
remove	qfile.cc	/^bool QFile::remove(const char* file_name)$/;"	f	class:QFile
remove	qredblacktree.h	/^		int32_t remove(T_KEY _key, bool count_flag=false)$/;"	f	class:QRedBlackTree
removeEdge	qadjgraph.h	/^		bool removeEdge(const int32_t vertex1, const int32_t vertex2)$/;"	f	class:QAdjGraph
remove_socket_in_epoll	qhttpserver.h	/^		int32_t remove_socket_in_epoll(int32_t fd)$/;"	f	class:QHttpServer
rename	qdir.cc	/^bool QDir::rename(const char* oldName, const char* newName)$/;"	f	class:QDir
rename	qfile.cc	/^bool QFile::rename(const char* file_name)$/;"	f	class:QFile
rename	qfile.cc	/^bool QFile::rename(const char* oldName, const char* newName)$/;"	f	class:QFile
replace_Key_Value	qmemcachedclient.h	/^		int32_t replace_Key_Value(const char* key, int32_t key_len, const char* value, int32_t value_len)$/;"	f	class:QMemcachedClient
replyHeader	qtcpsocket.h	/^struct replyHeader {$/;"	s
replyParam	qtcpsocket.h	/^struct replyParam {$/;"	s
reply_buffer	qtcpsocket.h	/^	char*           reply_buffer;$/;"	m	struct:clientInfo
reply_buffer_	qtcpsocket.h	/^		char*           reply_buffer_;$/;"	m	class:QTcpClient
reply_buffer_size	qtcpsocket.h	/^	int32_t         reply_buffer_size;$/;"	m	struct:clientInfo
reply_buffer_size_	qtcpsocket.h	/^		int32_t         reply_buffer_size_;$/;"	m	class:QTcpClient
reply_content_	qhttpclient.h	/^		QDataStream		reply_content_;		\/\/ HTTP协议响应内容$/;"	m	class:QHttpClient
reply_header_	qhttpclient.h	/^		QHttpReplyHeader	reply_header_;		\/\/ HTTP协议请求头信息长度$/;"	m	class:QHttpClient
reply_header_buffer_	qhttpclient.h	/^		QStringBuffer		reply_header_buffer_;	\/\/ HTTP协议响应消息报头$/;"	m	class:QHttpClient
request	qhttpclient.h	/^		int32_t request(QHttpRequestHeader& request_header, char* out_buf, int32_t max_buf_size)$/;"	f	class:QHttpClient
requestHeader	qtcpsocket.h	/^struct requestHeader {$/;"	s
requestParam	qtcpsocket.h	/^struct requestParam {$/;"	s
request_buffer	qtcpsocket.h	/^	char*           request_buffer;$/;"	m	struct:clientInfo
request_buffer_	qtcpsocket.h	/^		char*           request_buffer_;$/;"	m	class:QTcpClient
request_buffer_size	qtcpsocket.h	/^	int32_t         request_buffer_size;$/;"	m	struct:clientInfo
request_buffer_size_	qtcpsocket.h	/^		int32_t         request_buffer_size_;$/;"	m	class:QTcpClient
request_content	qhttpserver.h	/^	char* 		request_content;		\/\/ HTTP协议请求正文信息$/;"	m	struct:io_data_t
request_content_len	qhttpserver.h	/^	int32_t 	request_content_len;		\/\/ HTTP协议请求正文信息的实际长度$/;"	m	struct:io_data_t
request_content_size	qhttpserver.h	/^	int32_t		request_content_size;		\/\/ HTTP协议请求正文信息的最大长度$/;"	m	struct:io_data_t
request_content_size	qhttpserver.h	/^	int32_t		request_content_size;		\/\/ IO请求正文信息的内存大小$/;"	m	struct:config_info_t
request_header	qhttpserver.h	/^	char* 		request_header;			\/\/ HTTP协议请求头信息$/;"	m	struct:io_data_t
request_header_len	qhttpserver.h	/^	int32_t 	request_header_len;		\/\/ HTTP协议请求头信息的实际长度$/;"	m	struct:io_data_t
request_header_size	qhttpserver.h	/^	int32_t		request_header_size;		\/\/ HTTP协议请求头信息的最大长度$/;"	m	struct:io_data_t
request_header_size	qhttpserver.h	/^	int32_t		request_header_size;		\/\/ IO请求头信息的内存大小$/;"	m	struct:config_info_t
res1	qglobal.h	/^		res1:4,$/;"	m	struct:tcphdr
res1	qglobal.h	/^	__u16	res1:4,$/;"	m	struct:tcphdr
reserved	qtcpsocket.h	/^	char		reserved[14];$/;"	m	struct:replyHeader
reserved	qtcpsocket.h	/^	char		reserved[14];$/;"	m	struct:replyParam
reserved	qtcpsocket.h	/^	char		reserved[14];$/;"	m	struct:requestHeader
reserved	qtcpsocket.h	/^	char		reserved[14];$/;"	m	struct:requestParam
reserved	qthread.h	/^		int32_t reserved;		\/\/ for priorities$/;"	m	class:QThread
reset	qbytearray.h	/^		void reset()$/;"	f	class:QByteArray
reset	qbytearray.h	/^		void reset(uint32_t size)$/;"	f	class:QByteArray
reset	qfile.cc	/^void QFile::reset()$/;"	f	class:QFile
reset	qglobal.h	/^		inline void reset()$/;"	f	class:QStopwatch
reset	qglobal.h	/^		inline void reset()$/;"	f	class:QTrigger
reset	qglobal.h	/^		void reset()$/;"	f	class:QTimedSem
reset	qhttpserver.h	/^	void reset()$/;"	f	struct:io_data_t
reset	qlatency.h	/^		int32_t reset()$/;"	f	class:QLatency
reset	qregexp.h	/^		void reset()$/;"	f	class:QRegExp3
resetAllocator	qallocator.cc	/^void QAllocator::resetAllocator()$/;"	f	class:QAllocator
resetAllocator	qallocator.cc	/^void QPoolAllocator::resetAllocator()$/;"	f	class:QPoolAllocator
resetOption	qnetworkaccessmanager.cc	/^void QNetworkAccessManager::resetOption()$/;"	f	class:QNetworkAccessManager
resize	qopencv.h	/^static int resize(const char* fileName, const char* newFileName, float ratio = 0.5)$/;"	f
resize	qvector.h	/^		void resize(int32_t size)$/;"	f	class:QVector
response_content	qhttpserver.h	/^	char* 		response_content;		\/\/ HTTP协议响应正文信息$/;"	m	struct:io_data_t
response_content_len	qhttpserver.h	/^	int32_t 	response_content_len;		\/\/ HTTP协议响应正文信息的实际长度$/;"	m	struct:io_data_t
response_content_size	qhttpserver.h	/^	int32_t		response_content_size;		\/\/ HTTP协议响应正文信息的最大长度$/;"	m	struct:io_data_t
response_content_size	qhttpserver.h	/^	int32_t		response_content_size;		\/\/ IO响应正文信息的内存大小$/;"	m	struct:config_info_t
response_header	qhttpserver.h	/^	char*		response_header;		\/\/ HTTP协议响应头信息$/;"	m	struct:io_data_t
response_header_len	qhttpserver.h	/^	int32_t		response_header_len;		\/\/ HTTP协议响应头信息的实际长度$/;"	m	struct:io_data_t
response_header_size	qhttpserver.h	/^	int32_t		response_header_size;		\/\/ HTTP协议响应头信息的最大长度$/;"	m	struct:io_data_t
response_header_size	qhttpserver.h	/^	int32_t		response_header_size;		\/\/ IO响应头信息的内存大小$/;"	m	struct:config_info_t
right	qredblacktree.h	/^	RBNode* right;				\/\/ 右子节点$/;"	m	struct:RBNode
right	qstring.h	/^		QString right(int32_t len)$/;"	f	class:QString
rmdir	qdir.cc	/^bool QDir::rmdir()$/;"	f	class:QDir
rmdir	qdir.cc	/^bool QDir::rmdir(const char* dirpath)$/;"	f	class:QDir
root_	qtrietree.h	/^		QTrieNode*	root_;$/;"	m	class:QTrieTree
rst	qglobal.h	/^		rst:1,$/;"	m	struct:tcphdr
run_flag	qhttpserver.h	/^	int8_t		run_flag;			\/\/ 线程启动成功标识: 0未启动 1启动成功 -1启动失败$/;"	m	struct:thread_info_t
running	qthread.h	/^		int32_t running;$/;"	m	class:QThread
rw	qglobal.h	/^		QRWLock* rw;$/;"	m	class:QScopeRead
rw	qglobal.h	/^		QRWLock* rw;$/;"	m	class:QScopeWrite
s	qlogicalparser.h	/^		std::stack<int32_t> s;$/;"	m	class:QLogicalParser
saddr	qglobal.h	/^	__be32	saddr;$/;"	m	struct:iphdr
samples	qlatency.h	/^		uint32_t samples;		\/* Number of samples *\/$/;"	m	class:QLatency
samplesMax	qlatency.h	/^		uint32_t samplesMax;		\/* Max samples *\/$/;"	m	class:QLatency
save	qhashsearch.h	/^		int32_t save(char* filename)$/;"	f	class:QHashSearch
search	qhashmap.h	/^		bool search(uint64_t hashKey, const T_KEY& key, T& value)$/;"	f	class:QLinearHash
search	qredblacktree.h	/^		int32_t search(T_KEY _key, T& _value)$/;"	f	class:QRedBlackTree
search	qvector.h	/^		int32_t search(T_TYPE& item) const$/;"	f	class:QVector
searchKey	qdenseindexmanager.h	/^		int32_t searchKey(uint64_t key, void* vpData, int32_t maxDataSize)$/;"	f	class:QDenseIndexManager
searchKey_FL	qdiskcache.h	/^		int32_t searchKey_FL(Key key, void** vppRetBuf=NULL, int32_t iIndex=-1)$/;"	f	class:QDiskCache
searchKey_FL	qhashsearch.h	/^		int32_t searchKey_FL(Key key, void** vppRetBuf=NULL, int32_t iIndex=-1)$/;"	f	class:QHashSearch
searchKey_FL	qstoremanager.h	/^		int32_t searchKey_FL(uint64_t key, void* vpData=NULL, int32_t maxDataSize=0)$/;"	f	class:QStoreManager
searchKey_VL	qdiskcache.h	/^		int32_t searchKey_VL(Key key, void** vppRetBuf, int32_t* lpRetDataLen)$/;"	f	class:QDiskCache
searchKey_VL	qhashsearch.h	/^		int32_t searchKey_VL(Key key, void** vppRetBuf, int32_t* lpRetDataLen)$/;"	f	class:QHashSearch
searchKey_VL	qstoremanager.h	/^		int32_t searchKey_VL(uint64_t key, void* vpData, int32_t maxDataSize)$/;"	f	class:QStoreManager
second	qdatetime.h	/^		int32_t second() const$/;"	f	class:QTime
secsTo	qdatetime.h	/^		int32_t secsTo(const QTime &t) const$/;"	f	class:QTime
send	qudpsocket.h	/^		int32_t send(void* handle, char* send_buf, int32_t send_len, bool broadcast=false)$/;"	f	class:QUdpClient
sendMail	qmailsender.h	/^		bool sendMail(const std::string& strSubject, const std::string& strMailBody) $/;"	f	class:QMailSender
sendRequest	qtcpsocket.cc	/^int32_t QTcpClient::sendRequest(const char* ptr_data, int32_t data_len)$/;"	f	class:QTcpClient
send_buf_nonblocking	qhttpserver.h	/^		int32_t send_buf_nonblocking(Q_SOCKET_T in_socket, char* in_buf, int32_t buf_len)$/;"	f	class:QHttpServer
send_buffer_size_	qtcpsocket.h	/^		int32_t         send_buffer_size_;$/;"	m	class:QTcpServer
send_data	qsocketpool.h	/^		int32_t send_data(const char* data, int32_t data_len)$/;"	f	class:QClientSocket
send_ip_	qtcpsocket.h	/^		char*           send_ip_;$/;"	m	class:QTcpServer
send_port_	qtcpsocket.h	/^		int32_t         send_port_;$/;"	m	class:QTcpServer
send_thread	qtcpsocket.cc	/^Q_THREAD_T QTcpServer::send_thread(void* ptr_info)$/;"	f	class:QTcpServer
send_thread_max_	qtcpsocket.h	/^		int32_t	        send_thread_max_;$/;"	m	class:QTcpServer
send_thread_timeout_	qtcpsocket.h	/^		int32_t         send_thread_timeout_;$/;"	m	class:QTcpServer
seq	qglobal.h	/^	__be32	seq;$/;"	m	struct:tcphdr
sequence	qglobal.h	/^			u_int16_t	sequence;$/;"	m	struct:icmphdr::__anon1::__anon2
server	qhttpserver.h	/^	char*		server;				\/\/ HTTP协议响应服务器$/;"	m	struct:io_data_t
server_	qhttpclient.h	/^		std::string	server_;			\/\/ 服务器信息$/;"	m	class:QHttpReplyHeader
server_append	qmemcachedclient.h	/^		int32_t server_append(const char* ip, uint16_t port)$/;"	f	class:QMemcachedClient
server_connection_weight	qlbcluster.h	/^			float64_t	server_connection_weight;	\/\/ 服务器TCP连接指标权重$/;"	m	struct:QLBCluster::__server_cpu_info
server_count	qmemcachedclient.h	/^		uint32_t server_count()$/;"	f	class:QMemcachedClient
server_disk_weight	qlbcluster.h	/^			float64_t	server_disk_weight;		\/\/ 服务器磁盘信息指标权重$/;"	m	struct:QLBCluster::__server_cpu_info
server_info_	qlbcluster.h	/^		SERVER_INFO*		server_info_;		\/\/ 集群服务器列表信息$/;"	m	class:QLBCluster
server_ip	qhttpserver.h	/^	char		server_ip[16];			\/\/ 通信服务本机IP地址$/;"	m	struct:config_info_t
server_ip_	qsocketpool.h	/^		char			server_ip_[16];		\/\/ socket服务器IP地址$/;"	m	class:QSocketPool
server_ip_	qtcpsocket.h	/^		char            server_ip_[16];$/;"	m	class:QTcpClient
server_iter_	qlbcluster.h	/^		int32_t			server_iter_;		\/\/ 服务器指示变量$/;"	m	class:QLBCluster
server_load_weight	qlbcluster.h	/^			float64_t	server_load_weight;		\/\/ 服务器负载均值指标权重$/;"	m	struct:QLBCluster::__server_cpu_info
server_max_	qlbcluster.h	/^		int32_t			server_max_;		\/\/ 集群最大支持服务器结点数目$/;"	m	class:QLBCluster
server_memory_weight	qlbcluster.h	/^			float64_t	server_memory_weight;		\/\/ 服务器内存信息指标权重$/;"	m	struct:QLBCluster::__server_cpu_info
server_name	qhttpserver.h	/^	char		server_name[256];		\/\/ 服务名称$/;"	m	struct:config_info_t
server_name_	qtcpsocket.h	/^		char*           server_name_;$/;"	m	class:QTcpServer
server_now_	qlbcluster.h	/^		int32_t			server_now_;		\/\/ 集群当前实际服务器结点数目$/;"	m	class:QLBCluster
server_port	qhttpserver.h	/^	int32_t		server_port;			\/\/ 通信服务端口号$/;"	m	struct:config_info_t
server_port_	qsocketpool.h	/^		uint16_t		server_port_;		\/\/ socket服务端最大支持连接数$/;"	m	class:QSocketPool
server_port_	qtcpsocket.h	/^		uint16_t        server_port_;$/;"	m	class:QTcpClient
server_port_	qtcpsocket.h	/^		uint16_t        server_port_;$/;"	m	class:QTcpServer
server_process_weight	qlbcluster.h	/^			float64_t	server_process_weight;		\/\/ 服务器进程信息指标权重$/;"	m	struct:QLBCluster::__server_cpu_info
server_reset_all	qmemcachedclient.h	/^		int32_t server_reset_all()$/;"	f	class:QMemcachedClient
server_timeout_	qtcpsocket.h	/^		int32_t         server_timeout_;$/;"	m	class:QTcpClient
server_timeout_	qtcpsocket.h	/^		int32_t         server_timeout_;$/;"	m	class:QTcpServer
servers	qmemcachedclient.h	/^		memcached_server_st* servers;$/;"	m	class:QMemcachedClient
servertype	qglobal.h	/^	unsigned char servertype;$/;"	m	struct:HeadIP
set	qredisclient.h	/^		int32_t set(const char* key, const char* value)$/;"	f	class:QRedisClient
setBlackList	qocrmanager.h	/^		int32_t setBlackList(const char* pszBlackList=NULL)$/;"	f	class:QOcrManager
setCommandType	qtcpsocket.cc	/^void QTcpClient::setCommandType(uint16_t command_type)$/;"	f	class:QTcpClient
setCookie	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setCookie(const char* cookie)$/;"	f	class:QNetworkAccessManager
setCookieEnabled	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setCookieEnabled()$/;"	f	class:QNetworkAccessManager
setDate	qdatetime.h	/^		bool setDate(int32_t y, int32_t m, int32_t d)$/;"	f	class:QDate
setDate	qdatetime.h	/^		void setDate(const QDate& date)$/;"	f	class:QDateTime
setFileName	qfile.h	/^		inline void setFileName(const char* file_name)$/;"	f	class:QFile
setHMS	qdatetime.h	/^		bool setHMS(int32_t h, int32_t m, int32_t s, int32_t ms=0)$/;"	f	class:QTime
setHost	qhttpclient.h	/^		bool setHost(const char* host)$/;"	f	class:QHttpRequestHeader
setHost	qtcpsocket.cc	/^void QTcpClient::setHost(const char* server_ip, uint16_t server_port)$/;"	f	class:QTcpClient
setInterface	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setInterface(const char* interface)$/;"	f	class:QNetworkAccessManager
setMailFrom	qmailsender.h	/^		void setMailFrom(const std::string& mailFrom)$/;"	f	class:QMailSender
setMethod	qhttpclient.h	/^		void setMethod(Method method=GET)$/;"	f	class:QHttpRequestHeader
setOperateType	qtcpsocket.cc	/^void QTcpClient::setOperateType(uint16_t operate_type)$/;"	f	class:QTcpClient
setPasswd	qmailsender.h	/^		void setPasswd(const std::string& passwd)$/;"	f	class:QMailSender
setPath	qdir.cc	/^void QDir::setPath(const char* path)$/;"	f	class:QDir
setPattern	qregexp.h	/^		void setPattern(const char* pattern)$/;"	f	class:QRegExp
setPort	qhttpclient.h	/^		void setPort(int32_t port=80)$/;"	f	class:QHttpRequestHeader
setPort	qmailsender.h	/^		void setPort(int32_t port)$/;"	f	class:QMailSender
setProtocolType	qtcpsocket.cc	/^void QTcpClient::setProtocolType(uint16_t protocol_type)$/;"	f	class:QTcpClient
setProxy	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setProxy(const char* ip, int16_t port)$/;"	f	class:QNetworkAccessManager
setProxy	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setProxy(const char* proxy)$/;"	f	class:QNetworkAccessManager
setRedirectionEnabled	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setRedirectionEnabled(int64_t times)$/;"	f	class:QNetworkAccessManager
setReferer	qhttpclient.h	/^		bool setReferer(const char* referer)$/;"	f	class:QHttpRequestHeader
setReferer	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setReferer(const char* referer)$/;"	f	class:QNetworkAccessManager
setSize	qfile.cc	/^int32_t QFile::setSize(int64_t size)$/;"	f	class:QFile
setSmtpServer	qmailsender.h	/^		void setSmtpServer(const std::string& smtpServer)$/;"	f	class:QMailSender
setSourceType	qtcpsocket.cc	/^void QTcpClient::setSourceType(uint16_t source_type)$/;"	f	class:QTcpClient
setTime	qdatetime.h	/^		void setTime(const QTime& time)$/;"	f	class:QDateTime
setTimeout	qhttpclient.h	/^		void setTimeout(int32_t timeout=10000)$/;"	f	class:QHttpClient
setTimeout	qtcpsocket.cc	/^void QTcpClient::setTimeout(int32_t timeout)$/;"	f	class:QTcpClient
setURL	qhttpclient.h	/^		bool setURL(const char* url)$/;"	f	class:QHttpRequestHeader
setUser	qmailsender.h	/^		void setUser(const std::string& user)$/;"	f	class:QMailSender
setUserAgent	qhttpclient.h	/^		bool setUserAgent(const char* user_agent=NULL)$/;"	f	class:QHttpRequestHeader
setUserAgent	qnetworkaccessmanager.cc	/^bool QNetworkAccessManager::setUserAgent(const char* user_agent)$/;"	f	class:QNetworkAccessManager
setVersion	qhttpclient.h	/^		bool setVersion(const char* version="HTTP\/1.1")$/;"	f	class:QHttpRequestHeader
setVersion	qtcpsocket.cc	/^void QTcpClient::setVersion(uint64_t version)$/;"	f	class:QTcpClient
setWhiteList	qocrmanager.h	/^		int32_t setWhiteList(const char* pszWhiteList=NULL)$/;"	f	class:QOcrManager
set_Key_Value	qmemcachedclient.h	/^		int32_t set_Key_Value(const char* key, int32_t key_len, const char* value, int32_t value_len)$/;"	f	class:QMemcachedClient
set_bit	qbitmap.h	/^		inline void set_bit(uint8_t bit_num, bool value)$/;"	f	class:QBITS16
set_bit	qbitmap.h	/^		void set_bit(const uint32_t x, uint16_t v)$/;"	f	class:QBitMap2
set_bytes	qdatastream.h	/^		int32_t set_bytes(const void* data, const int64_t length)$/;"	f	class:QDataStream
set_bytes	qserialization.h	/^		static int32_t set_bytes(char* data, const int64_t data_len, int64_t& pos, const void* buf, const int64_t buf_length)$/;"	f	class:QSerialization
set_count_	qbitmap.h	/^		mutable uint32_t set_count_;$/;"	m	class:QBitMap
set_dead	qsocketpool.h	/^		void set_dead(bool dead=true)$/;"	f	class:QClientSocket
set_host	qipv4.h	/^		void set_host(const std::string& host)$/;"	f	class:QIPv4Peer
set_idle	qsocketpool.h	/^		void set_idle(bool idle=true)$/;"	f	class:QClientSocket
set_int16	qdatastream.h	/^		int32_t set_int16(const int16_t value)$/;"	f	class:QDataStream
set_int16	qserialization.h	/^		static int32_t set_int16(char* data, const int64_t data_len, int64_t& pos, const int16_t value)$/;"	f	class:QSerialization
set_int32	qdatastream.h	/^		int32_t set_int32(const int32_t value)$/;"	f	class:QDataStream
set_int32	qserialization.h	/^		static int32_t set_int32(char* data, const int64_t data_len, int64_t& pos, const int32_t value)$/;"	f	class:QSerialization
set_int64	qdatastream.h	/^		int32_t set_int64(const int64_t value)$/;"	f	class:QDataStream
set_int64	qserialization.h	/^		static int32_t set_int64(char* data, const int64_t data_len, int64_t& pos, const int64_t value)$/;"	f	class:QSerialization
set_int8	qdatastream.h	/^		int32_t set_int8(const int8_t value)$/;"	f	class:QDataStream
set_int8	qserialization.h	/^		static int32_t set_int8(char* data, const int64_t data_len, int64_t& pos, const int8_t value)$/;"	f	class:QSerialization
set_interval	qglobal.h	/^		void set_interval(int32_t interval)$/;"	f	class:QWatchdog
set_ip	qipv4.h	/^		inline void set_ip(const char* ip_)$/;"	f	class:QIPv4Addr
set_ip	qipv4.h	/^		inline void set_ip(uint32_t ldata_)$/;"	f	class:QIPv4Addr
set_ip	qipv4.h	/^		void set_ip(QIPv4Addr ip)$/;"	f	class:QIPv4Peer
set_now	qglobal.h	/^		void set_now(int32_t now)$/;"	f	class:QWatchdog
set_port	qipv4.h	/^		void set_port(int32_t port)$/;"	f	class:QIPv4Peer
set_size_	qbitmap.h	/^		uint32_t set_size_;$/;"	m	class:QBitMap2
set_string	qdatastream.h	/^		int32_t set_string(const char* str)$/;"	f	class:QDataStream
set_string	qdatastream.h	/^		int32_t set_string(const std::string& str)$/;"	f	class:QDataStream
set_string	qserialization.h	/^		static int32_t set_string(char* data, const int64_t data_len, int64_t& pos, const char* str)$/;"	f	class:QSerialization
set_string	qserialization.h	/^		static int32_t set_string(char* data, const int64_t data_len, int64_t& pos, const std::string& str)$/;"	f	class:QSerialization
setproctitle	qservice.cc	/^int32_t QService::setproctitle(int32_t argc, char** argv, char* prefix, char* type)$/;"	f	class:QService
setupTrieIndex	qtrietree.cc	/^int32_t QTrieTree::setupTrieIndex()$/;"	f	class:QTrieTree
setupTrieNodeIndex	qtrietree.cc	/^int32_t QTrieTree::setupTrieNodeIndex(QTrieNode* current)$/;"	f	class:QTrieTree
shortestPath2PosString	qwordtokenizer.cc	/^int32_t QWordTokenizer::shortestPath2PosString(const char* pszText, int32_t iTextLen, std::vector<int32_t>& pathVec, char* pszResult, int32_t iResultSize)$/;"	f	class:QWordTokenizer
shortestPath2String	qwordtokenizer.cc	/^int32_t QWordTokenizer::shortestPath2String(const char* pszText, int32_t iTextLen, std::vector<int32_t>& pathVec, char* pszResult, int32_t iResultSize)$/;"	f	class:QWordTokenizer
shrink	qbuffer.h	/^		inline bool shrink()$/;"	f	class:QBuffer
si_map_	qstridallocator.h	/^		QHashSearch<uint64_t> si_map_;$/;"	m	class:QStrIDAllocator
siftDown	qheap.h	/^		void siftDown(int32_t start, int32_t m)$/;"	f	class:QMaxHeap
siftDown	qheap.h	/^		void siftDown(int32_t start, int32_t m)$/;"	f	class:QMinHeap
siftUp	qheap.h	/^		void siftUp(int32_t start)$/;"	f	class:QMaxHeap
siftUp	qheap.h	/^		void siftUp(int32_t start)$/;"	f	class:QMinHeap
signal	qglobal.h	/^		void signal()$/;"	f	class:QTrigger
signal	qthread.h	/^		void signal()$/;"	f	class:QThread
signaled	qthread.h	/^		int32_t signaled;$/;"	m	class:QThread
since	qlogger.h	/^	const char*		since;$/;"	m	struct:QLoggerInfo
size	qbytearray.h	/^		uint32_t size() const$/;"	f	class:QByteArray
size	qchinesespelling.h	/^		int32_t size() const$/;"	f	class:QChineseSpelling
size	qfile.cc	/^int64_t QFile::size()$/;"	f	class:QFile
size	qfile.cc	/^int64_t QFile::size(const char* file_name)$/;"	f	class:QFile
size	qhashmap.h	/^		int32_t size() const$/;"	f	class:QLinearHash
size	qhashmap.h	/^		uint32_t size() const$/;"	f	class:QHashMap
size	qhashmap.h	/^		uint32_t size() const$/;"	f	class:QHashMap2
size	qheap.h	/^		inline int32_t size() const$/;"	f	class:QMaxHeap
size	qheap.h	/^		inline int32_t size() const$/;"	f	class:QMinHeap
size	qlbcluster.h	/^		int32_t size() const$/;"	f	class:QLBCluster
size	qlist.h	/^		int32_t size() const$/;"	f	class:QList
size	qlist.h	/^		int32_t size()$/;"	f	class:QForwardList
size	qqueue.h	/^		int32_t size() const$/;"	f	class:QListQueue
size	qqueue.h	/^		int32_t size() const$/;"	f	class:QPriorityQueue
size	qqueue.h	/^		int32_t size() const$/;"	f	class:QQueue
size	qredblacktree.h	/^		int32_t size()$/;"	f	class:QRedBlackTree
size	qregexp.h	/^		int32_t size() const$/;"	f	class:QRegExp3
size	qshinyxml.h	/^		int32_t size() const$/;"	f	class:QShinyXML
size	qstack.h	/^		inline int32_t size() const$/;"	f	class:QStack
size	qstring.h	/^		inline int32_t size() const$/;"	f	class:QString
size	qvector.h	/^		int32_t size() const$/;"	f	class:QVector
size_	qbytearray.h	/^		uint32_t size_;$/;"	m	class:QByteArray
size_	qheap.h	/^		int32_t size_;$/;"	m	class:QMaxHeap
size_	qheap.h	/^		int32_t size_;$/;"	m	class:QMinHeap
size_	qlist.h	/^		int32_t size_;$/;"	m	class:QForwardList
size_	qlist.h	/^		int32_t size_;$/;"	m	class:QList
size_	qqueue.h	/^		int32_t size_;$/;"	m	class:QPriorityQueue
skip	cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
slice_t	qhttpserver.h	/^	slice_t() :$/;"	f	struct:slice_t
slice_t	qhttpserver.h	/^struct slice_t {$/;"	s
slot_count_	qbitmap.h	/^		uint32_t slot_count_;$/;"	m	class:QBitMap
sock_	qtcpsocket.h	/^		Q_SOCKET_T      sock_;$/;"	m	class:QTcpClient
sock_addr	qhttpserver.h	/^	struct sockaddr_in sock_addr;			\/\/ SOCKET请求地址信息$/;"	m	struct:io_data_t	typeref:struct:io_data_t::sockaddr_in
sock_fd	qhttpserver.h	/^	int32_t		sock_fd;			\/\/ SOCKET请求套接字描述符$/;"	m	struct:io_data_t
sock_len	qhttpserver.h	/^	socklen_t	sock_len;			\/\/ SOCKET请求地址长度$/;"	m	struct:io_data_t
sock_timeout	qhttpserver.h	/^	int32_t		sock_timeout;			\/\/ socket超时时间$/;"	m	struct:config_info_t
socket_pool_	qsocketpool.h	/^		QClientSocket**		socket_pool_;		\/\/ socket连接池队列信息$/;"	m	class:QSocketPool
sons	qtrietree.h	/^	QTrieNode**	sons;	\/* hash sons array *\/$/;"	m	struct:QTrieNode
sort	qvector.h	/^		void sort()$/;"	f	class:QVector
source	qglobal.h	/^	__be16	source;$/;"	m	struct:tcphdr
source	qglobal.h	/^	__be16	source;$/;"	m	struct:udphdr
sourceIP	qglobal.h	/^	unsigned int sourceIP;$/;"	m	struct:HeadIP
source_type	qtcpsocket.h	/^	uint16_t	source_type;$/;"	m	struct:requestHeader
source_type	qtcpsocket.h	/^	uint16_t	source_type;$/;"	m	struct:requestParam
source_type_	qtcpsocket.h	/^		uint16_t	source_type_;$/;"	m	class:QTcpClient
spelling	qchinesespelling.h	/^	char spelling[MAX_SPELLING_LEN];	\/\/ 汉字拼音$/;"	m	struct:__spelling_node
spelling_len	qchinesespelling.h	/^	int32_t	spelling_len;			\/\/ 汉字拼音的实际长度$/;"	m	struct:__spelling_node
spelling_num	qchinesespelling.h	/^	int32_t spelling_num;			\/\/ 当前汉字的实际拼音数$/;"	m	struct:__spelling_info
spelling_table	qchinesespelling.h	/^		SPELLING_INFO* spelling_table;$/;"	m	class:QChineseSpelling
spelling_vec	qchinesespelling.h	/^	struct __spelling_node* spelling_vec;	\/\/ 拼音节点信息$/;"	m	struct:__spelling_info	typeref:struct:__spelling_info::__spelling_node
spin	qglobal.h	/^		QSpinLock* spin;$/;"	m	class:QScopeSpin
spinlock	qglobal.h	/^		pthread_spinlock_t spinlock;$/;"	m	class:QSpinLock
spinlock	qglobal.h	/^		volatile uint32_t spinlock;$/;"	m	class:QSpinLock
split_gram	qgramparser.cc	/^bool QGramParser::split_gram(const std::string& gram, std::list<std::string>& leftMeanings, std::list<std::string>& rightMeanings)$/;"	f	class:QGramParser
start	qglobal.h	/^		inline void start()$/;"	f	class:QStopwatch
start	qglobal.h	/^		int32_t start(void (*sig_handler)(UINT wTimerID, UINT msg, DWORD dwUser, DWORD dwl, DWORD dw2))$/;"	f	class:QWatchdog
start	qglobal.h	/^		int32_t start(void (*sig_handler)(int32_t signo))$/;"	f	class:QWatchdog
start	qhttpserver.h	/^		int32_t start()$/;"	f	class:QHttpServer
start	qtcpsocket.cc	/^int32_t QTcpServer::start()$/;"	f	class:QTcpServer
start	qthread.h	/^		int32_t start()$/;"	f	class:QThread
start	qudpsocket.h	/^		int32_t start()$/;"	f	class:QUdpServer
start_flag_	qtcpsocket.h	/^		bool            start_flag_;$/;"	m	class:QTcpServer
startsWith	qstring.h	/^		bool startsWith(const QString& pat)$/;"	f	class:QString
startsWith	qstring.h	/^		bool startsWith(const char* str, int32_t len=-1)$/;"	f	class:QString
stat_failedconnections_	qtcpsocket.h	/^		uint32_t        stat_failedconnections_;$/;"	m	class:QTcpServer
stat_lastinteraction_	qtcpsocket.h	/^		time_t          stat_lastinteraction_;$/;"	m	class:QTcpServer
stat_numconnections_	qtcpsocket.h	/^		uint32_t        stat_numconnections_;$/;"	m	class:QTcpServer
stat_rejectedconnections_	qtcpsocket.h	/^		uint32_t        stat_rejectedconnections_;$/;"	m	class:QTcpServer
stat_starttime_	qtcpsocket.h	/^		time_t          stat_starttime_;$/;"	m	class:QTcpServer
stat_succconnections_	qtcpsocket.h	/^		uint32_t        stat_succconnections_;$/;"	m	class:QTcpServer
state	qmd5.h	/^		UINT4 state[4];            \/* state (ABCD) *\/$/;"	m	struct:QMD5::__anon6
status	qhttpserver.h	/^	int8_t 		status;				\/\/ 线程工作状态: 0不工作 1工作$/;"	m	struct:thread_info_t
status	qhttpserver.h	/^	uint16_t	status;				\/\/ HTTP协议响应状态码$/;"	m	struct:io_data_t
status	qtcpsocket.h	/^	int32_t		status;$/;"	m	struct:replyHeader
status	qtcpsocket.h	/^	int32_t		status;$/;"	m	struct:replyParam
status	qtcpsocket.h	/^	int32_t         status;$/;"	m	struct:networkReply
status	qtcpsocket.h	/^	int8_t		status;$/;"	m	struct:threadInfo
status_	qhttpclient.h	/^		int32_t		status_;			\/\/ 服务器返回状态码$/;"	m	class:QHttpReplyHeader
status_line	qhttpserver.h	/^	char		status_line[STATUS_LINE_LEN];	\/\/ HTTP协议响应状态行$/;"	m	struct:io_data_t
stop	qglobal.h	/^		inline void stop()$/;"	f	class:QStopwatch
str	qlogger.h	/^	const char*		str;$/;"	m	struct:QLoggerInfo
str2id	qstridallocator.h	/^		int32_t str2id(const char* str, uint32_t str_len, uint32_t& id)$/;"	f	class:QStrIDAllocator
str2listPOS	qgramparser.cc	/^int32_t QGramParser::str2listPOS(const std::string& strPOS, std::list< std::vector<std::string> >& listPOS)$/;"	f	class:QGramParser
str2listPOS	qsimhasher.cc	/^int32_t QSimHasher::str2listPOS(const std::string& strPOS, std::list< std::vector<std::string> >& listPOS)$/;"	f	class:QSimHasher
str_hex_2_dec	qhttpclient.h	/^		int32_t str_hex_2_dec(const char* hex, int32_t len)$/;"	f	class:QHttpClient
strerr	qshinyxml.h	/^		const char* strerr() const$/;"	f	class:QShinyXML
string	cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
string_max_	qstridallocator.h	/^		uint32_t	string_max_;$/;"	m	class:QStrIDAllocator
string_now_	qstridallocator.h	/^		uint32_t	string_now_;$/;"	m	class:QStrIDAllocator
strip	qbuffer.h	/^		inline int32_t strip(const uint64_t length)$/;"	f	class:QBuffer
success_flag_	qdiskcache.h	/^		int32_t			success_flag_;		\/\/ 线程启动成功标志$/;"	m	class:QDiskCache
success_flag_	qlbcluster.h	/^		int32_t			success_flag_;		\/\/ 动态反馈收集线程成功启动标识$/;"	m	class:QLBCluster
suffix	qfile.cc	/^std::string QFile::suffix() const$/;"	f	class:QFile
suffix_object	cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
summary	qlogger.h	/^	const char*		summary;$/;"	m	struct:QLoggerInfo
sw	qhttpserver.h	/^	QStopwatch	sw;				\/\/ 线程运行时间$/;"	m	struct:thread_info_t
sw	qtcpsocket.h	/^	QStopwatch	sw;$/;"	m	struct:threadInfo
syn	qglobal.h	/^		syn:1,$/;"	m	struct:tcphdr
t	qdatetime.h	/^		QTime t;$/;"	m	class:QDateTime
tail	qadlist.h	/^	listNode *tail;$/;"	m	struct:adlist
tailNum	qneologismrecognizer.h	/^			int32_t tailNum;$/;"	m	struct:QNeologismRecognizer::htmInfo
tailPbl	qneologismrecognizer.h	/^			double tailPbl;$/;"	m	struct:QNeologismRecognizer::recordHeader
task_queue_size	qhttpserver.h	/^	int32_t		task_queue_size;		\/\/ 任务队列最大空间$/;"	m	struct:config_info_t
tcphdr	qglobal.h	/^struct tcphdr {$/;"	s
threadInfo	qtcpsocket.h	/^	threadInfo() :$/;"	f	struct:threadInfo
threadInfo	qtcpsocket.h	/^struct threadInfo {$/;"	s
thread_collect	qlbcluster.h	/^		static Q_THREAD_T thread_collect(void* ptr_info)$/;"	f	class:QLBCluster
thread_cpu	qcpu.h	/^		static Q_THREAD_T thread_cpu(void* ptr_info)$/;"	f	class:QCPU
thread_info_	qtcpsocket.h	/^		threadInfo*     thread_info_;$/;"	m	class:QTcpServer
thread_info_t	qhttpserver.h	/^	thread_info_t() :$/;"	f	struct:thread_info_t
thread_info_t	qhttpserver.h	/^struct thread_info_t {$/;"	s
thread_max_	qtcpsocket.h	/^		int32_t         thread_max_;$/;"	m	class:QTcpServer
thread_monitor	qremotemonitor.h	/^		static Q_THREAD_T thread_monitor(void* ptr_info)$/;"	f	class:QRemoteMonitor
thread_save	qdiskcache.h	/^		static Q_THREAD_T thread_save(void* argv)$/;"	f	class:QDiskCache
thread_sort	qalgorithm.h	/^		static Q_THREAD_T thread_sort(void* argv)$/;"	f	class:QQSParallel
tick_	qglobal.h	/^		struct itimerval tick_;$/;"	m	class:QWatchdog	typeref:struct:QWatchdog::itimerval
time	qdatetime.h	/^		QTime time() const$/;"	f	class:QDateTime
timeout	qhttpserver.h	/^	int32_t		timeout;			\/\/ 线程超时时间$/;"	m	struct:thread_info_t
timeout	qlbcluster.h	/^	int32_t 	timeout;	\/\/ 集群服务器超时时间$/;"	m	struct:__server_info
timeout	qtcpsocket.h	/^	int32_t		timeout;$/;"	m	struct:threadInfo
timeout_	qhttpclient.h	/^		int32_t			timeout_;		\/\/ 通信超时时间$/;"	m	class:QHttpClient
timeout_	qnetworkaccessmanager.h	/^		int32_t		timeout_;$/;"	m	class:QNetworkAccessManager
timeout_	qremotemonitor.h	/^		int32_t		timeout_;$/;"	m	class:QRemoteMonitor
timeout_	qsocketpool.h	/^		int32_t			timeout_;		\/\/ socket服务端超时时间$/;"	m	class:QSocketPool
timer_id_	qglobal.h	/^		MMRESULT timer_id_;$/;"	m	class:QWatchdog
timestamp	qdatetime.h	/^		static int32_t timestamp()$/;"	f	class:QDateTime
tinyxml2	tinyxml2.cpp	/^namespace tinyxml2$/;"	n	file:
tinyxml2	tinyxml2.h	/^namespace tinyxml2$/;"	n
toBinaryString	qsimhasher.cc	/^void QSimHasher::toBinaryString(uint64_t req, std::string& res)$/;"	f	class:QSimHasher
toLatin1	qstring.h	/^		inline char toLatin1() const$/;"	f	class:QChar
to_buffer	qhttpclient.h	/^		QStringBuffer& to_buffer()$/;"	f	class:QHttpRequestHeader
to_spelling	qchinesespelling.h	/^		int32_t to_spelling(const char* src, int32_t src_len, char* dest, int32_t dest_size)$/;"	f	class:QChineseSpelling
to_string	qdatetime.h	/^		std::string to_string() const$/;"	f	class:QTime
to_string	qdatetime.h	/^		std::string to_string(int32_t mode=0) const$/;"	f	class:QDate
to_string	qdatetime.h	/^		std::string to_string(int32_t mode=0) const$/;"	f	class:QDateTime
to_string	qipv4.h	/^		inline std::string to_string() const$/;"	f	class:QIPv4Addr
to_string	qipv4.h	/^		std::string to_string() const$/;"	f	class:QIPv4Peer
to_vector	qlist.h	/^		QVector<T_TYPE> to_vector()$/;"	f	class:QList
token	qadjgraph.h	/^	Token<Type> token;$/;"	m	struct:Edge
tokenizer	qsimhasher.h	/^		QWordTokenizer*	tokenizer;$/;"	m	class:QSimHasher
top_	qstack.h	/^		int32_t top_;$/;"	m	class:QStack
tos	qglobal.h	/^	__u8	tos;$/;"	m	struct:iphdr
tot_len	qglobal.h	/^	__be16	tot_len;$/;"	m	struct:iphdr
totalNum	qdictcreator.h	/^	uint32_t totalNum;$/;"	m	struct:dictInfo
totalNum	qneologismrecognizer.h	/^			uint32_t totalNum;$/;"	m	struct:QNeologismRecognizer::dictInfo
totalNum	qwordtokenizer.h	/^	uint32_t totalNum;$/;"	m	struct:dictInfo
totallen	qglobal.h	/^	unsigned short totallen;$/;"	m	struct:HeadIP
trace	qallocator.cc	/^void QPoolAllocator::trace(const char* name)$/;"	f	class:QPoolAllocator
train	qneologismrecognizer.h	/^		int32_t train(const char* pszFileName)$/;"	f	class:QNeologismRecognizer
transfer_encoding_	qhttpclient.h	/^		std::string	transfer_encoding_;		\/\/ 传输编码$/;"	m	class:QHttpReplyHeader
travel_flag	qdir.h	/^			int32_t travel_flag;$/;"	m	struct:QDir::dir_travel_handle
traversal_index_	qdiskcache.h	/^		int32_t			traversal_index_;	\/\/ 缓存类遍历桶索引$/;"	m	class:QDiskCache
traversal_index_	qhashsearch.h	/^		int32_t			traversal_index_;	\/\/ 哈希表遍历桶索引$/;"	m	class:QHashSearch
traversal_pos_	qdiskcache.h	/^		char*			traversal_pos_;		\/\/ 缓存类遍历链表位置$/;"	m	class:QDiskCache
traversal_pos_	qhashsearch.h	/^		char*			traversal_pos_;		\/\/ 哈希表遍历链表位置$/;"	m	class:QHashSearch
traverse	qdiskcache.h	/^		int32_t traverse(Key& key, void*& vprRetBuf, int32_t& data_len)$/;"	f	class:QDiskCache
traverse	qhashmap.h	/^		int32_t traverse(T_KEY& key, T& value)$/;"	f	class:QLinearHash
traverse	qhashsearch.h	/^		int32_t traverse(Key& key, void*& vprRetBuf, int32_t& data_len)$/;"	f	class:QHashSearch
treeMap	qgramparser.h	/^		QGramTree* treeMap;$/;"	m	class:QGramParser
treeMap	qgramtree.h	/^		TreeMap		treeMap;$/;"	m	class:QGramTree
tree_size	qredblacktree.h	/^		int32_t tree_size;			\/\/ QRedBlackTree 大小$/;"	m	class:QRedBlackTree
trieHash	qtrietree.h	/^		inline int32_t trieHash(QTrieNode* p, uint16_t value)$/;"	f	class:QTrieTree
trieTree	qwordtokenizer.h	/^		QTrieTree*		trieTree;$/;"	m	class:QWordTokenizer
trimmed	qstring.h	/^		QString& trimmed()$/;"	f	class:QString
ttl	qglobal.h	/^	__u8	ttl;$/;"	m	struct:iphdr
ttl	qglobal.h	/^	unsigned char ttl;$/;"	m	struct:HeadIP
turn_off_bit	qbitmap.h	/^		bool turn_off_bit(const uint32_t x)$/;"	f	class:QBitMap2
turn_off_bit	qbitmap.h	/^		inline void turn_off_bit(uint8_t bit_num)$/;"	f	class:QBITS16
turn_off_bit	qbitmap.h	/^		void turn_off_bit(const uint32_t pos)$/;"	f	class:QBitMap
turn_on_bit	qbitmap.h	/^		bool turn_on_bit(const uint32_t x)$/;"	f	class:QBitMap2
turn_on_bit	qbitmap.h	/^		inline void turn_on_bit(uint8_t bit_num)$/;"	f	class:QBITS16
turn_on_bit	qbitmap.h	/^		void turn_on_bit(const uint32_t pos)$/;"	f	class:QBitMap
tvdiff	qmailsender.h	/^		long tvdiff(timeval newer, timeval older)$/;"	f	class:QMailSender
tvnow	qmailsender.h	/^		struct timeval tvnow()$/;"	f	class:QMailSender
type	cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
type	qglobal.h	/^	u_int8_t type;$/;"	m	struct:icmphdr
uSize	qtrietree.h	/^	uint32_t	uSize;	\/* bucket size *\/$/;"	m	struct:QTrieNode
uUCS	qtrietree.h	/^	uint16_t	uUCS;	\/* unicode *\/$/;"	m	struct:QTrieNode
uUsed	qtrietree.h	/^	uint16_t	uUsed;	\/* sons *\/$/;"	m	struct:QTrieNode
ucs	qstring.h	/^		uint16_t ucs;$/;"	m	class:QChar
udphdr	qglobal.h	/^struct udphdr {$/;"	s
uint16_t	qglobal.h	/^typedef unsigned short int uint16_t;	\/\/ 16 bit unsigned$/;"	t
uint32_t	qglobal.h	/^typedef unsigned int uint32_t;		\/\/ 32 bit unsigned$/;"	t
uint64_t	qglobal.h	/^typedef unsigned __int64 uint64_t;		\/\/ 64 bit unsigned$/;"	t
uint64_t	qglobal.h	/^typedef unsigned long int uint64_t;		\/\/ 64 bit unsigned$/;"	t
uint64_t	qglobal.h	/^typedef unsigned long long int uint64_t;	\/\/ 64 bit unsigned$/;"	t
uint8_t	qglobal.h	/^typedef unsigned char uint8_t;		\/\/ 8 bit unsigned$/;"	t
un	qglobal.h	/^	} un;$/;"	m	struct:icmphdr	typeref:union:icmphdr::__anon1
uncompress	qzlibmanager.h	/^		int32_t uncompress(uint8_t* src, uint64_t src_len, uint8_t* ptr_out, uint64_t max_out_size)$/;"	f	class:QZlibManager
unicode	qstring.h	/^		inline uint16_t unicode() const$/;"	f	class:QChar
unicode2gbk	qtextcodec.h	/^		static void unicode2gbk(WCHAR* in_string, char* out_string)$/;"	f	class:QTextCodec
unicode2utf8	qtextcodec.h	/^		static void unicode2utf8(char* in_string \/* WCHAR* *\/, char* out_string)$/;"	f	class:QTextCodec
unixtime_	qtcpsocket.h	/^		time_t          unixtime_;$/;"	m	class:QTcpServer
unlock	qglobal.h	/^		inline void unlock()$/;"	f	class:QMutexLock
unlock	qglobal.h	/^		inline void unlock()$/;"	f	class:QRWLock
unlock	qglobal.h	/^		inline void unlock()$/;"	f	class:QSpinLock
unlock	qglobal.h	/^		void unlock()$/;"	f	class:QRWLockFunc
update	qhashmap.h	/^		void update(const value_type& x)$/;"	f	class:QHashMap2
updateKey_FL	qdiskcache.h	/^		int32_t updateKey_FL(Key key, void* vpData=NULL, void** vppRetBuf=NULL, int32_t iIndex=-1)$/;"	f	class:QDiskCache
updateKey_FL	qhashsearch.h	/^		int32_t updateKey_FL(Key key, void* vpData=NULL, void** vppRetBuf=NULL, int32_t iIndex=-1)$/;"	f	class:QHashSearch
urg	qglobal.h	/^		urg:1,$/;"	m	struct:tcphdr
urg_ptr	qglobal.h	/^	__be16	urg_ptr;$/;"	m	struct:tcphdr
url	qhttpserver.h	/^	struct slice_t	url;				\/\/ HTTP协议请求URL信息$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
url	qmysqlclient.h	/^		std::string url;$/;"	m	class:QMySQLClient
url_	qhttpclient.h	/^		std::string	url_;				\/\/ HTTP请求URL$/;"	m	class:QHttpRequestHeader
us_daemon_thread	qudpsocket.h	/^		static Q_THREAD_T us_daemon_thread(void* argv)$/;"	f	class:QUdpServer
user	qmysqlclient.h	/^		std::string user;$/;"	m	class:QMySQLClient
user_agent	qhttpserver.h	/^	struct slice_t	user_agent;			\/\/ HTTP客户端用户代理$/;"	m	struct:io_data_t	typeref:struct:io_data_t::slice_t
user_agent_	qhttpclient.h	/^		std::string	user_agent_;			\/\/ HTTP协议访问浏览器信息$/;"	m	class:QHttpRequestHeader
utf82gbk	qtextcodec.h	/^		static void utf82gbk(char* in_string, long in_strlen, char* out_string)$/;"	f	class:QTextCodec
utf82unicode	qtextcodec.h	/^		static void utf82unicode(char* in_string, char* out_string \/* WCHAR* *\/)$/;"	f	class:QTextCodec
val	qbitmap.h	/^		uint16_t val;$/;"	m	class:QBITS16
value	qadlist.h	/^	void *value;$/;"	m	struct:listNode
value	qredblacktree.h	/^	T value;				\/\/ 值$/;"	m	struct:RBNode
value	qregexp.h	/^	std::vector<std::string> value;$/;"	m	struct:__regexp_info
value	tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:
value_type	qhashmap.h	/^		typedef std::pair<T_KEY, T> value_type;$/;"	t	class:QHashMap
value_type	qhashmap.h	/^		typedef std::pair<T_KEY, T> value_type;$/;"	t	class:QHashMap2
valuedouble	cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
vec_size_	qbitmap.h	/^		uint32_t vec_size_;$/;"	m	class:QBitMap2
version	qglobal.h	/^		version:4;$/;"	m	struct:iphdr
version	qglobal.h	/^	unsigned char version:4;$/;"	m	struct:HeadIP
version	qhttpserver.h	/^	enum version_t 	version;			\/\/ HTTP协议版本信息$/;"	m	struct:io_data_t	typeref:enum:io_data_t::version_t
version	qservice.cc	/^void QService::version()$/;"	f	class:QService
version	qtcpsocket.h	/^	uint64_t	version;$/;"	m	struct:baseHeader
version	qtcpsocket.h	/^	uint64_t	version;$/;"	m	struct:replyHeader
version	qtcpsocket.h	/^	uint64_t	version;$/;"	m	struct:requestHeader
version_	qhttpclient.h	/^		std::string	version_;			\/\/ HTTP协议版本号$/;"	m	class:QHttpRequestHeader
version_	qtcpsocket.h	/^		uint64_t	version_;$/;"	m	class:QTcpClient
version_t	qhttpserver.h	/^enum version_t {$/;"	g
vid	qadjgraph.h	/^	int32_t vid;$/;"	m	struct:Vertex
wait	qglobal.h	/^		bool wait(int32_t timeout=-1)$/;"	f	class:QTimedSem
wait	qglobal.h	/^		inline void wait()$/;"	f	class:QTrigger
waitfor	qthread.h	/^		void waitfor()$/;"	f	class:QThread
weight	qlbcluster.h	/^	int32_t 	weight;		\/\/ 集群服务器的综合权重(0该服务器已挂掉)$/;"	m	struct:__server_info
weight_gap_threshold_	qlbcluster.h	/^		int32_t			weight_gap_threshold_;	\/\/ 新权值与当前权值的差值阀值$/;"	m	class:QLBCluster
what	qbytearray.h	/^				virtual const char* what() const throw()$/;"	f	class:QByteArray::out_of_range
window	qglobal.h	/^	__be16	window;$/;"	m	struct:tcphdr
word_num	qchinesespelling.h	/^		int32_t word_num;$/;"	m	class:QChineseSpelling
word_tokenize	qwordtokenizer.cc	/^int32_t QWordTokenizer::word_tokenize(bool bEnablePOS, const char* pszText, int32_t iTextLen, char* pszResult, int32_t iResultSize)$/;"	f	class:QWordTokenizer
word_tokenize	qwordtokenizer.cc	/^int32_t QWordTokenizer::word_tokenize(const char* pszText, int32_t iLength, char* pszResult, int32_t iResultSize, CodeType codeType, bool bEnablePOS)$/;"	f	class:QWordTokenizer
work_buffer_size	qhttpserver.h	/^	int32_t		work_buffer_size;		\/\/ 工作线程所使用内存大小$/;"	m	struct:config_info_t
work_buffer_size_	qtcpsocket.h	/^		int32_t         work_buffer_size_;$/;"	m	class:QTcpServer
work_thread	qhttpserver.h	/^		static Q_THREAD_T work_thread(void* ptr_info)$/;"	f	class:QHttpServer
work_thread	qtcpsocket.cc	/^Q_THREAD_T QTcpServer::work_thread(void* ptr_info)$/;"	f	class:QTcpServer
work_thread_max	qhttpserver.h	/^	int32_t		work_thread_max;		\/\/ 工作线程数$/;"	m	struct:config_info_t
work_thread_max_	qtcpsocket.h	/^		int32_t         work_thread_max_;$/;"	m	class:QTcpServer
work_thread_timeout	qhttpserver.h	/^	int32_t		work_thread_timeout;		\/\/ 工作线程监控超时时间$/;"	m	struct:config_info_t
work_thread_timeout_	qtcpsocket.h	/^		int32_t         work_thread_timeout_;$/;"	m	class:QTcpServer
wrap	qbytearray.h	/^		QByteArray& wrap(char* data, uint32_t offset, uint32_t size)$/;"	f	class:QByteArray
write	qfile.cc	/^int64_t QFile::write(const char* data, int64_t len)$/;"	f	class:QFile
write	qfile.cc	/^void QFile::write(const std::string& line)$/;"	f	class:QFile
writeLine	qfile.cc	/^void QFile::writeLine(const std::string& line)$/;"	f	class:QFile
write_data_file	qtcpsocket.cc	/^int32_t QTcpServer::write_data_file(const char* ptr_file, FILE*& fp_w, const char* ptr_buf, int32_t buf_len)$/;"	f	class:QTcpServer
write_flg	qglobal.h	/^		uint32_t write_flg;$/;"	m	class:QRWLock
write_fp_	qtcpsocket.h	/^		FILE*           write_fp_;$/;"	m	class:QTcpServer
write_path_	qtcpsocket.h	/^		char*           write_path_;$/;"	m	class:QTcpServer
writecond	qglobal.h	/^		pthread_cond_t writecond;$/;"	m	class:QRWLockFunc
writers	qglobal.h	/^		int32_t writers;$/;"	m	class:QRWLockFunc
wrlock	qglobal.h	/^		inline void wrlock()$/;"	f	class:QRWLock
wrlock	qglobal.h	/^		void wrlock()$/;"	f	class:QRWLockFunc
x	qmd5file.h	/^		uint32_t x[16];$/;"	m	struct:QMD5File::_md5_struct
year	qdatetime.h	/^		int32_t year() const$/;"	f	class:QDate
zlib_	qhttpclient.h	/^		QZlibManager		zlib_;			\/\/ gzip压缩解压用$/;"	m	class:QHttpClient
~DynArray	tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray
~MemPool	tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool
~MemPoolT	tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT
~QAdjGraph	qadjgraph.h	/^		virtual ~QAdjGraph()$/;"	f	class:QAdjGraph
~QAllocator	qallocator.cc	/^QAllocator::~QAllocator()$/;"	f	class:QAllocator
~QBITS16	qbitmap.h	/^		virtual ~QBITS16()$/;"	f	class:QBITS16
~QBitMap	qbitmap.h	/^		virtual ~QBitMap()$/;"	f	class:QBitMap
~QBitMap2	qbitmap.h	/^		inline ~QBitMap2()$/;"	f	class:QBitMap2
~QBuffer	qbuffer.h	/^		virtual ~QBuffer()$/;"	f	class:QBuffer
~QByteArray	qbytearray.h	/^		virtual ~QByteArray()$/;"	f	class:QByteArray
~QCPU	qcpu.h	/^		virtual ~QCPU()$/;"	f	class:QCPU
~QChineseSpelling	qchinesespelling.h	/^		virtual ~QChineseSpelling()$/;"	f	class:QChineseSpelling
~QClientSocket	qsocketpool.h	/^		virtual ~QClientSocket()$/;"	f	class:QClientSocket
~QConfigReader	qconfigreader.h	/^		virtual ~QConfigReader()$/;"	f	class:QConfigReader
~QDataStream	qdatastream.h	/^		virtual ~QDataStream()$/;"	f	class:QDataStream
~QDateTime	qdatetime.h	/^		virtual ~QDateTime()$/;"	f	class:QDateTime
~QDenseIndexManager	qdenseindexmanager.h	/^		virtual ~QDenseIndexManager()$/;"	f	class:QDenseIndexManager
~QDir	qdir.cc	/^QDir::~QDir()$/;"	f	class:QDir
~QDiskCache	qdiskcache.h	/^		virtual ~QDiskCache()$/;"	f	class:QDiskCache
~QFile	qfile.h	/^		virtual ~QFile()$/;"	f	class:QFile
~QForwardList	qlist.h	/^		virtual ~QForwardList()$/;"	f	class:QForwardList
~QGramParser	qgramparser.cc	/^QGramParser::~QGramParser()$/;"	f	class:QGramParser
~QGramTree	qgramtree.cc	/^QGramTree::~QGramTree()$/;"	f	class:QGramTree
~QHashMap	qhashmap.h	/^		virtual ~QHashMap()$/;"	f	class:QHashMap
~QHashMap2	qhashmap.h	/^		virtual ~QHashMap2()$/;"	f	class:QHashMap2
~QHashSearch	qhashsearch.h	/^		virtual ~QHashSearch()$/;"	f	class:QHashSearch
~QHttpClient	qhttpclient.h	/^		virtual ~QHttpClient()$/;"	f	class:QHttpClient
~QHttpReplyHeader	qhttpclient.h	/^		virtual ~QHttpReplyHeader()$/;"	f	class:QHttpReplyHeader
~QHttpRequestHeader	qhttpclient.h	/^		virtual ~QHttpRequestHeader()$/;"	f	class:QHttpRequestHeader
~QHttpServer	qhttpserver.h	/^		virtual ~QHttpServer()$/;"	f	class:QHttpServer
~QLBCluster	qlbcluster.h	/^		virtual ~QLBCluster()$/;"	f	class:QLBCluster
~QLatency	qlatency.h	/^		virtual ~QLatency()$/;"	f	class:QLatency
~QLinearHash	qhashmap.h	/^		virtual ~QLinearHash()$/;"	f	class:QLinearHash
~QList	qlist.h	/^		virtual ~QList()$/;"	f	class:QList
~QListQueue	qqueue.h	/^		virtual ~QListQueue()$/;"	f	class:QListQueue
~QLogger	qlogger.cc	/^QLogger::~QLogger()$/;"	f	class:QLogger
~QLogicalParser	qlogicalparser.cc	/^QLogicalParser::~QLogicalParser()$/;"	f	class:QLogicalParser
~QMailSender	qmailsender.h	/^		virtual ~QMailSender()$/;"	f	class:QMailSender
~QMarkovModel	qmarkovmodel.h	/^		virtual ~QMarkovModel()$/;"	f	class:QMarkovModel
~QMaxHeap	qheap.h	/^		virtual ~QMaxHeap()$/;"	f	class:QMaxHeap
~QMemcachedClient	qmemcachedclient.h	/^		virtual ~QMemcachedClient()$/;"	f	class:QMemcachedClient
~QMinHeap	qheap.h	/^		virtual ~QMinHeap()$/;"	f	class:QMinHeap
~QMutexLock	qglobal.h	/^		virtual ~QMutexLock()$/;"	f	class:QMutexLock
~QMySQLClient	qmysqlclient.cc	/^QMySQLClient::~QMySQLClient()$/;"	f	class:QMySQLClient
~QNeologismRecognizer	qneologismrecognizer.h	/^		virtual ~QNeologismRecognizer()$/;"	f	class:QNeologismRecognizer
~QNetworkAccessManager	qnetworkaccessmanager.cc	/^QNetworkAccessManager::~QNetworkAccessManager()$/;"	f	class:QNetworkAccessManager
~QObjectPool	qobjectpool.h	/^		virtual ~QObjectPool()$/;"	f	class:QObjectPool
~QOcrManager	qocrmanager.h	/^		virtual ~QOcrManager()$/;"	f	class:QOcrManager
~QPoolAllocator	qallocator.cc	/^QPoolAllocator::~QPoolAllocator()$/;"	f	class:QPoolAllocator
~QPriorityQueue	qqueue.h	/^		inline ~QPriorityQueue()$/;"	f	class:QPriorityQueue
~QQSParallel	qalgorithm.h	/^		virtual ~QQSParallel()$/;"	f	class:QQSParallel
~QQueue	qqueue.h	/^		inline ~QQueue()$/;"	f	class:QQueue
~QRWLock	qglobal.h	/^		virtual ~QRWLock()$/;"	f	class:QRWLock
~QRWLockFunc	qglobal.h	/^		virtual ~QRWLockFunc()$/;"	f	class:QRWLockFunc
~QRedBlackTree	qredblacktree.h	/^		virtual ~QRedBlackTree()$/;"	f	class:QRedBlackTree
~QRedisClient	qredisclient.h	/^		virtual ~QRedisClient()$/;"	f	class:QRedisClient
~QRegExp	qregexp.h	/^		virtual ~QRegExp()$/;"	f	class:QRegExp
~QRegExp2	qregexp.h	/^		virtual ~QRegExp2()$/;"	f	class:QRegExp2
~QRegExp3	qregexp.h	/^		virtual ~QRegExp3()$/;"	f	class:QRegExp3
~QRemoteMonitor	qremotemonitor.h	/^		virtual ~QRemoteMonitor()$/;"	f	class:QRemoteMonitor
~QScopeMutex	qglobal.h	/^		virtual ~QScopeMutex()$/;"	f	class:QScopeMutex
~QScopeRead	qglobal.h	/^		virtual ~QScopeRead()$/;"	f	class:QScopeRead
~QScopeSpin	qglobal.h	/^		virtual ~QScopeSpin()$/;"	f	class:QScopeSpin
~QScopeWrite	qglobal.h	/^		virtual ~QScopeWrite()$/;"	f	class:QScopeWrite
~QService	qservice.cc	/^QService::~QService()$/;"	f	class:QService
~QShinyXML	qshinyxml.h	/^		virtual ~QShinyXML()$/;"	f	class:QShinyXML
~QSimHasher	qsimhasher.cc	/^QSimHasher::~QSimHasher()$/;"	f	class:QSimHasher
~QSocketPool	qsocketpool.h	/^		virtual ~QSocketPool()$/;"	f	class:QSocketPool
~QSpinLock	qglobal.h	/^		virtual ~QSpinLock()$/;"	f	class:QSpinLock
~QStack	qstack.h	/^		inline ~QStack()$/;"	f	class:QStack
~QStoreManager	qstoremanager.h	/^		virtual ~QStoreManager()$/;"	f	class:QStoreManager
~QStrIDAllocator	qstridallocator.h	/^		virtual ~QStrIDAllocator()$/;"	f	class:QStrIDAllocator
~QString	qstring.h	/^		virtual ~QString()$/;"	f	class:QString
~QStringBuffer	qglobal.h	/^		virtual ~QStringBuffer()$/;"	f	class:QStringBuffer
~QTcpClient	qtcpsocket.cc	/^QTcpClient::~QTcpClient()$/;"	f	class:QTcpClient
~QTcpServer	qtcpsocket.cc	/^QTcpServer::~QTcpServer()$/;"	f	class:QTcpServer
~QThread	qthread.h	/^		virtual ~QThread()$/;"	f	class:QThread
~QTimedSem	qglobal.h	/^		virtual ~QTimedSem()$/;"	f	class:QTimedSem
~QTrieTree	qtrietree.cc	/^QTrieTree::~QTrieTree()$/;"	f	class:QTrieTree
~QTrigger	qglobal.h	/^		virtual ~QTrigger()$/;"	f	class:QTrigger
~QVector	qvector.h	/^		virtual ~QVector()$/;"	f	class:QVector
~QWatchdog	qglobal.h	/^		virtual ~QWatchdog()$/;"	f	class:QWatchdog
~QWordTokenizer	qwordtokenizer.cc	/^QWordTokenizer::~QWordTokenizer()$/;"	f	class:QWordTokenizer
~QZlibManager	qzlibmanager.h	/^		virtual ~QZlibManager()$/;"	f	class:QZlibManager
~RBNode	qredblacktree.h	/^	~RBNode() {$/;"	f	struct:RBNode
~ShinyNode	qshinyxml.h	/^		virtual ~ShinyNode()$/;"	f	class:ShinyNode
~StrPair	tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair
~XMLAttribute	tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute
~XMLComment	tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment
~XMLDeclaration	tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration
~XMLDocument	tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument
~XMLElement	tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement
~XMLNode	tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode
~XMLPrinter	tinyxml2.h	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter
~XMLText	tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText
~XMLUnknown	tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown
~XMLVisitor	tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor
~noncopyable	qglobal.h	/^		virtual ~noncopyable() {}$/;"	f	class:noncopyable
~out_of_range	qbytearray.h	/^				virtual ~out_of_range() throw()$/;"	f	class:QByteArray::out_of_range
